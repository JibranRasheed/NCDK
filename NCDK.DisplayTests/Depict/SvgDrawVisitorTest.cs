/*
 * Copyright (c) 2015 John May <jwmay@users.sf.net>
 *
 * Contact: cdk-devel@lists.sourceforge.net
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or (at
 * your option) any later version. All we ask is that proper credit is given
 * for our work, which includes - but is not limited to - adding the above
 * copyright notice to the beginning of your source code files, and to any
 * copyright notice that you may distribute with programs based on this work.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 U
 */

using Microsoft.VisualStudio.TestTools.UnitTesting;
using NCDK.Renderers.Elements;
using System.Windows.Media;
using WPF = System.Windows;

namespace NCDK.Depict
{
    [TestClass()]
    public class SvgDrawVisitorTest
    {
        [TestMethod()]
        public void Empty()
        {
            string empty = new SvgDrawVisitor(50, 50, Depiction.UnitsMM).ToString();
            Assert.AreEqual(
                "<?xml version='1.0' encoding='UTF-8'?>\n"
                + "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n"
                + "<svg version='1.2' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='50mm' height='50mm' viewBox='0 0 50 50'>\n"
                + "  <desc>Generated by the Chemistry Development Kit (http://github.com/cdk)</desc>\n"
                + "</svg>\n",
                empty);
        }

        [TestMethod()]
        public void MarkedElementTest()
        {
            SvgDrawVisitor visitor = new SvgDrawVisitor(50, 50, Depiction.UnitsMM);
            visitor.Visit(MarkedElement.Markup(new LineElement(new WPF.Point(0, 0), new WPF.Point(1, 1), 0.5, Colors.Red), "test-class"));
            Assert.AreEqual(
                "<?xml version='1.0' encoding='UTF-8'?>\n"
                + "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n"
                + "<svg version='1.2' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='50mm' height='50mm' viewBox='0 0 50 50'>\n"
                + "  <desc>Generated by the Chemistry Development Kit (http://github.com/cdk)</desc>\n"
                + "  <g stroke-linecap='round' stroke-linejoin='round'>\n"
                + "    <line x1='0' y1='0' x2='1' y2='1' stroke='#FF0000' stroke-width='0.5'/>\n"
                + "  </g>\n"
                + "</svg>\n",
                visitor.ToString());
        }

        [TestMethod()]
        public void TranslatedLine()
        {
            SvgDrawVisitor visitor = new SvgDrawVisitor(50, 50, Depiction.UnitsMM);
            visitor.Visit(new LineElement(new WPF::Point(0, 0), new WPF::Point(1, 1), 0.5, Colors.Red));
            visitor.Transform = new TranslateTransform(10, 10);
            visitor.Visit(new LineElement(new WPF::Point(0, 0), new WPF::Point(1, 1), 0.5, Colors.Red));
            Assert.AreEqual(
                "<?xml version='1.0' encoding='UTF-8'?>\n"
                + "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n"
                + "<svg version='1.2' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='50mm' height='50mm' viewBox='0 0 50 50'>\n"
                + "  <desc>Generated by the Chemistry Development Kit (http://github.com/cdk)</desc>\n"
                + "  <g stroke-linecap='round' stroke-linejoin='round'>\n"
                + "    <line x1='0' y1='0' x2='1' y2='1' stroke='#FF0000' stroke-width='0.5'/>\n"
                + "    <line x1='10' y1='10' x2='11' y2='11' stroke='#FF0000' stroke-width='0.5'/>\n"
                + "  </g>\n"
                + "</svg>\n",
                visitor.ToString());
        }

        [TestMethod()]
        public void ScaledStroke()
        {
            SvgDrawVisitor visitor = new SvgDrawVisitor(50, 50, Depiction.UnitsMM);
            visitor.Visit(new LineElement(new WPF::Point(0, 0), new WPF::Point(1, 1), 0.5, Colors.Red));
            visitor.Transform = new ScaleTransform(2, 2);
            visitor.Visit(new LineElement(new WPF::Point(0, 0), new WPF::Point(1, 1), 0.5, Colors.Red));
            Assert.AreEqual(
                "<?xml version='1.0' encoding='UTF-8'?>\n"
                + "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n"
                + "<svg version='1.2' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='50mm' height='50mm' viewBox='0 0 50 50'>\n"
                + "  <desc>Generated by the Chemistry Development Kit (http://github.com/cdk)</desc>\n"
                + "  <g stroke-linecap='round' stroke-linejoin='round'>\n"
                + "    <line x1='0' y1='0' x2='1' y2='1' stroke='#FF0000' stroke-width='0.5'/>\n"
                + "    <line x1='0' y1='0' x2='2' y2='2' stroke='#FF0000' stroke-width='1'/>\n"
                + "  </g>\n"
                + "</svg>\n",
                visitor.ToString());
        }

        [TestMethod()]
        public void FilledPath()
        {
            SvgDrawVisitor visitor = new SvgDrawVisitor(50, 50, Depiction.UnitsMM);
            visitor.Visit(GeneralPath.ShapeOf(CreateRoundRectangle(new WPF::Rect(0, 0, 10, 10), 2, 2), Colors.Blue));
            var str = visitor.ToString();
            Assert.AreEqual(
                "<?xml version='1.0' encoding='UTF-8'?>\n"
                + "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n"
                + "<svg version='1.2' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='50mm' height='50mm' viewBox='0 0 50 50'>\n"
                + "  <desc>Generated by the Chemistry Development Kit (http://github.com/cdk)</desc>\n"
                + "  <g stroke-linecap='round' stroke-linejoin='round'>\n"
                + "    <path d='M1 0h8c0.55 0 1 0.45 1 1v8c0 0.55 -0.45 1 -1 1h-8c-0.55 0 -1 -0.45 -1 -1v-8c0 -0.55 0.45 -1 1 -1z' stroke='none' fill='#0000FF'/>\n"
                + "  </g>\n"
                + "</svg>\n",
                str);
        }

        PathGeometry CreateRoundRectangle(WPF::Rect rect, double radiusX, double radiusY)
        {
            radiusX /= 2;
            radiusY /= 2;
            var pg = new PathGeometry();
            var pf = new PathFigure
            {
                StartPoint = new WPF.Point(rect.Left, rect.Top + radiusY)
            };
            pf.Segments.Add(
                new LineSegment(
                    new WPF.Point(rect.Left, rect.Bottom - radiusY), true));
            pf.Segments.Add(
                new BezierSegment(
                    new WPF.Point(rect.Left, rect.Bottom - radiusY * 0.45),
                    new WPF.Point(rect.Left + radiusX * 0.45, rect.Bottom),
                    new WPF.Point(rect.Left + radiusX, rect.Bottom),
                    true));
            pf.Segments.Add(
                new LineSegment(
                    new WPF.Point(rect.Right - radiusX, rect.Bottom), true));
            pf.Segments.Add(
                new BezierSegment(
                    new WPF.Point(rect.Right - radiusX * 0.45, rect.Bottom),
                    new WPF.Point(rect.Right, rect.Bottom - radiusY * 0.45),
                    new WPF.Point(rect.Right, rect.Bottom - radiusY),
                    true));
            pf.Segments.Add(
                new LineSegment(
                    new WPF.Point(rect.Right, rect.Top + radiusY), true));
            pf.Segments.Add(
                new BezierSegment(
                    new WPF.Point(rect.Right, rect.Top + radiusY * 0.45),
                    new WPF.Point(rect.Right - radiusX * 0.45, rect.Top),
                    new WPF.Point(rect.Right - radiusX, rect.Top),
                    true));
            pf.Segments.Add(
                new LineSegment(
                    new WPF.Point(rect.Left + radiusX, rect.Top), true));
            pf.Segments.Add(
                new BezierSegment(
                    new WPF.Point(rect.Left + radiusX * 0.45, rect.Top),
                    new WPF.Point(rect.Left, rect.Top + radiusY * 0.45),
                    new WPF.Point(rect.Left, rect.Top + radiusY),
                    true));
            pf.IsClosed = true;
            pg.Figures.Add(pf);
            return pg;
        }

        [TestMethod()]
        public void TransformedPath()
        {
            SvgDrawVisitor visitor = new SvgDrawVisitor(50, 50, Depiction.UnitsMM)
            {
                Transform = new TranslateTransform(15, 15)
            };
            visitor.Visit(GeneralPath.ShapeOf(CreateRoundRectangle(new WPF::Rect(0, 0, 10, 10), 2, 2), Colors.Blue));
            var str = visitor.ToString();
            var expected =
                "<?xml version='1.0' encoding='UTF-8'?>\n"
                + "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n"
                + "<svg version='1.2' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='50mm' height='50mm' viewBox='0 0 50 50'>\n"
                + "  <desc>Generated by the Chemistry Development Kit (http://github.com/cdk)</desc>\n"
                + "  <g stroke-linecap='round' stroke-linejoin='round'>\n"
                + "    <path d='M16 15h8c0.55 0 1 0.45 1 1v8c0 0.55 -0.45 1 -1 1h-8c-0.55 0 -1 -0.45 -1 -1v-8c0 -0.55 0.45 -1 1 -1z' stroke='none' fill='#0000FF'/>\n"
                + "  </g>\n"
                + "</svg>\n";
            Assert.AreEqual(expected, str);
        }

        [TestMethod()]
        public void TextElements()
        {
            SvgDrawVisitor visitor = new SvgDrawVisitor(100, 100, Depiction.UnitsMM);
            visitor.Visit(new TextElement(new WPF::Point(50, 50), "PNG < EPS < SVG", Colors.Red));
            Assert.AreEqual(
                "<?xml version='1.0' encoding='UTF-8'?>\n"
                + "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n"
                + "<svg version='1.2' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='100mm' height='100mm' viewBox='0 0 100 100'>\n"
                + "  <desc>Generated by the Chemistry Development Kit (http://github.com/cdk)</desc>\n"
                + "  <g stroke-linecap='round' stroke-linejoin='round'>\n"
                + "    <text  x='50' y='50' fill='#FF0000' text-anchor='middle'>PNG &lt; EPS &lt; SVG</text>\n"
                + "  </g>\n"
                + "</svg>\n",
                visitor.ToString());
        }

        [TestMethod()]
        public void RectElements()
        {
            SvgDrawVisitor visitor = new SvgDrawVisitor(100, 100, Depiction.UnitsMM);
            visitor.Visit(new RectangleElement(new WPF::Rect(0, 0, 100, 100), Colors.White));
            Assert.AreEqual(
                "<?xml version='1.0' encoding='UTF-8'?>\n"
                + "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n"
                + "<svg version='1.2' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='100mm' height='100mm' viewBox='0 0 100 100'>\n"
                + "  <desc>Generated by the Chemistry Development Kit (http://github.com/cdk)</desc>\n"
                + "  <g stroke-linecap='round' stroke-linejoin='round'>\n"
                + "    <rect x='0' y='-100' width='100' height='100' fill='none' stroke='#FFFFFF'/>\n"
                + "  </g>\n"
                + "</svg>\n",
                visitor.ToString());
        }
    }
}
