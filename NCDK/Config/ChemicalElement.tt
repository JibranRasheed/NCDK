<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".tt.cs" #>

/* 
 * Copyright (C) 2017-2018  Kazuya Ujihara <ujihara.kazuya@gmail.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1
 * of the License, or (at your option) any later version.
 * All we ask is that proper credit is given for our work, which includes
 * - but is not limited to - adding the above copyright notice to the beginning
 * of your source code files, and to any copyright notice that you may distribute
 * with programs based on this work.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT Any WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 */

using System;
using System.Collections.Generic;

namespace NCDK.Config
{
    public static class ChemicalElements
    {
<#
        var name_and_numbers = new List<NameAndNumber>();
        var fn = Path.Combine(new FileInfo(this.Host.TemplateFile).Directory.FullName, "Element.txt");
        string prevLine = null;
        using (var reader = new StreamReader(fn))
        {
            string line;
            while ((line = reader.ReadLine()) != null)
            {
                var match = re.Match(line);
                if (!match.Success)
                {
                    line = line.Trim();
#>
        <#= line #>
<#
                    prevLine = line;
                    continue;
                }
                else
                {
                    var name = match.Groups["name"].Value;
                    var inner = match.Groups["inner"].Value;
                    var number = int.Parse(match.Groups["number"].Value);
                    var symbol = match.Groups["symbol"].Value;
                    var isObsolete = prevLine != null && prevLine.StartsWith("[Obsolete", StringComparison.Ordinal);
                    name_and_numbers.Add(new NameAndNumber(name, number, symbol, isObsolete));
                    line = "public static readonly ChemicalElement " + name + " = new ChemicalElement(\"" + name + "\", " + inner + ");";
#>
        <#= line #>
<#
                    prevLine = line;
                }
            }
#>
    }
<#
    }
#>
    public sealed partial class ChemicalElement
    {
#pragma warning disable CA1034 // Nested types should not be visible
        public static class AtomicNumbers
#pragma warning restore CA1034 // Nested types should not be visible
        {
<#
        foreach (var nn in name_and_numbers)
        {
#>
            public const int <#= nn.Name #> = <#= nn.Number #>;
<#
        }
#>
        }

        private static IReadOnlyDictionary<string, ChemicalElement> symbolMap;
        
        /// <summary>
        /// Lookup elements by symbol / name.
        /// </summary>
        internal static IReadOnlyDictionary<string, ChemicalElement> SymbolMap
        {
            get
            {
                if (symbolMap == null)
                {
                    symbolMap = new Dictionary<string, ChemicalElement>()
                    {
<#
        foreach (var nn in name_and_numbers)
        {
#>
                        ["<#= nn.Name.ToLowerInvariant() #>"] = ChemicalElements.<#= nn.Name #>,
                        ["<#= nn.Symbol.ToLowerInvariant() #>"] = ChemicalElements.<#= nn.Name #>,
<#
        }
#>
                        // recently named elements
                        ["uub"] = ChemicalElements.Copernicium, // 2009
                        ["ununbium"] = ChemicalElements.Copernicium,
                        ["uuq"] = ChemicalElements.Flerovium, // 2012
                        ["ununquadium"] = ChemicalElements.Flerovium,
                        ["uuh"] = ChemicalElements.Livermorium, // 2012
                        ["ununhexium"] = ChemicalElements.Livermorium,
                        // alternative spellings
                        ["sulphur"] = ChemicalElements.Sulfur,
                        ["cesium"] = ChemicalElements.Caesium,
                        ["aluminum"] = ChemicalElements.Aluminium,
                    };
                }
                return symbolMap;
            }
        }
<#
        int maxAtomicNumber = name_and_numbers.Select(n => n.Number).Max();
        string[] uniq_atoms = new string[maxAtomicNumber + 1];
        foreach (var nn in name_and_numbers)
        {
            if (uniq_atoms[nn.Number] == null && !nn.IsObsolete)
            {
                uniq_atoms[nn.Number] = nn.Name;
            }
        }
#>

        private static IReadOnlyList<ChemicalElement> values;

        /// <summary>
        /// Lookup elements by atomic number.
        /// </summary>
        public static IReadOnlyList<ChemicalElement> Values
        {
            get
            {
                if (values == null)
                {
                    values = new ChemicalElement[] 
                    {
<#
        foreach (var name in uniq_atoms)
        {
#>
                    <#= name == null ? "null" : "ChemicalElements." + name #>,
<#
        }
#>
                    };
                }
                return values;
            }
        }
    }
}

<#+
    static Regex re = new Regex(@"(?<name>\w+)\((?<inner>(?<number>\d+)\, " + "\"" + @"(?<symbol>|[A-Z][a-z]{0,2})" + "\"" + @"\, .*)\)", RegexOptions.Compiled);
    // Magnesium(12, "Mg", 3, 2, 1.30, 2.20, 1.31)

    public class NameAndNumber
    {
        public NameAndNumber(string name, int number, string symbol, bool isObsolete)
        {
            this.Name = name;
            this.Number = number;
            this.Symbol = symbol;
            this.IsObsolete = isObsolete;
        }

        public string Name { get; set; }
        public int Number { get; set; }
        public string Symbol　{ get; set; }
        public bool IsObsolete { get; set; } 
    }
#>
