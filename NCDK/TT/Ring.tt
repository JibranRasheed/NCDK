<#@ include file="ChemObjectConfig.ttinclude" #>
<# GenerateCopyrightHeader(); #>

using System;
using System.Text;
using System.Linq;
using System.Collections.Generic;

<#    foreach (var ns in namespaces) 
{
#>
namespace <#= ns.NS #>
{
    [Serializable]
    public class Ring
        : AtomContainer, IRing
    {
        public Ring()
            : base()
        { }

        public Ring(IAtomContainer atomContainer)
            : base(atomContainer)
        { }

		public Ring(
           IEnumerable<IAtom> atoms,
           IEnumerable<IBond> bonds)
		   : base(atoms, bonds)
		{ }

        public Ring(int ringSize, string elementSymbol)
            : base()
        {
            var prevAtom = new Atom(elementSymbol);
            atoms.Add(prevAtom);
            for (int i = 1; i < ringSize; i++)
            {
                var atom = new Atom(elementSymbol);
                atoms.Add(atom);
                bonds.Add(new Bond(prevAtom, atom, BondOrder.Single));
                prevAtom = atom;
            }
            bonds.Add(new Bond(prevAtom, atoms[0], BondOrder.Single));
        }

        public int RingSize => atoms.Count;

        public IBond GetNextBond(IBond bond, IAtom atom)
            => bonds.Where(n => n.Contains(atom) && n != bond).FirstOrDefault();

        public int BondOrderSum
            => bonds.Where(n => n.Order != null).Select(n => n.Order.Numeric).Sum();

        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("Ring(");
            sb.Append(base.ToString());
            sb.Append(')');
            return sb.ToString();
        }

        public override ICDKObject Clone(CDKObjectMap map)
        {
            return base.Clone(map);
        }
    }
}
<#
}
#>
