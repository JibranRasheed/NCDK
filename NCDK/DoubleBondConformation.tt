<#@ include file="..\Config.ttinclude" #>

/* Copyright (C) 2012  Egon Willighagen <egonw@users.sf.net>
 *
 * Contact: cdk-devel@lists.sourceforge.net
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1
 * of the License, or (at your option) any later version.
 * All we ask is that proper credit is given for our work, which includes
 * - but is not limited to - adding the above copyright notice to the beginning
 * of your source code files, and to any copyright notice that you may distribute
 * with programs based on this work.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 */

namespace NCDK
{
    /// <summary>
    /// Enumeration that defines the two possible values for this stereochemistry type.
    /// </summary>
<# 
    GenerateEnumBody(
        "DoubleBondConformation", 
            new[]
        {
            "Unset",
            "Together:Z-form",
            "Opposite:E-form",
        },
        true
    ); 
#>
    {
        public bool IsUnset => this.Ordinal == 0;

        /// <summary>
        /// Invert this conformation, Together.Invert() = Opposite, Opposite.Invert() = Together.
        /// </summary>
        /// <returns>the inverse conformation</returns>
        public DoubleBondConformation Invert() => Ordinal == O.Together ? Opposite : Together;

         public static DoubleBondConformation ToConformation(StereoElement.Configurations configure)
        {
            switch (configure.Ordinal)
            {
                case StereoElement.Configurations.O.Together:
                    return Together;
                case StereoElement.Configurations.O.Opposite:
                    return Opposite;
                default:
                    throw new System.ArgumentException("Cannot map config to enum: " + configure);
            }
        }

        public static StereoElement.Configurations ToConfig(DoubleBondConformation conformation)
        {
            switch (conformation.Ordinal)
            {
                case DoubleBondConformation.O.Together:
                    return StereoElement.Configurations.Together;
                case DoubleBondConformation.O.Opposite:
                    return StereoElement.Configurations.Opposite;
                default:
                    throw new System.ArgumentException("Cannot map enum to config: " + conformation);
            }
        }
    }
}
