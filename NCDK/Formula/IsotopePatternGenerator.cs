/* Copyright (C) 2007  Miguel Rojasch <miguelrojasch@users.sf.net>
 *               2014  Mark B Vine (orcid:0000-0002-7794-0426)
 *
 * Contact: cdk-devel@lists.sourceforge.net
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 */

using NCDK.Config;
using NCDK.Tools.Manipulator;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace NCDK.Formula
{
    /// <summary>
    /// Generates all Combinatorial chemical isotopes given a structure.
    /// </summary>
    // @cdk.module  formula
    // @author      Miguel Rojas Cherto
    // @cdk.created 2007-11-20
    // @cdk.githash
    // @cdk.keyword isotope pattern
    public class IsotopePatternGenerator
    {
        private IsotopeFactory isoFactory = BODRIsotopeFactory.Instance;

        /// <summary>
        /// Minimal abundance of the isotopes to be added in the combinatorial search.
        /// </summary>
        private readonly double minAbundance;

        /// <summary>
        /// Maximum tolerance between two mass 
        /// </summary>
        private const double Tolerance = 0.00005;

        /// <summary>
        /// Constructor for the IsotopeGenerator. The minimum abundance is set to 
        ///                         0.1 (10% abundance) by default. 
        /// </summary>
        public IsotopePatternGenerator()
            : this(0.1)
        { }

        /// <param name="minAbundance">Minimal abundance of the isotopes to be added in the combinatorial search (scale 0.0 to 1.0)</param>
        public IsotopePatternGenerator(double minAbundance)
        {
            this.minAbundance = minAbundance;
            Trace.TraceInformation("Generating all Isotope structures with IsotopeGenerator");
        }

        /// <summary>
        /// Minimum abundance
        /// </summary>
        public double MinAbundance => minAbundance;

        /// <summary>
        /// Get all combinatorial chemical isotopes given a structure.
        /// </summary>
        /// <param name="molFor">The IMolecularFormula to start</param>
        /// <returns>A IsotopePattern object containing the different combinations</returns>
        public IsotopePattern GetIsotopes(IMolecularFormula molFor)
        {
            var isoFactory = BODRIsotopeFactory.Instance;
            var builder = molFor.Builder;
            string mf = MolecularFormulaManipulator.GetString(molFor, true);

            var molecularFormula = MolecularFormulaManipulator.GetMajorIsotopeMolecularFormula(mf, builder);

            IsotopePattern abundance_Mass = null;

            foreach (var isos in molecularFormula.Isotopes)
            {
                string elementSymbol = isos.Symbol;
                int atomCount = molecularFormula.GetCount(isos);

                for (int i = 0; i < atomCount; i++)
                {
                    abundance_Mass = CalculateAbundanceAndMass(abundance_Mass, elementSymbol);
                }
            }

            var isoP = IsotopePatternManipulator.SortAndNormalizedByIntensity(abundance_Mass);
            isoP = CleanAbundance(isoP, minAbundance);
            var isoPattern = IsotopePatternManipulator.SortByMass(isoP);
            return isoPattern;
        }

        /// <summary>
        /// Calculates the mass and abundance of all isotopes generated by adding one
        /// atom. Receives the periodic table element and calculate the isotopes, if
        /// there exist a previous calculation, add these new isotopes. In the
        /// process of adding the new isotopes, remove those that has an abundance
        /// less than setup parameter minAbundance, and remove duplicated masses.
        /// </summary>
        /// <param name="elementSymbol">The chemical element symbol</param>
        /// <returns>the calculation was successful</returns>
        private IsotopePattern CalculateAbundanceAndMass(IsotopePattern isotopePattern, string elementSymbol)
        {
            var isotopes = isoFactory.GetIsotopes(elementSymbol);

            if (isotopes == null)
                return isotopePattern;

            double mass, previousMass, abundance, totalAbundance, newAbundance;

            var isotopeMassAndAbundance = new Dictionary<double, double>();
            // Generate isotopes for the current atom (element)
            var currentISOPattern = new IsotopePattern(isotopes.Select(n => new IsotopeContainer(n.ExactMass.Value, n.NaturalAbundance.Value)));

            // Verify if there is a previous calculation. If it exists, add the new
            // isotopes
            if (isotopePattern == null)
            {
                isotopePattern = currentISOPattern;
            }
            else
            {
                foreach (var isotope in isotopePattern.Isotopes)
                {
                    totalAbundance = isotope.Intensity;

                    if (totalAbundance == 0)
                        continue;

                    for (int j = 0; j < currentISOPattern.Isotopes.Count; j++)
                    {
                        abundance = currentISOPattern.Isotopes[j].Intensity;
                        mass = isotope.Mass;

                        if (abundance == 0)
                            continue;

                        newAbundance = totalAbundance * abundance * 0.01;
                        mass += currentISOPattern.Isotopes[j].Mass;

                        // Filter duplicated masses
                        previousMass = SearchMass(isotopeMassAndAbundance.Keys, mass);
                        if (isotopeMassAndAbundance.ContainsKey(previousMass))
                        {
                            newAbundance += isotopeMassAndAbundance[previousMass];
                            mass = previousMass;
                        }

                        // Filter isotopes too small
                        if (newAbundance > 1E-10)
                        {
                            isotopeMassAndAbundance[mass] = newAbundance;
                        }
                        previousMass = 0;
                    }
                }

                isotopePattern = new IsotopePattern(isotopeMassAndAbundance.Keys.Select(n => new IsotopeContainer(n, isotopeMassAndAbundance[n])));
            }

            return isotopePattern;
        }

        /// <summary>
        /// Search the key mass in this Set.
        /// </summary>
        /// <param name="keySet">The Set object</param>
        /// <param name="mass">The mass to look for</param>
        /// <returns>The key value</returns>
        private static double SearchMass(ICollection<Double> keySet, double mass)
        {
            double diff;
            foreach (var key in keySet)
            {
                diff = Math.Abs(key - mass);
                if (diff < Tolerance)
                    return key;
            }

            return 0.0;
        }

        /// <summary>
        /// Normalize the intensity (relative abundance) of all isotopes in relation
        /// of the most abundant isotope.
        /// </summary>
        /// <param name="isopattern">The IsotopePattern object</param>
        /// <param name="minAbundance">The minimum abundance</param>
        /// <returns>The IsotopePattern cleaned</returns>
        private static IsotopePattern CleanAbundance(IsotopePattern isopattern, double minAbundance)
        {
            double intensity;
            double biggestIntensity = 0;

            foreach (var sc in isopattern.Isotopes)
            {
                intensity = sc.Intensity;
                if (intensity > biggestIntensity)
                    biggestIntensity = intensity;
            }

            foreach (var sc in isopattern.Isotopes)
            {
                intensity = sc.Intensity;
                intensity /= biggestIntensity;
                if (intensity < 0)
                    intensity = 0;

                sc.Intensity = intensity;
            }

            IsotopePattern sortedIsoPattern = new IsotopePattern(
                isopattern.Isotopes
                    .Where(n => n.Intensity >= minAbundance)
                    .Select(n => new IsotopeContainer(n.Mass, n.Intensity)));
            sortedIsoPattern.MonoIsotope = sortedIsoPattern.Isotopes[0];
            return sortedIsoPattern;
        }
    }
}
