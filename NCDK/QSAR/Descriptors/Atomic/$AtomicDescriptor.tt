<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".tt.cs" #>

// Abstract atomic descriptor class with helper functions for descriptors
// that require the whole molecule to calculate the descriptor values,
// which in turn need to be cached for all atoms, so that they can be
// retrieved one by one.
// @cdk.module qsar
// @cdk.githash

using NCDK.QSAR.Results;
using System.Collections.Generic;

namespace NCDK.QSAR.Descriptors.Atomic
{
<#
        var fn = Path.Combine(new FileInfo(this.Host.TemplateFile).Directory.Parent.Parent.FullName, "IAtomicDescriptor");
		using (var reader = new StreamReader(fn))
		{
			string line;
			while ((line = reader.ReadLine()) != null)
			{
				if (line.StartsWith("#", StringComparison.Ordinal))
					continue;
				line = line.Trim();
				if (string.IsNullOrEmpty(line))
					continue;
				var cIndex = line.LastIndexOf(".");
				var className = line.Substring(cIndex + 1);
#>
	public partial class <#=className#>
	{
        private const string PreviousAtomContainer = "previousAtomContainer";
        private IDictionary<object, object> cachedDescriptorValues = null;                   // FIXME: needs a better solution!

        /// <summary>
        /// Returns true if the cached IDescriptorResult's are for the given IAtomContainer.
        /// </summary>
        /// <param name="container"></param>
        /// <returns>false, if the cache is for a different IAtomContainer</returns>
        public bool IsCachedAtomContainer(IAtomContainer container)
        {
            if (cachedDescriptorValues == null) return false;
            return (cachedDescriptorValues[PreviousAtomContainer] == container);
        }

        /// <summary>
        /// Returns the cached DescriptorValue for the given IAtom.
        /// </summary>
        /// <param name="atom">the IAtom for which the DescriptorValue is requested</param>
        /// <returns>null, if no DescriptorValue was cached for the given IAtom</returns>
        public IDescriptorResult GetCachedDescriptorValue(IAtom atom)
        {
            if (cachedDescriptorValues == null) return null;
            return (IDescriptorResult)cachedDescriptorValues[atom];
        }

        /// <summary>
        /// Caches a DescriptorValue for a given IAtom. This method may only
        /// be called after SetNewContainer() is called.
        /// </summary>
        /// <param name="atom">IAtom to cache the value for</param>
        /// <param name="container"></param>
        /// <param name="value">DescriptorValue for the given IAtom</param>
        public void CacheDescriptorValue(IAtom atom, IAtomContainer container, IDescriptorResult value)
        {
            if (cachedDescriptorValues == null)
            {
                cachedDescriptorValues = new Dictionary<object, object>();
                cachedDescriptorValues[PreviousAtomContainer] = container;
            }
            else if (cachedDescriptorValues[PreviousAtomContainer] != container)
            {
                cachedDescriptorValues.Clear();
                cachedDescriptorValues[PreviousAtomContainer] = container;
            }
            cachedDescriptorValues[atom] = value;
        }

		IDescriptorValue IAtomicDescriptor.Calculate(IAtom atom, IAtomContainer container)
            => Calculate(atom, container);
	}
<#
			}
		}
#>
}
