<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension="tt.cs" #>

using System.Collections;
using System.Collections.Generic;
using System.Linq;

<#
	string indent = "        ";
#>

namespace NCDK.Common.Collections
{
    public sealed class EmptyEnumerator<T> : IEnumerator<T>
    {
        public T Current { get { throw new System.InvalidOperationException(); } }
        object IEnumerator.Current { get { throw new System.InvalidOperationException(); } }
        public void Dispose() { }
        public bool MoveNext() => false;
        public void Reset() { }
    }

    public sealed class EmptyEnumerable<T> : IEnumerable<T>
    {
<# 
	var s_EmptyEnumerable = 
		indent + "static EmptyEnumerator<T> enumerator = new EmptyEnumerator<T>();" + Environment.NewLine +
		indent + Environment.NewLine +
		indent + "public IEnumerator<T> GetEnumerator() => enumerator;" + Environment.NewLine +
		indent + "IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();" + Environment.NewLine +
		indent + Environment.NewLine;
#>
<#= s_EmptyEnumerable #>
    }

    public sealed class EmptyCollection<T> : ICollection<T>
    {
<#
	var s_EmptyCollection = 
		indent + "public int Count => 0;" + Environment.NewLine +
		indent + "public bool IsReadOnly => true;" + Environment.NewLine +
		indent + "public void Add(T item) { throw new System.InvalidOperationException(); }" + Environment.NewLine +
		indent + "public void Clear() { }" + Environment.NewLine +
		indent + "public bool Contains(T item) => false;" + Environment.NewLine +
		indent + "public void CopyTo(T[] array, int arrayIndex) { }" + Environment.NewLine +
		indent + "public bool Remove(T item) => false;" + Environment.NewLine +
		indent + Environment.NewLine;
#>
<#= s_EmptyEnumerable #>
<#= s_EmptyCollection #>
	}

    public sealed class EmptySet<T> : ISet<T>
    {
<#
	var s_EmptySet = 
		indent + "internal static EmptySet<T> instance = new EmptySet<T>();" + Environment.NewLine +
		indent + "" + Environment.NewLine +
		indent + "public void ExceptWith(IEnumerable<T> other) { }" + Environment.NewLine +
		indent + "public void IntersectWith(IEnumerable<T> other) { }" + Environment.NewLine +
		indent + "public bool IsProperSubsetOf(IEnumerable<T> other) => true;" + Environment.NewLine +
		indent + "public bool IsProperSupersetOf(IEnumerable<T> other) => false;" + Environment.NewLine +
		indent + "public bool IsSubsetOf(IEnumerable<T> other) => true;" + Environment.NewLine +
		indent + "public bool IsSupersetOf(IEnumerable<T> other) => false;" + Environment.NewLine +
		indent + "public bool Overlaps(IEnumerable<T> other) => false;" + Environment.NewLine +
		indent + "public bool SetEquals(IEnumerable<T> other) => other.Count() == 0;" + Environment.NewLine +
		indent + "public void SymmetricExceptWith(IEnumerable<T> other) { }" + Environment.NewLine +
		indent + "public void UnionWith(IEnumerable<T> other) { throw new System.InvalidOperationException(); }" + Environment.NewLine +
		indent + "bool ISet<T>.Add(T item) { throw new System.InvalidOperationException(); }" + Environment.NewLine +
		indent + Environment.NewLine;
#>
<#= s_EmptyEnumerable #>
<#= s_EmptyCollection #>
<#= s_EmptySet #>
    }
}
