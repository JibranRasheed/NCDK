using Microsoft.VisualStudio.TestTools.UnitTesting;
using NCDK.Silent;
using static NCDK.BondOrder;

namespace NCDK.ForceFields
{
    /// <summary>
    /// This test class is generated from MMFF94hypervalent.mol2 and  MMFF94opti.log available at
    /// http://server.ccl.net/cca/data/MMFF94/.
    /// </summary>
    [TestClass()]
    public abstract class AbstractMmffAtomTypeValidationSuiteTest
    {
        /// <summary>
        /// Generated test for AGLYSL01
        /// </summary>
        // @cdk.inchi InChI=1S/C2H5NO2/c3-1-2(4)5/h1,3H2,(H,4,5)
        [TestMethod()]
        public void TestAGLYSL01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Double);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);

            string[] expected = { "CR", "COO", "HNR", "HNR", "HC", "HC", "HOCO", "NR", "OC=O", "O=CO" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for AMHTAR01
        /// </summary>
        // @cdk.inchi InChI=1S/C4H6O6/c5-1(3(7)8)2(6)4(9)10/h1-2,5-6H,(H,7,8)(H,9,10)/p-1/t1-,2-/m1/s1
        [TestMethod()]
        public void TestAMHTAR01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[14], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Double);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Double);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);

            string[] expected = {"OC=O", "O=CO", "OR", "OR", "O2CM", "O2CM", "COO", "CR", "CR", "CO2M", "HC", "HC", "HOR",
                "HOR", "HOCO"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for AMPTRB10
        /// </summary>
        // @cdk.inchi InChI=1S/C8H10N6/c1-3-4(2)12-7-5(11-3)6(9)13-8(10)14-7/h1-2H3,(H4,9,10,12,13,14)/p+1
        [TestMethod()]
        public void TestAMPTRB10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[14], Single);
            container.AddBond(container.Atoms[0], container.Atoms[13], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[16], Single);
            container.AddBond(container.Atoms[2], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Double);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[24], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);

            string[] expected = {"NPD+", "CB", "NC=N", "NPYD", "CB", "NC=C", "CB", "NPYD", "CB", "CR", "CB", "CR", "NPYD",
                "CB", "HPD+", "HNCN", "HNCN", "HNCC", "HNCC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for ARGIND11
        /// </summary>
        // @cdk.inchi InChI=1S/C6H14N4O2/c7-4(5(11)12)2-1-3-10-6(8)9/h4H,1-3,7H2,(H,11,12)(H4,8,9,10)/t4-/m0/s1
        [TestMethod()]
        public void TestARGIND11()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.AddBond(container.Atoms[0], container.Atoms[25], Single);
            container.AddBond(container.Atoms[0], container.Atoms[24], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[20], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[22], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[23], Single);
            container.AddBond(container.Atoms[5], container.Atoms[22], Double);
            container.AddBond(container.Atoms[5], container.Atoms[21], Single);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[15], container.Atoms[22], Single);
            container.AddBond(container.Atoms[16], container.Atoms[21], Single);
            container.AddBond(container.Atoms[17], container.Atoms[21], Single);
            container.AddBond(container.Atoms[18], container.Atoms[23], Single);
            container.AddBond(container.Atoms[19], container.Atoms[23], Single);

            string[] expected = {"CO2M", "CR", "CR", "CR", "CR", "CGD+", "HNR", "HC", "HNR", "HC", "HC", "HC", "HC", "HC",
                "HC", "HGD+", "HGD+", "HGD+", "HGD+", "HGD+", "NR", "NGD+", "NGD+", "NGD+", "O2CM", "O2CM"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for BAOXLM01
        /// </summary>
        // @cdk.inchi InChI=1S/C2H2O4/c3-1(4)2(5)6/h(H,3,4)(H,5,6)/p-2
        [TestMethod()]
        public void TestBAOXLM01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);

            string[] expected = { "O2CM", "O2CM", "CO2M", "CO2M", "O2CM", "O2CM" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for BBSPRT10
        /// </summary>
        // @cdk.inchi InChI=1S/C9H8BrNO3S2/c10-6-1-3-7(4-2-6)16(13,14)11-8-5-15-9(8)12/h1-4,8,11H,5H2/t8-/m0/s1
        [TestMethod()]
        public void TestBBSPRT10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Br", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[13], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Double);
            container.AddBond(container.Atoms[2], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[22], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[15], container.Atoms[23], Single);

            string[] expected = {"BR", "S", "SO2N", "O=C", "O2S", "O2S", "NSO2", "C=OS", "CR4R", "CR4R", "CB", "CB", "CB",
                "CB", "CB", "CB", "HNSO", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for BEVJER10
        /// </summary>
        // @cdk.inchi InChI=1S/C16N8/c17-1-9(2-18)13-14(10(3-19)4-20)16(12(7-23)8-24)15(13)11(5-21)6-22
        [TestMethod()]
        public void TestBEVJER10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Double);
            container.AddBond(container.Atoms[1], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Triple);
            container.AddBond(container.Atoms[5], container.Atoms[6], Triple);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Triple);
            container.AddBond(container.Atoms[10], container.Atoms[11], Triple);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Double);
            container.AddBond(container.Atoms[13], container.Atoms[15], Double);
            container.AddBond(container.Atoms[14], container.Atoms[16], Single);
            container.AddBond(container.Atoms[14], container.Atoms[17], Single);
            container.AddBond(container.Atoms[15], container.Atoms[18], Single);
            container.AddBond(container.Atoms[15], container.Atoms[19], Single);
            container.AddBond(container.Atoms[16], container.Atoms[20], Triple);
            container.AddBond(container.Atoms[17], container.Atoms[21], Triple);
            container.AddBond(container.Atoms[18], container.Atoms[22], Triple);
            container.AddBond(container.Atoms[19], container.Atoms[23], Triple);

            string[] expected = {"CE4R", "CE4R", "C=C", "CSP", "NSP", "CSP", "NSP", "C=C", "CSP", "NSP", "CSP", "NSP",
                "CE4R", "CE4R", "C=C", "C=C", "CSP", "CSP", "CSP", "CSP", "NSP", "NSP", "NSP", "NSP"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for BEWCUB
        /// </summary>
        // @cdk.inchi InChI=1S/C23H23N3O9S/c1-13(11-34-15(3)28)20-18-10-19(36(33)9-8-24-14(2)27)21(25(18)22(20)29)23(30)35-12-16-4-6-17(7-5-16)26(31)32/h4-9,18H,10-12H2,1-3H3,(H,24,27)/b9-8+,20-13+/t18-,36-/m1/s1
        [TestMethod()]
        public void TestBEWCUB()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[23], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[36], Single);
            container.AddBond(container.Atoms[3], container.Atoms[37], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[38], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[22], Double);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[15], Double);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[39], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[40], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[41], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[42], Single);
            container.AddBond(container.Atoms[14], container.Atoms[43], Single);
            container.AddBond(container.Atoms[14], container.Atoms[44], Single);
            container.AddBond(container.Atoms[16], container.Atoms[45], Single);
            container.AddBond(container.Atoms[16], container.Atoms[46], Single);
            container.AddBond(container.Atoms[16], container.Atoms[47], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Single);
            container.AddBond(container.Atoms[17], container.Atoms[48], Single);
            container.AddBond(container.Atoms[17], container.Atoms[49], Single);
            container.AddBond(container.Atoms[18], container.Atoms[19], Single);
            container.AddBond(container.Atoms[19], container.Atoms[20], Double);
            container.AddBond(container.Atoms[19], container.Atoms[21], Single);
            container.AddBond(container.Atoms[21], container.Atoms[50], Single);
            container.AddBond(container.Atoms[21], container.Atoms[51], Single);
            container.AddBond(container.Atoms[21], container.Atoms[52], Single);
            container.AddBond(container.Atoms[23], container.Atoms[24], Double);
            container.AddBond(container.Atoms[23], container.Atoms[25], Single);
            container.AddBond(container.Atoms[25], container.Atoms[26], Single);
            container.AddBond(container.Atoms[26], container.Atoms[27], Single);
            container.AddBond(container.Atoms[26], container.Atoms[53], Single);
            container.AddBond(container.Atoms[26], container.Atoms[54], Single);
            container.AddBond(container.Atoms[27], container.Atoms[28], Double);
            container.AddBond(container.Atoms[27], container.Atoms[32], Single);
            container.AddBond(container.Atoms[28], container.Atoms[29], Single);
            container.AddBond(container.Atoms[28], container.Atoms[57], Single);
            container.AddBond(container.Atoms[29], container.Atoms[30], Double);
            container.AddBond(container.Atoms[29], container.Atoms[58], Single);
            container.AddBond(container.Atoms[30], container.Atoms[31], Single);
            container.AddBond(container.Atoms[30], container.Atoms[33], Single);
            container.AddBond(container.Atoms[31], container.Atoms[32], Double);
            container.AddBond(container.Atoms[31], container.Atoms[55], Single);
            container.AddBond(container.Atoms[32], container.Atoms[56], Single);
            container.AddBond(container.Atoms[33], container.Atoms[34], Single);
            container.AddBond(container.Atoms[33], container.Atoms[35], Double);

            string[] expected = {"NC=O", "C=C", "C=C", "CR", "CR4R", "CE4R", "C=ON", "C=C", "S=O", "C=C", "C=C", "NC=O",
                "C=ON", "O=CN", "CR", "O=S", "CR", "CR", "OC=O", "COO", "O=CO", "CR", "O=CN", "COO", "O=CO", "OC=O",
                "CR", "CB", "CB", "CB", "CB", "CB", "CB", "NO2", "O2N", "O2N", "HC", "HC", "HC", "HC", "HC", "HNCO",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for BEWKUJ04
        /// </summary>
        // @cdk.inchi InChI=1S/C11H10N3O2S/c12-9-4-6-10(7-5-9)17(15,16)14-11-3-1-2-8-13-11/h1-8H,12H2/q-1/p+1
        [TestMethod()]
        public void TestBEWKUJ04()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", -1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[22], Single);
            container.AddBond(container.Atoms[4], container.Atoms[21], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[27], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Double);
            container.AddBond(container.Atoms[6], container.Atoms[11], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[14], container.Atoms[26], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[15], container.Atoms[25], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Double);
            container.AddBond(container.Atoms[16], container.Atoms[24], Single);

            string[] expected = {"SO2N", "O2S", "O2S", "NM", "NC=C", "NPD+", "CB", "CB", "CB", "CB", "CB", "CB", "CB",
                "CB", "CB", "CB", "CB", "HC", "HC", "HC", "HC", "HNCC", "HNCC", "HC", "HC", "HC", "HC", "HPD+"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for BIHKEI01
        /// </summary>
        // @cdk.inchi InChI=1S/C8H9NO3/c1-4-7(10)6-5(2-9-4)3-12-8(6)11/h2,8,10-11H,3H2,1H3/t8-/m1/s1
        [TestMethod()]
        public void TestBIHKEI01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[11], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);

            string[] expected = {"OM2", "OR", "OR", "NPD+", "CB", "CB", "CR", "CB", "CB", "CR", "CR", "CB", "HOR", "HPD+",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for BIPDEJ02
        /// </summary>
        // @cdk.inchi InChI=1S/C8H9FN2O3/c9-5-4-11(6-2-1-3-14-6)8(13)10-7(5)12/h4,6H,1-3H2,(H,10,12,13)/t6-/m0/s1
        [TestMethod()]
        public void TestBIPDEJ02()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);

            string[] expected = {"NC=O", "CONN", "O=CN", "NC=O", "C=ON", "O=CN", "C=C", "F", "C=C", "CR", "CR", "CR", "CR",
                "OR", "HNCO", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for BIPJUF10
        /// </summary>
        // @cdk.inchi InChI=1S/C7H4N2O6/c10-7(11)5-2-1-4(8(12)13)3-6(5)9(14)15/h1-3H,(H,10,11)
        [TestMethod()]
        public void TestBIPJUF10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[16], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Double);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Double);

            string[] expected = {"CB", "CB", "CB", "CB", "CB", "CB", "COO", "OC=O", "O=CO", "NO2", "O2N", "O2N", "NO2",
                "O2N", "O2N", "HOCO", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for BIPYCL01
        /// </summary>
        // @cdk.inchi InChI=1S/C10H8N2/c1-3-7-11-9(5-1)10-6-2-4-8-12-10/h1-8H/p+2
        [TestMethod()]
        public void TestBIPYCL01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);

            string[] expected = {"NPD+", "CB", "CB", "CB", "CB", "CB", "NPD+", "CB", "CB", "CB", "CB", "CB", "HPD+", "HC",
                "HC", "HC", "HC", "HPD+", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for BITNAT10
        /// </summary>
        // @cdk.inchi InChI=1S/C12H11N3S/c1-8-7-9(2)15(14-8)12-13-10-5-3-4-6-11(10)16-12/h3-7H,1-2H3
        [TestMethod()]
        public void TestBITNAT10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[16], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[17], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[18], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[19], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[14], container.Atoms[23], Single);
            container.AddBond(container.Atoms[14], container.Atoms[22], Single);
            container.AddBond(container.Atoms[14], container.Atoms[21], Single);
            container.AddBond(container.Atoms[15], container.Atoms[26], Single);
            container.AddBond(container.Atoms[15], container.Atoms[25], Single);
            container.AddBond(container.Atoms[15], container.Atoms[24], Single);

            string[] expected = {"C5A", "CB", "CB", "CB", "CB", "C5B", "N5B", "C5A", "STHI", "NPYL", "C5A", "C5B", "C5B",
                "N5A", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for BIYBIU10
        /// </summary>
        // @cdk.inchi InChI=1S/C12H9NS/c1-3-7-11-9(5-1)13-10-6-2-4-8-12(10)14-11/h1-8,13H
        [TestMethod()]
        public void TestBIYBIU10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[12], container.Atoms[11], Single);
            container.AddBond(container.Atoms[12], container.Atoms[9], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[13], container.Atoms[10], Single);
            container.AddBond(container.Atoms[13], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[14], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[21], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);

            string[] expected = {"CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "NC=C", "S", "CB", "CB", "HC",
                "HC", "HC", "HC", "HC", "HC", "HNCC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for BODKOU
        /// </summary>
        // @cdk.inchi InChI=1S/C6H8N4O2S.C4H8N2S2/c1-12-10-4(5(7)11)3-2-13-6(8)9-3;1-3-5-6-4(7-2)8-3/h2H,1H3,(H2,7,11)(H2,8,9);3,5H,1-2H3/b10-4-;/t;3-/m.1/s1
        [TestMethod()]
        public void TestBODKOU()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[21], container.Atoms[28], Single);
            container.AddBond(container.Atoms[21], container.Atoms[27], Single);
            container.AddBond(container.Atoms[21], container.Atoms[22], Single);
            container.AddBond(container.Atoms[22], container.Atoms[24], Single);
            container.AddBond(container.Atoms[22], container.Atoms[23], Double);
            container.AddBond(container.Atoms[24], container.Atoms[35], Single);
            container.AddBond(container.Atoms[24], container.Atoms[25], Double);
            container.AddBond(container.Atoms[25], container.Atoms[26], Single);
            container.AddBond(container.Atoms[26], container.Atoms[34], Single);
            container.AddBond(container.Atoms[34], container.Atoms[31], Single);
            container.AddBond(container.Atoms[34], container.Atoms[30], Single);
            container.AddBond(container.Atoms[34], container.Atoms[29], Single);
            container.AddBond(container.Atoms[35], container.Atoms[19], Double);
            container.AddBond(container.Atoms[35], container.Atoms[16], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Double);
            container.AddBond(container.Atoms[17], container.Atoms[20], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Single);
            container.AddBond(container.Atoms[18], container.Atoms[19], Single);
            container.AddBond(container.Atoms[19], container.Atoms[36], Single);
            container.AddBond(container.Atoms[20], container.Atoms[33], Single);
            container.AddBond(container.Atoms[20], container.Atoms[32], Single);

            string[] expected = {"CR", "S", "C=N", "S", "CR", "NR", "N=C", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HNR", "N5B", "C5A", "STHI", "C5A", "NC=N", "NC=O", "C=ON", "O=CN", "C=N", "N=C", "OR", "HNCO", "HNCO",
                "HC", "HC", "HC", "HNCN", "HNCN", "CR", "C5B", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for BSALAP01
        /// </summary>
        // @cdk.inchi InChI=1S/C12H9BrN2O/c13-10-4-5-11(16)9(7-10)8-15-12-3-1-2-6-14-12/h1-8,16H/b15-8+
        [TestMethod()]
        public void TestBSALAP01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Br", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[16], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Double);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Double);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[14], container.Atoms[23], Single);
            container.AddBond(container.Atoms[15], container.Atoms[24], Single);

            string[] expected = {"BR", "OC=C", "N=C", "NPYD", "CB", "CB", "CB", "CB", "CB", "CB", "C=N", "CB", "CB", "CB",
                "CB", "CB", "HOCC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for BUPSLB10
        /// </summary>
        // @cdk.inchi InChI=1S/C10H24P2S2/c1-9(2,3)11(7,13)12(8,14)10(4,5)6/h1-8H3/t11-,12+
        [TestMethod()]
        public void TestBUPSLB10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[19], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[19], container.Atoms[20], Double);
            container.AddBond(container.Atoms[19], container.Atoms[21], Single);
            container.AddBond(container.Atoms[19], container.Atoms[22], Single);
            container.AddBond(container.Atoms[21], container.Atoms[23], Single);
            container.AddBond(container.Atoms[21], container.Atoms[24], Single);
            container.AddBond(container.Atoms[21], container.Atoms[25], Single);
            container.AddBond(container.Atoms[22], container.Atoms[26], Single);
            container.AddBond(container.Atoms[22], container.Atoms[27], Single);
            container.AddBond(container.Atoms[22], container.Atoms[28], Single);
            container.AddBond(container.Atoms[23], container.Atoms[29], Single);
            container.AddBond(container.Atoms[23], container.Atoms[30], Single);
            container.AddBond(container.Atoms[23], container.Atoms[31], Single);
            container.AddBond(container.Atoms[24], container.Atoms[32], Single);
            container.AddBond(container.Atoms[24], container.Atoms[33], Single);
            container.AddBond(container.Atoms[24], container.Atoms[34], Single);
            container.AddBond(container.Atoms[25], container.Atoms[35], Single);
            container.AddBond(container.Atoms[25], container.Atoms[36], Single);
            container.AddBond(container.Atoms[25], container.Atoms[37], Single);

            string[] expected = {"PTET", "S-P", "CR", "CR", "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "PTET", "S-P", "CR", "CR", "CR", "CR", "CR", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for BUPSLD10
        /// </summary>
        // @cdk.inchi InChI=1S/C10H24P2S3/c1-9(2,3)11(7,13)15-12(8,14)10(4,5)6/h1-8H3/t11-,12-/m0/s1
        [TestMethod()]
        public void TestBUPSLD10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Double);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[8], container.Atoms[22], Single);
            container.AddBond(container.Atoms[8], container.Atoms[23], Single);
            container.AddBond(container.Atoms[9], container.Atoms[24], Single);
            container.AddBond(container.Atoms[9], container.Atoms[25], Single);
            container.AddBond(container.Atoms[9], container.Atoms[26], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[27], Single);
            container.AddBond(container.Atoms[11], container.Atoms[28], Single);
            container.AddBond(container.Atoms[11], container.Atoms[29], Single);
            container.AddBond(container.Atoms[12], container.Atoms[30], Single);
            container.AddBond(container.Atoms[12], container.Atoms[31], Single);
            container.AddBond(container.Atoms[12], container.Atoms[32], Single);
            container.AddBond(container.Atoms[13], container.Atoms[33], Single);
            container.AddBond(container.Atoms[13], container.Atoms[34], Single);
            container.AddBond(container.Atoms[13], container.Atoms[35], Single);
            container.AddBond(container.Atoms[14], container.Atoms[36], Single);
            container.AddBond(container.Atoms[14], container.Atoms[37], Single);
            container.AddBond(container.Atoms[14], container.Atoms[38], Single);

            string[] expected = {"PTET", "PTET", "S-P", "S-P", "S", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "CR",
                "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for BUYTIY10
        /// </summary>
        // @cdk.inchi InChI=1S/C11H12N4O4/c12-3-6-4-15(14-2-1-13-10(6)14)11-9(18)8(17)7(5-16)19-11/h1-2,4,7-9,11,16-18H,5H2/t7-,8-,9-,11-/m1/s1
        [TestMethod()]
        public void TestBUYTIY10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[19], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[20], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[21], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Triple);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Single);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);
            container.AddBond(container.Atoms[14], container.Atoms[26], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[18], Single);
            container.AddBond(container.Atoms[15], container.Atoms[27], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[16], container.Atoms[28], Single);
            container.AddBond(container.Atoms[16], container.Atoms[29], Single);
            container.AddBond(container.Atoms[17], container.Atoms[30], Single);

            string[] expected = {"N5B", "C5B", "C5A", "NPYL", "NC=C", "C=C", "C=C", "C5A", "CSP", "NSP", "CR", "CR", "OR",
                "CR", "OR", "CR", "CR", "OR", "OR", "HC", "HC", "HC", "HC", "HC", "HOR", "HC", "HOR", "HC", "HC", "HC",
                "HOR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for BUYTOE10
        /// </summary>
        // @cdk.inchi InChI=1S/C11H12N4O4/c12-3-6-4-13-15-2-1-14(10(6)15)11-9(18)8(17)7(5-16)19-11/h1-2,4,7-9,11,16-18H,5H2/t7-,8-,9-,11-/m1/s1
        [TestMethod()]
        public void TestBUYTOE10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[19], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[20], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[21], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[8], container.Atoms[9], Triple);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[26], Single);
            container.AddBond(container.Atoms[15], container.Atoms[27], Single);
            container.AddBond(container.Atoms[15], container.Atoms[18], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[16], container.Atoms[29], Single);
            container.AddBond(container.Atoms[16], container.Atoms[28], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[17], container.Atoms[30], Single);

            string[] expected = {"NC=C", "C=C", "C=C", "NPYL", "N5A", "C5B", "C5B", "C5A", "CSP", "NSP", "CR", "CR", "OR",
                "CR", "OR", "CR", "CR", "OR", "OR", "HC", "HC", "HC", "HC", "HC", "HOR", "HC", "HOR", "HC", "HC", "HC",
                "HOR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for BUYXEY10
        /// </summary>
        // @cdk.inchi InChI=1S/C11H20N2O4S/c1-7(2)9(11(16)17)13-10(15)8(12-6-14)4-5-18-3/h6-9H,4-5H2,1-3H3,(H,12,14)(H,13,15)(H,16,17)/t8-,9-/m0/s1
        [TestMethod()]
        public void TestBUYXEY10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[20], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[24], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[25], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[28], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[29], Single);
            container.AddBond(container.Atoms[7], container.Atoms[32], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[30], Single);
            container.AddBond(container.Atoms[9], container.Atoms[34], Single);
            container.AddBond(container.Atoms[9], container.Atoms[35], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[27], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[26], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[12], container.Atoms[19], Single);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[13], container.Atoms[33], Single);
            container.AddBond(container.Atoms[14], container.Atoms[31], Single);
            container.AddBond(container.Atoms[14], container.Atoms[36], Single);
            container.AddBond(container.Atoms[14], container.Atoms[37], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[17], Double);
            container.AddBond(container.Atoms[16], container.Atoms[21], Single);

            string[] expected = {"O=CN", "C=ON", "NC=O", "CR", "C=ON", "O=CN", "CR", "CR", "S", "CR", "NC=O", "CR", "CR",
                "CR", "CR", "COO", "OC=O", "O=CO", "HC", "HC", "HC", "HOCO", "HC", "HC", "HNCO", "HC", "HC", "HNCO",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for BYITOT02
        /// </summary>
        // @cdk.inchi InChI=1S/C11H12N2O2S/c1-13-7-8-15-16-11(13)12-10(14)9-5-3-2-4-6-9/h2-6H,7-8H2,1H3/b12-11-
        [TestMethod()]
        public void TestBYITOT02()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);
            container.AddBond(container.Atoms[15], container.Atoms[25], Single);
            container.AddBond(container.Atoms[15], container.Atoms[26], Single);
            container.AddBond(container.Atoms[15], container.Atoms[27], Single);

            string[] expected = {"-OS", "S", "C=N", "NC=N", "CR", "CR", "N=C", "C=ON", "O=CN", "CB", "CB", "CB", "CB",
                "CB", "CB", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CABWEH10
        /// </summary>
        // @cdk.inchi InChI=1S/C10H10O2S/c11-13(12)7-6-10(8-13)9-4-2-1-3-5-9/h1-6H,7-8H2
        [TestMethod()]
        public void TestCABWEH10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[22], Single);
            container.AddBond(container.Atoms[1], container.Atoms[12], Double);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);

            string[] expected = {"SO2", "CB", "O2S", "O2S", "CR", "C=C", "C=C", "CR", "CB", "CB", "CB", "CB", "CB", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CAFORM07
        /// </summary>
        // @cdk.inchi InChI=1S/CH2O2/c2-1-3/h1H,(H,2,3)/p-1
        [TestMethod()]
        public void TestCAFORM07()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);

            string[] expected = { "CO2M", "O2CM", "O2CM", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CAGREH10
        /// </summary>
        // @cdk.inchi InChI=1S/C7H5NO6S2/c9-15(10)8-7(13-16(11,12)14-15)6-4-2-1-3-5-6/h1-5H
        [TestMethod()]
        public void TestCAGREH10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Double);
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Double);
            container.AddBond(container.Atoms[1], container.Atoms[7], Double);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[18], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[14], container.Atoms[19], Single);
            container.AddBond(container.Atoms[15], container.Atoms[20], Single);

            string[] expected = {"SO4", "SO3", "OSO3", "OSO3", "O2S", "O2S", "O2S", "O2S", "N=C", "C=N", "CB", "CB", "CB",
                "CB", "CB", "CB", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CALXES20
        /// </summary>
        // @cdk.inchi InChI=1S/C7H13N3O4/c1-4(8)7(14)10-2-5(11)9-3-6(12)13/h4H,2-3,8H2,1H3,(H,9,11)(H,10,14)(H,12,13)/t4-/m0/s1
        [TestMethod()]
        public void TestCALXES20()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[14], Single);
            container.AddBond(container.Atoms[0], container.Atoms[15], Single);
            container.AddBond(container.Atoms[0], container.Atoms[16], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[20], Single);
            container.AddBond(container.Atoms[2], container.Atoms[17], Single);
            container.AddBond(container.Atoms[2], container.Atoms[18], Single);
            container.AddBond(container.Atoms[2], container.Atoms[19], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[21], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[22], Single);
            container.AddBond(container.Atoms[6], container.Atoms[23], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[24], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[25], Single);
            container.AddBond(container.Atoms[10], container.Atoms[26], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);

            string[] expected = {"NR+", "CR", "CR", "C=ON", "O=CN", "NC=O", "CR", "C=ON", "O=CN", "NC=O", "CR", "CO2M",
                "O2CM", "O2CM", "HNR+", "HNR+", "HNR+", "HC", "HC", "HC", "HC", "HNCO", "HC", "HC", "HNCO", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CAMALD03
        /// </summary>
        // @cdk.inchi InChI=1S/C3H4O4/c4-2(5)1-3(6)7/h1H2,(H,4,5)(H,6,7)/p-2
        [TestMethod()]
        public void TestCAMALD03()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Double);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);

            string[] expected = { "CO2M", "CR", "CO2M", "O2CM", "O2CM", "O2CM", "O2CM", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CEFMEN
        /// </summary>
        // @cdk.inchi InChI=1S/C16H17N9O5S3/c1-24-16(20-22-23-24)33-4-6-3-31-13-9(12(27)25(13)10(6)14(28)29)19-11(26)8(21-30-2)7-5-32-15(17)18-7/h5,9,13H,3-4H2,1-2H3,(H2,17,18)(H,19,26)(H,28,29)/b21-8-/t9-,13-/m1/s1
        [TestMethod()]
        public void TestCEFMEN()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[17], Single);
            container.AddBond(container.Atoms[0], container.Atoms[20], Single);
            container.AddBond(container.Atoms[1], container.Atoms[28], Single);
            container.AddBond(container.Atoms[1], container.Atoms[29], Single);
            container.AddBond(container.Atoms[2], container.Atoms[30], Single);
            container.AddBond(container.Atoms[2], container.Atoms[31], Single);
            container.AddBond(container.Atoms[3], container.Atoms[22], Double);
            container.AddBond(container.Atoms[4], container.Atoms[23], Double);
            container.AddBond(container.Atoms[5], container.Atoms[23], Single);
            container.AddBond(container.Atoms[5], container.Atoms[35], Single);
            container.AddBond(container.Atoms[6], container.Atoms[24], Double);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[26], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[22], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[24], Single);
            container.AddBond(container.Atoms[9], container.Atoms[38], Single);
            container.AddBond(container.Atoms[10], container.Atoms[25], Double);
            container.AddBond(container.Atoms[11], container.Atoms[27], Single);
            container.AddBond(container.Atoms[11], container.Atoms[29], Double);
            container.AddBond(container.Atoms[12], container.Atoms[29], Single);
            container.AddBond(container.Atoms[12], container.Atoms[41], Single);
            container.AddBond(container.Atoms[12], container.Atoms[42], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[31], Single);
            container.AddBond(container.Atoms[13], container.Atoms[32], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[16], container.Atoms[31], Double);
            container.AddBond(container.Atoms[17], container.Atoms[18], Single);
            container.AddBond(container.Atoms[17], container.Atoms[33], Single);
            container.AddBond(container.Atoms[17], container.Atoms[34], Single);
            container.AddBond(container.Atoms[18], container.Atoms[19], Double);
            container.AddBond(container.Atoms[18], container.Atoms[30], Single);
            container.AddBond(container.Atoms[19], container.Atoms[23], Single);
            container.AddBond(container.Atoms[20], container.Atoms[21], Single);
            container.AddBond(container.Atoms[20], container.Atoms[36], Single);
            container.AddBond(container.Atoms[21], container.Atoms[22], Single);
            container.AddBond(container.Atoms[21], container.Atoms[37], Single);
            container.AddBond(container.Atoms[24], container.Atoms[25], Single);
            container.AddBond(container.Atoms[25], container.Atoms[27], Single);
            container.AddBond(container.Atoms[26], container.Atoms[39], Single);
            container.AddBond(container.Atoms[26], container.Atoms[45], Single);
            container.AddBond(container.Atoms[26], container.Atoms[46], Single);
            container.AddBond(container.Atoms[27], container.Atoms[28], Double);
            container.AddBond(container.Atoms[28], container.Atoms[40], Single);
            container.AddBond(container.Atoms[30], container.Atoms[43], Single);
            container.AddBond(container.Atoms[30], container.Atoms[44], Single);
            container.AddBond(container.Atoms[32], container.Atoms[47], Single);
            container.AddBond(container.Atoms[32], container.Atoms[48], Single);
            container.AddBond(container.Atoms[32], container.Atoms[49], Single);

            string[] expected = {"S", "STHI", "S", "O=CN", "O=CO", "OC=O", "O=CN", "OR", "NC=O", "NC=O", "N=C", "N5B",
                "NC=N", "NPYL", "N5A", "N5B", "N5B", "CR", "C=C", "C=C", "CR4R", "CR4R", "C=ON", "COO", "C=ON", "C=N",
                "CR", "C5B", "C5A", "C5A", "CR", "C5A", "CR", "HC", "HC", "HOCO", "HC", "HC", "HNCO", "HC", "HC",
                "HNCN", "HNCN", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CETROI01
        /// </summary>
        // @cdk.inchi InChI=1S/C10H15NO5S/c1-4-6(2-11)17-10-9(15-4)8(14)7(13)5(3-12)16-10/h4-10,12-14H,3H2,1H3/t4-,5+,6+,7+,8-,9+,10-/m0/s1
        [TestMethod()]
        public void TestCETROI01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[17], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[2], container.Atoms[18], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[20], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[21], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[22], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[23], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Triple);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[12], container.Atoms[26], Single);
            container.AddBond(container.Atoms[13], container.Atoms[29], Single);
            container.AddBond(container.Atoms[14], container.Atoms[30], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[27], Single);
            container.AddBond(container.Atoms[15], container.Atoms[28], Single);
            container.AddBond(container.Atoms[16], container.Atoms[31], Single);

            string[] expected = {"S", "CR", "CR", "OR", "CR", "CR", "CR", "CR", "OR", "CR", "CSP", "NSP", "CR", "OR", "OR",
                "CR", "OR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HOR", "HOR", "HOR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CEWCUC10
        /// </summary>
        // @cdk.inchi InChI=1S/C18H15OP/c19-20(16-10-4-1-5-11-16,17-12-6-2-7-13-17)18-14-8-3-9-15-18/h1-15H
        [TestMethod()]
        public void TestCEWCUC10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[14], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[20], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[21], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[22], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[23], Single);
            container.AddBond(container.Atoms[7], container.Atoms[24], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[25], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[26], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[27], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[28], Single);
            container.AddBond(container.Atoms[13], container.Atoms[29], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[14], container.Atoms[19], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[30], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Double);
            container.AddBond(container.Atoms[16], container.Atoms[31], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Single);
            container.AddBond(container.Atoms[17], container.Atoms[32], Single);
            container.AddBond(container.Atoms[18], container.Atoms[19], Double);
            container.AddBond(container.Atoms[18], container.Atoms[33], Single);
            container.AddBond(container.Atoms[19], container.Atoms[34], Single);

            string[] expected = {"PO", "OP", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB",
                "CB", "CB", "CB", "CB", "CB", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CEWVIJ10
        /// </summary>
        // @cdk.inchi InChI=1S/C10H14N4O2/c1-6(2)4-14-8-7(11-5-12-8)9(15)13(3)10(14)16/h5-6H,4H2,1-3H3,(H,11,12)
        [TestMethod()]
        public void TestCEWVIJ10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Double);
            container.AddBond(container.Atoms[1], container.Atoms[9], Double);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Single);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[25], Single);
            container.AddBond(container.Atoms[14], container.Atoms[26], Single);
            container.AddBond(container.Atoms[15], container.Atoms[27], Single);
            container.AddBond(container.Atoms[15], container.Atoms[28], Single);
            container.AddBond(container.Atoms[15], container.Atoms[29], Single);

            string[] expected = {"O=CN", "O=CN", "NC=O", "NC=O", "NPYL", "N5B", "CONN", "C5B", "C5A", "C=ON", "C5A", "CR",
                "CR", "CR", "CR", "CR", "HPYL", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CEWYIM30
        /// </summary>
        // @cdk.inchi InChI=1S/C12H8O2/c13-9-5-1-3-7-8-4-2-6-10(14)12(8)11(7)9/h1-6,13-14H
        [TestMethod()]
        public void TestCEWYIM30()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[14], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[15], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);

            string[] expected = {"OC=C", "OC=C", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB",
                "HOCC", "HOCC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CIHWUL10
        /// </summary>
        // @cdk.inchi InChI=1S/C6H8O3/c1-3(7-1)5-6(9-5)4-2-8-4/h3-6H,1-2H2/t3-,4-,5+,6+/m1/s1
        [TestMethod()]
        public void TestCIHWUL10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);

            string[] expected = {"OR", "OR", "OR", "CR3R", "CR3R", "CR3R", "CR3R", "CR3R", "CR3R", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CIJXOI10
        /// </summary>
        // @cdk.inchi InChI=1S/C9H13NO/c1-5-3-7-4-8(11)9(5)6(2)10-7/h5,7,9H,3-4H2,1-2H3/p+1/t5-,7-,9-/m0/s1
        [TestMethod()]
        public void TestCIJXOI10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[14], Single);
            container.AddBond(container.Atoms[1], container.Atoms[13], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[15], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[16], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Double);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[21], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[24], Single);
            container.AddBond(container.Atoms[8], container.Atoms[23], Single);
            container.AddBond(container.Atoms[8], container.Atoms[22], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);

            string[] expected = {"CR", "CR", "CR", "CR", "C=N", "C=OR", "CR", "CR", "CR", "N+=C", "O=CR", "HNC+", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CIKSEU10
        /// </summary>
        // @cdk.inchi InChI=1S/C10H5N5/c11-4-7-5-12-8-2-1-3-9-13-6-14-10(7)15(8)9/h1-3,5-6H
        [TestMethod()]
        public void TestCIKSEU10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[19], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Triple);

            string[] expected = {"N=C", "C=N", "N=C", "C=N", "C=C", "C=C", "N=C", "C=N", "C=C", "C=C", "C=C", "C=C",
                "NC=N", "CSP", "NSP", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CILBII
        /// </summary>
        // @cdk.inchi InChI=1S/C7H10N4O14/c1-20-7-6(25-11(18)19)5(24-10(16)17)4(23-9(14)15)3(22-7)2-21-8(12)13/h3-7H,2H2,1H3/t3-,4-,5+,6-,7-/m1/s1
        [TestMethod()]
        public void TestCILBII()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[17], Single);
            container.AddBond(container.Atoms[0], container.Atoms[25], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[26], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[27], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[28], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[29], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[30], Single);
            container.AddBond(container.Atoms[5], container.Atoms[31], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[32], Single);
            container.AddBond(container.Atoms[6], container.Atoms[33], Single);
            container.AddBond(container.Atoms[6], container.Atoms[34], Single);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Double);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[22], Double);
            container.AddBond(container.Atoms[14], container.Atoms[23], Single);
            container.AddBond(container.Atoms[15], container.Atoms[23], Single);
            container.AddBond(container.Atoms[16], container.Atoms[23], Double);
            container.AddBond(container.Atoms[18], container.Atoms[24], Single);
            container.AddBond(container.Atoms[19], container.Atoms[24], Single);
            container.AddBond(container.Atoms[20], container.Atoms[24], Double);

            string[] expected = {"CR", "CR", "CR", "CR", "CR", "CR", "CR", "OR", "ONO2", "O2NO", "O2NO", "ONO2", "O2NO",
                "O2NO", "ONO2", "O2NO", "O2NO", "OR", "ONO2", "O2NO", "O2NO", "NO3", "NO3", "NO3", "NO3", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CILDOQ
        /// </summary>
        // @cdk.inchi InChI=1S/C6H9N3O4S/c7-6(14)9-8-3(5(12)13)1-2-4(10)11/h1-2H2,(H,10,11)(H,12,13)(H3,7,9,14)/b8-3+
        [TestMethod()]
        public void TestCILDOQ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[8], Double);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[17], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Double);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[22], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);

            string[] expected = {"S=C", "OC=O", "O=CO", "OC=O", "O=CO", "NC=S", "N=C", "NC=S", "C=SN", "C=N", "COO", "CR",
                "CR", "COO", "HNCS", "HNCS", "HNCS", "HOCO", "HC", "HC", "HC", "HC", "HOCO"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CILWUP11
        /// </summary>
        // @cdk.inchi InChI=1S/C3H3N3/c1-2-4-6-5-3-1/h1-3H
        [TestMethod()]
        public void TestCILWUP11()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Double);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);

            string[] expected = { "NPYD", "NPYD", "NPYD", "CB", "CB", "CB", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CIMRUL10
        /// </summary>
        // @cdk.inchi InChI=1S/C12H12ClNO3/c1-17-11(16)12(7-9(12)13)14-10(15)8-5-3-2-4-6-8/h2-6,9H,7H2,1H3,(H,14,15)/t9-,12-/m0/s1
        [TestMethod()]
        public void TestCIMRUL10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Double);
            container.AddBond(container.Atoms[2], container.Atoms[15], Double);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[20], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[13], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[25], Single);
            container.AddBond(container.Atoms[16], container.Atoms[26], Single);
            container.AddBond(container.Atoms[16], container.Atoms[27], Single);
            container.AddBond(container.Atoms[16], container.Atoms[28], Single);

            string[] expected = {"CL", "O=CN", "O=CO", "OC=O", "NC=O", "CR3R", "CR3R", "CR3R", "C=ON", "CB", "CB", "CB",
                "CB", "CB", "CB", "COO", "CR", "HC", "HC", "HC", "HNCO", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CINVIE
        /// </summary>
        // @cdk.inchi InChI=1S/C10H11N3O8/c1-9(15)7(14)6(11(16)17)4-10(13(20)21,5-2-3-5)8(9)12(18)19/h4-5,8,15H,2-3H2,1H3/t8-,9-,10-/m1/s1
        [TestMethod()]
        public void TestCINVIE()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[11], Double);
            container.AddBond(container.Atoms[1], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[21], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Double);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Double);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Double);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[17], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Double);
            container.AddBond(container.Atoms[15], container.Atoms[23], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Single);
            container.AddBond(container.Atoms[17], container.Atoms[19], Single);
            container.AddBond(container.Atoms[17], container.Atoms[24], Single);
            container.AddBond(container.Atoms[18], container.Atoms[19], Single);
            container.AddBond(container.Atoms[18], container.Atoms[25], Single);
            container.AddBond(container.Atoms[18], container.Atoms[26], Single);
            container.AddBond(container.Atoms[19], container.Atoms[27], Single);
            container.AddBond(container.Atoms[19], container.Atoms[28], Single);
            container.AddBond(container.Atoms[20], container.Atoms[29], Single);
            container.AddBond(container.Atoms[20], container.Atoms[30], Single);
            container.AddBond(container.Atoms[20], container.Atoms[31], Single);

            string[] expected = {"O=CR", "OR", "O2N", "O2N", "O2N", "O2N", "O2N", "O2N", "NO2", "NO2", "NO2", "C=OR", "CR",
                "CR", "CR", "C=C", "C=C", "CR3R", "CR3R", "CR3R", "CR", "HOR", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CIPVOM
        /// </summary>
        // @cdk.inchi InChI=1S/C8H11N5O2/c1-4-15-8(14)6-5(2)10-13-7(6)9-11-12(13)3/h4H2,1-3H3
        [TestMethod()]
        public void TestCIPVOM()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[21], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[25], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[23], Single);

            string[] expected = {"N=N", "N=N", "NN=N", "NPYL", "N5A", "C5B", "C5B", "C5A", "CR", "CR", "O=CO", "COO",
                "OC=O", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CIPYAB10
        /// </summary>
        // @cdk.inchi InChI=1S/C12N6/c13-1-7(2-14)10-11(8(3-15)4-16)12(10)9(5-17)6-18
        [TestMethod()]
        public void TestCIPYAB10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Double);
            container.AddBond(container.Atoms[2], container.Atoms[5], Double);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Triple);
            container.AddBond(container.Atoms[7], container.Atoms[13], Triple);
            container.AddBond(container.Atoms[8], container.Atoms[14], Triple);
            container.AddBond(container.Atoms[9], container.Atoms[15], Triple);
            container.AddBond(container.Atoms[10], container.Atoms[16], Triple);
            container.AddBond(container.Atoms[11], container.Atoms[17], Triple);

            string[] expected = {"C=C", "C=C", "C=C", "C=C", "C=C", "C=C", "CSP", "CSP", "CSP", "CSP", "CSP", "CSP", "NSP",
                "NSP", "NSP", "NSP", "NSP", "NSP"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CISMOG
        /// </summary>
        // @cdk.inchi InChI=1S/C6H2N4S2/c1-2-4-6(10-12-8-4)5-3(1)7-11-9-5/h1-2H
        /// </summary>
        [TestMethod()]
        public void TestCISMOG()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[9], Double);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);
            container.AddBond(container.Atoms[9], container.Atoms[12], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);

            string[] expected = {"STHI", "N5A", "N5A", "C5B", "C5B", "CB", "HC", "C5B", "CB", "N5A", "C5B", "HC", "STHI",
                "N5A"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CISPOJ
        /// </summary>
        // @cdk.inchi InChI=1S/C8H4N8O4/c17-15(18)4-1-6-5(7(2-4)16(19)20)3-9-14(6)8-10-12-13-11-8/h1-3H,(H,10,11,12,13)
        [TestMethod()]
        public void TestCISPOJ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[20], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[12], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[21], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Double);
            container.AddBond(container.Atoms[6], container.Atoms[22], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[14], container.Atoms[16], Single);
            container.AddBond(container.Atoms[14], container.Atoms[17], Double);
            container.AddBond(container.Atoms[15], container.Atoms[18], Single);
            container.AddBond(container.Atoms[15], container.Atoms[19], Double);

            string[] expected = {"CB", "C5A", "C5B", "CB", "CB", "CB", "C5B", "C5A", "N5B", "N5B", "N5A", "NPYL", "NPYL",
                "N5A", "NO2", "NO2", "O2N", "O2N", "O2N", "O2N", "HC", "HC", "HC", "HPYL"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CITDIS
        /// </summary>
        // @cdk.inchi InChI=1S/C8H5Cl3O2/c1-4(12)13-8-6(10)3-2-5(9)7(8)11/h2-3H,1H3
        [TestMethod()]
        public void TestCITDIS()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[16], Single);
            container.AddBond(container.Atoms[14], container.Atoms[17], Single);

            string[] expected = {"CB", "CB", "CL", "CB", "CL", "CB", "HC", "CB", "HC", "CB", "CL", "OC=O", "COO", "O=CO",
                "CR", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CITNOI10
        /// </summary>
        // @cdk.inchi InChI=1S/C11H13NO2S/c1-2-15-10(13)8-12-11(14)9-6-4-3-5-7-9/h3-7H,2,8H2,1H3,(H,12,14)
        [TestMethod()]
        public void TestCITNOI10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Double);
            container.AddBond(container.Atoms[2], container.Atoms[8], Double);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[20], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[21], Single);
            container.AddBond(container.Atoms[7], container.Atoms[22], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[24], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);
            container.AddBond(container.Atoms[14], container.Atoms[27], Single);

            string[] expected = {"S", "O=C", "O=CN", "NC=O", "CR", "CR", "C=OS", "CR", "C=ON", "CB", "CB", "CB", "CB",
                "CB", "CB", "HNCO", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CITPEA10
        /// </summary>
        // @cdk.inchi InChI=1S/C12H15NOS2/c1-3-16-12(15)9(2)13-11(14)10-7-5-4-6-8-10/h4-9H,3H2,1-2H3,(H,13,14)/t9-/m0/s1
        [TestMethod()]
        public void TestCITPEA10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Double);
            container.AddBond(container.Atoms[2], container.Atoms[9], Double);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[18], Single);
            container.AddBond(container.Atoms[4], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[20], Single);
            container.AddBond(container.Atoms[5], container.Atoms[21], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[22], Single);
            container.AddBond(container.Atoms[8], container.Atoms[23], Single);
            container.AddBond(container.Atoms[8], container.Atoms[24], Single);
            container.AddBond(container.Atoms[8], container.Atoms[25], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[26], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[27], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[28], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[14], container.Atoms[29], Single);
            container.AddBond(container.Atoms[15], container.Atoms[30], Single);

            string[] expected = {"S", "S=C", "O=CN", "NC=O", "CR", "CR", "CSS", "CR", "CR", "C=ON", "CB", "CB", "CB", "CB",
                "CB", "CB", "HNCO", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CITSED10
        /// </summary>
        // @cdk.inchi InChI=1S/CH4N2O/c2-1-3-4/h1,4H,(H2,2,3)/p+1
        [TestMethod()]
        public void TestCITSED10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);

            string[] expected = { "NCN+", "CNN+", "NCN+", "-O-", "HO", "HNN+", "HC", "HNN+", "HNN+" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CIVCEP02
        /// </summary>
        // @cdk.inchi InChI=1S/C12H15N3O6/c16-10-13(1-7-4-19-7)11(17)15(3-9-6-21-9)12(18)14(10)2-8-5-20-8/h7-9H,1-6H2/t7-,8-,9-/m0/s1
        [TestMethod()]
        public void TestCIVCEP02()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[12], container.Atoms[15], Single);
            container.AddBond(container.Atoms[13], container.Atoms[16], Double);
            container.AddBond(container.Atoms[13], container.Atoms[17], Single);
            container.AddBond(container.Atoms[14], container.Atoms[17], Single);
            container.AddBond(container.Atoms[14], container.Atoms[18], Double);
            container.AddBond(container.Atoms[15], container.Atoms[19], Single);
            container.AddBond(container.Atoms[15], container.Atoms[20], Single);
            container.AddBond(container.Atoms[15], container.Atoms[21], Single);
            container.AddBond(container.Atoms[17], container.Atoms[22], Single);
            container.AddBond(container.Atoms[19], container.Atoms[23], Single);
            container.AddBond(container.Atoms[19], container.Atoms[24], Single);
            container.AddBond(container.Atoms[19], container.Atoms[25], Single);
            container.AddBond(container.Atoms[22], container.Atoms[26], Single);
            container.AddBond(container.Atoms[22], container.Atoms[27], Single);
            container.AddBond(container.Atoms[22], container.Atoms[28], Single);
            container.AddBond(container.Atoms[23], container.Atoms[24], Single);
            container.AddBond(container.Atoms[24], container.Atoms[29], Single);
            container.AddBond(container.Atoms[24], container.Atoms[30], Single);
            container.AddBond(container.Atoms[26], container.Atoms[31], Single);
            container.AddBond(container.Atoms[26], container.Atoms[32], Single);
            container.AddBond(container.Atoms[26], container.Atoms[33], Single);
            container.AddBond(container.Atoms[31], container.Atoms[32], Single);
            container.AddBond(container.Atoms[32], container.Atoms[34], Single);
            container.AddBond(container.Atoms[32], container.Atoms[35], Single);

            string[] expected = {"O=CN", "OR", "NC=O", "CONN", "CR", "CR3R", "CR3R", "HC", "HC", "HC", "HC", "HC", "NC=O",
                "CONN", "CONN", "CR", "O=CN", "NC=O", "O=CN", "CR3R", "HC", "HC", "CR", "OR", "CR3R", "HC", "CR3R",
                "HC", "HC", "HC", "HC", "OR", "CR3R", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CIVLAU02
        /// </summary>
        // @cdk.inchi InChI=1S/C11H14O6/c1-14-9(12)5-7-6(10(13)15-2)8(5)11(7)16-3-4-17-11/h5-8H,3-4H2,1-2H3/t5-,6+,7+,8-
        [TestMethod()]
        public void TestCIVLAU02()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[17], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[18], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[19], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[20], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[21], Single);
            container.AddBond(container.Atoms[6], container.Atoms[22], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[23], Single);
            container.AddBond(container.Atoms[7], container.Atoms[24], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[12], container.Atoms[26], Single);
            container.AddBond(container.Atoms[12], container.Atoms[27], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[13], container.Atoms[15], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[16], container.Atoms[28], Single);
            container.AddBond(container.Atoms[16], container.Atoms[29], Single);
            container.AddBond(container.Atoms[16], container.Atoms[30], Single);

            string[] expected = {"CR4R", "CR4R", "CR4R", "CR4R", "CR4R", "OR", "CR", "CR", "OR", "COO", "O=CO", "OC=O",
                "CR", "COO", "O=CO", "OC=O", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CIXWAH
        /// </summary>
        // @cdk.inchi InChI=1S/C7H10O4/c8-4-1-5-3-6(2-4)11-7(9)10-5/h4-6,8H,1-3H2/t4-,5+,6-
        [TestMethod()]
        public void TestCIXWAH()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Double);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);

            string[] expected = {"OR", "OC=O", "O=CO", "OC=O", "CR", "CR", "CR", "CR", "CR", "CR", "COOO", "HOR", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CIYNUT
        /// </summary>
        // @cdk.inchi InChI=1S/C6N4O2S2/c11-5-1-2(8-13-7-1)6(12)4-3(5)9-14-10-4
        [TestMethod()]
        public void TestCIYNUT()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Double);
            container.AddBond(container.Atoms[2], container.Atoms[5], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Double);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);

            string[] expected = {"STHI", "O=CR", "N5A", "N5A", "C5B", "C5B", "C=OR", "C=OR", "C5B", "O=CR", "C5B", "N5A",
                "N5A", "STHI"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CIZFIA
        /// </summary>
        // @cdk.inchi InChI=1S/C9H13NO3S/c1-6-5-8-4-3-7(2)14(12)10(8)9(11)13-6/h3-4,6-8H,5H2,1-2H3/t6-,7+,8+,14-/m0/s1
        [TestMethod()]
        public void TestCIZFIA()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Double);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);
            container.AddBond(container.Atoms[13], container.Atoms[24], Single);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);

            string[] expected = {"S=O", "OC=O", "O=S", "O=CN", "NC=O", "CR", "C=C", "C=C", "CR", "C=ON", "CR", "CR", "CR",
                "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CIZJAW
        /// </summary>
        // @cdk.inchi InChI=1S/C12H30Cl2Si4/c1-15(2,3)11(13)17(7,8)12(14,16(4,5)6)18(11,9)10/h1-10H3/t11-,12+
        [TestMethod()]
        public void TestCIZJAW()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Si", 0));
            container.Atoms.Add(NewAtm("Si", 0));
            container.Atoms.Add(NewAtm("Si", 0));
            container.Atoms.Add(NewAtm("Si", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[14], Single);
            container.AddBond(container.Atoms[1], container.Atoms[13], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[17], Single);
            container.AddBond(container.Atoms[3], container.Atoms[16], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[23], Single);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[26], Single);
            container.AddBond(container.Atoms[10], container.Atoms[25], Single);
            container.AddBond(container.Atoms[10], container.Atoms[24], Single);
            container.AddBond(container.Atoms[11], container.Atoms[29], Single);
            container.AddBond(container.Atoms[11], container.Atoms[28], Single);
            container.AddBond(container.Atoms[11], container.Atoms[27], Single);
            container.AddBond(container.Atoms[12], container.Atoms[32], Single);
            container.AddBond(container.Atoms[12], container.Atoms[31], Single);
            container.AddBond(container.Atoms[12], container.Atoms[30], Single);
            container.AddBond(container.Atoms[13], container.Atoms[35], Single);
            container.AddBond(container.Atoms[13], container.Atoms[34], Single);
            container.AddBond(container.Atoms[13], container.Atoms[33], Single);
            container.AddBond(container.Atoms[14], container.Atoms[38], Single);
            container.AddBond(container.Atoms[14], container.Atoms[37], Single);
            container.AddBond(container.Atoms[14], container.Atoms[36], Single);
            container.AddBond(container.Atoms[15], container.Atoms[41], Single);
            container.AddBond(container.Atoms[15], container.Atoms[40], Single);
            container.AddBond(container.Atoms[15], container.Atoms[39], Single);
            container.AddBond(container.Atoms[16], container.Atoms[44], Single);
            container.AddBond(container.Atoms[16], container.Atoms[43], Single);
            container.AddBond(container.Atoms[16], container.Atoms[42], Single);
            container.AddBond(container.Atoms[17], container.Atoms[47], Single);
            container.AddBond(container.Atoms[17], container.Atoms[46], Single);
            container.AddBond(container.Atoms[17], container.Atoms[45], Single);

            string[] expected = {"SI", "SI", "SI", "SI", "CL", "CL", "CR4R", "CR4R", "CR", "CR", "CR", "CR", "CR", "CR",
                "CR", "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CIZWUD
        /// </summary>
        // @cdk.inchi InChI=1S/C6H4N4O/c7-5-9-10(11)6-3-1-2-4-8-6/h1-4H/b10-9-
        [TestMethod()]
        public void TestCIZWUD()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[9], Triple);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);

            string[] expected = {"CB", "CB", "CB", "CB", "CB", "CSP", "NPYD", "N2OX", "N=N", "NSP", "OXN", "HC", "HC",
                "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CIZYEP
        /// </summary>
        // @cdk.inchi InChI=1S/C12H14N2S/c1-14(2)12(15-3)11(9-13)10-7-5-4-6-8-10/h4-8H,1-3H3/b12-11+
        [TestMethod()]
        public void TestCIZYEP()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[14], Triple);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[11], container.Atoms[24], Single);
            container.AddBond(container.Atoms[11], container.Atoms[25], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[26], Single);
            container.AddBond(container.Atoms[12], container.Atoms[27], Single);
            container.AddBond(container.Atoms[12], container.Atoms[28], Single);

            string[] expected = {"S", "CSP", "C=C", "C=C", "CB", "CB", "CB", "CB", "CB", "CB", "CR", "CR", "CR", "NC=C",
                "NSP", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CIZZUG
        /// </summary>
        // @cdk.inchi InChI=1S/C6H6N4O3S/c11-5-7-1-2-9(5)6-8-3-4(14-6)10(12)13/h3H,1-2H2,(H,7,11)
        [TestMethod()]
        public void TestCIZZUG()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Double);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Double);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[12], container.Atoms[18], Single);
            container.AddBond(container.Atoms[12], container.Atoms[19], Single);

            string[] expected = {"STHI", "C5A", "N5B", "C5B", "C5A", "NO2", "O2N", "O2N", "NC=O", "CONN", "NC=O", "CR",
                "CR", "O=CN", "HC", "HNCO", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for COBKIN01
        /// </summary>
        // @cdk.inchi InChI=1S/C7H12N2O4/c1-3-13-6(11)7(5(8)10)4-9(7)12-2/h3-4H2,1-2H3,(H2,8,10)/t7-,9+/m0/s1
        [TestMethod()]
        public void TestCOBKIN01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Double);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Double);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[11], container.Atoms[24], Single);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);
            container.AddBond(container.Atoms[12], container.Atoms[18], Single);
            container.AddBond(container.Atoms[12], container.Atoms[19], Single);

            string[] expected = {"OR", "O=CN", "OC=O", "O=CO", "NR", "NC=O", "CR3R", "CR3R", "C=ON", "COO", "CR", "CR",
                "CR", "HNCO", "HNCO", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for COCXUN
        /// </summary>
        // @cdk.inchi InChI=1S/C12H6N4/c13-7-15-11-5-6-12(16-8-14)10-4-2-1-3-9(10)11/h1-6H/b15-11+,16-12+
        [TestMethod()]
        public void TestCOCXUN()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[13], Double);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[16], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[17], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Double);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[18], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[21], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Triple);
            container.AddBond(container.Atoms[11], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[14], Triple);

            string[] expected = {"C=N", "C=C", "C=C", "C=N", "CB", "CB", "CB", "CB", "CB", "CB", "CSP", "CSP", "NSP",
                "N=C", "NSP", "N=C", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for COGDEH
        /// </summary>
        // @cdk.inchi InChI=1S/C11H6N6/c1-2-4-8-7(3-1)5-6-9-10(8)12-11-13-15-16-17(11)14-9/h1-6H
        [TestMethod()]
        public void TestCOGDEH()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Double);
            container.AddBond(container.Atoms[5], container.Atoms[8], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[12], container.Atoms[16], Single);
            container.AddBond(container.Atoms[13], container.Atoms[19], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[14], container.Atoms[20], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[15], container.Atoms[21], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Double);
            container.AddBond(container.Atoms[16], container.Atoms[22], Single);

            string[] expected = {"N5B", "N5B", "N5A", "NPYL", "N=C", "N=C", "C5A", "C=N", "C=N", "C=C", "C=C", "CB", "CB",
                "CB", "CB", "CB", "CB", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for COGYAY
        /// </summary>
        // @cdk.inchi InChI=1S/C8H6ClN3/c9-8-6-10-12(11-8)7-4-2-1-3-5-7/h1-6H
        [TestMethod()]
        public void TestCOGYAY()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);

            string[] expected = {"CL", "N5A", "NPYL", "N5A", "C5B", "C5B", "CB", "CB", "CB", "CB", "CB", "CB", "HC", "HC",
                "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for COHKOZ
        /// </summary>
        // @cdk.inchi InChI=1S/C5H4N4OS/c1-10-4(7)5-8-3(2-6)9-11-5/h7H,1H3/b7-4+
        [TestMethod()]
        public void TestCOHKOZ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Double);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Double);
            container.AddBond(container.Atoms[4], container.Atoms[8], Triple);
            container.AddBond(container.Atoms[5], container.Atoms[9], Double);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);
            container.AddBond(container.Atoms[10], container.Atoms[14], Single);

            string[] expected = {"STHI", "OC=N", "N5A", "N5B", "NSP", "N=C", "C5B", "C5A", "CSP", "C=N", "CR", "HN=C",
                "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for COJFIQ
        /// </summary>
        // @cdk.inchi InChI=1S/C7H9N5/c1-12(2)7-5-6(9-3-8-5)10-4-11-7/h3-4H,1-2H3,(H,8,9,10,11)/p+2
        [TestMethod()]
        public void TestCOJFIQ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[22], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);

            string[] expected = {"NPD+", "CB", "NPYD", "C5", "C5", "CB", "NC=N", "NIM+", "CIM+", "NIM+", "CR", "CR",
                "HPD+", "HIM+", "HC", "HIM+", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for COKDEL
        /// </summary>
        // @cdk.inchi InChI=1S/C8H14O2S/c1-6-7(8(2,3)4)10-11(5)9/h1,7H,2-5H3/t7-,11+/m0/s1
        [TestMethod()]
        public void TestCOKDEL()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Triple);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[10], container.Atoms[24], Single);

            string[] expected = {"S=O", "O=S", "OS=O", "CR", "CR", "CSP", "CSP", "CR", "CR", "CR", "CR", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for COKROJ
        /// </summary>
        // @cdk.inchi InChI=1S/C10H10N3O3S/c1-7-6-10(12-16-7)13-17(14,15)9-4-2-8(11)3-5-9/h2-6H,11H2,1H3/q-1
        [TestMethod()]
        public void TestCOKROJ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.AddBond(container.Atoms[0], container.Atoms[13], Single);
            container.AddBond(container.Atoms[1], container.Atoms[15], Single);
            container.AddBond(container.Atoms[2], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[21], Single);
            container.AddBond(container.Atoms[7], container.Atoms[22], Single);
            container.AddBond(container.Atoms[8], container.Atoms[23], Single);
            container.AddBond(container.Atoms[9], container.Atoms[23], Single);
            container.AddBond(container.Atoms[10], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[12], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[16], container.Atoms[26], Single);
            container.AddBond(container.Atoms[17], container.Atoms[26], Single);
            container.AddBond(container.Atoms[17], container.Atoms[22], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Double);
            container.AddBond(container.Atoms[18], container.Atoms[19], Single);
            container.AddBond(container.Atoms[19], container.Atoms[20], Double);
            container.AddBond(container.Atoms[20], container.Atoms[23], Single);
            container.AddBond(container.Atoms[20], container.Atoms[21], Single);
            container.AddBond(container.Atoms[21], container.Atoms[22], Double);
            container.AddBond(container.Atoms[24], container.Atoms[26], Double);
            container.AddBond(container.Atoms[25], container.Atoms[26], Double);

            string[] expected = {"HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HNCC", "HNCC", "OFUR", "N5A", "C5B",
                "C5B", "C5A", "CR", "NM", "CB", "CB", "CB", "CB", "CB", "CB", "NC=C", "O2S", "O2S", "SO2N"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for COLZUY
        /// </summary>
        // @cdk.inchi InChI=1S/C12H26N4P2/c1-17-13-5-3-6-14(17)10-12-16-8-4-7-15(11-9-13)18(16)2/h3-12H2,1-2H3/t17-,18-
        [TestMethod()]
        public void TestCOLZUY()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[19], Single);
            container.AddBond(container.Atoms[1], container.Atoms[18], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[21], Single);
            container.AddBond(container.Atoms[2], container.Atoms[20], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[23], Single);
            container.AddBond(container.Atoms[4], container.Atoms[22], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[25], Single);
            container.AddBond(container.Atoms[5], container.Atoms[24], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[27], Single);
            container.AddBond(container.Atoms[7], container.Atoms[26], Single);
            container.AddBond(container.Atoms[8], container.Atoms[30], Single);
            container.AddBond(container.Atoms[8], container.Atoms[29], Single);
            container.AddBond(container.Atoms[8], container.Atoms[28], Single);
            container.AddBond(container.Atoms[9], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[32], Single);
            container.AddBond(container.Atoms[10], container.Atoms[31], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[14], Single);
            container.AddBond(container.Atoms[12], container.Atoms[34], Single);
            container.AddBond(container.Atoms[12], container.Atoms[33], Single);
            container.AddBond(container.Atoms[12], container.Atoms[16], Single);
            container.AddBond(container.Atoms[13], container.Atoms[36], Single);
            container.AddBond(container.Atoms[13], container.Atoms[35], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[17], Single);
            container.AddBond(container.Atoms[15], container.Atoms[39], Single);
            container.AddBond(container.Atoms[15], container.Atoms[38], Single);
            container.AddBond(container.Atoms[15], container.Atoms[37], Single);
            container.AddBond(container.Atoms[16], container.Atoms[41], Single);
            container.AddBond(container.Atoms[16], container.Atoms[40], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[17], container.Atoms[43], Single);
            container.AddBond(container.Atoms[17], container.Atoms[42], Single);

            string[] expected = {"P", "CR", "CR", "NR", "CR", "CR", "NR", "CR", "CR", "NR", "CR", "P", "CR", "CR", "NR",
                "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for COMDIR
        /// </summary>
        // @cdk.inchi InChI=1S/C11H8Br2O2/c12-7-4-8(14)11(13)6-2-1-5(3-6)9(11)10(7)15/h1-2,4-6,9H,3H2/t5-,6+,9+,11+/m1/s1
        [TestMethod()]
        public void TestCOMDIR()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Br", 0));
            container.Atoms.Add(NewAtm("Br", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[7], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[17], Single);
            container.AddBond(container.Atoms[14], container.Atoms[21], Single);
            container.AddBond(container.Atoms[14], container.Atoms[22], Single);

            string[] expected = {"BR", "BR", "O=CR", "O=CR", "C=OR", "C=C", "C=C", "C=OR", "CR", "CR", "CR", "C=C", "C=C",
                "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for COMKAQ
        /// </summary>
        // @cdk.inchi InChI=1S/C7H7NO2/c8-2-4-1-5-3-10-7(9)6(4)5/h4-6H,1,3H2/t4-,5+,6+/m0/s1
        [TestMethod()]
        public void TestCOMKAQ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Triple);

            string[] expected = {"COO", "O=CO", "OC=O", "CR", "CR4R", "CR4R", "CR4R", "CR4R", "CSP", "NSP", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for COMWOQ
        /// </summary>
        // @cdk.inchi InChI=1S/C9H7NO/c11-6-7-5-10-9-4-2-1-3-8(7)9/h1-6,10H
        [TestMethod()]
        public void TestCOMWOQ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);

            string[] expected = {"NPYL", "C5A", "C5B", "CB", "CB", "CB", "CB", "C5A", "C5B", "C=OR", "O=CR", "HPYL", "HC",
                "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for COMWUW
        /// </summary>
        // @cdk.inchi InChI=1S/C11H14N2/c1-13(2)8-9-7-12-11-6-4-3-5-10(9)11/h3-7,12H,8H2,1-2H3
        [TestMethod()]
        public void TestCOMWUW()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[13], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[14], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[26], Single);
            container.AddBond(container.Atoms[11], container.Atoms[25], Single);
            container.AddBond(container.Atoms[11], container.Atoms[24], Single);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);

            string[] expected = {"NPYL", "NR", "C5A", "C5B", "CB", "CB", "CB", "CB", "C5A", "C5B", "CR", "CR", "CR",
                "HPYL", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CONBAI
        /// </summary>
        // @cdk.inchi InChI=1S/C12H14F2N4O4/c1-15-5-6-12(14,8(20)18(4)10(22)16(6)2)11(5,13)7(19)17(3)9(15)21/h5-6H,1-4H3/t5-,6+,11-,12+
        [TestMethod()]
        public void TestCONBAI()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[22], Single);
            container.AddBond(container.Atoms[1], container.Atoms[23], Single);
            container.AddBond(container.Atoms[1], container.Atoms[24], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[25], Single);
            container.AddBond(container.Atoms[5], container.Atoms[26], Single);
            container.AddBond(container.Atoms[5], container.Atoms[27], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[28], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[29], Single);
            container.AddBond(container.Atoms[12], container.Atoms[30], Single);
            container.AddBond(container.Atoms[12], container.Atoms[31], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[13], container.Atoms[15], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[17], Single);
            container.AddBond(container.Atoms[16], container.Atoms[32], Single);
            container.AddBond(container.Atoms[16], container.Atoms[33], Single);
            container.AddBond(container.Atoms[16], container.Atoms[34], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Double);
            container.AddBond(container.Atoms[17], container.Atoms[19], Single);
            container.AddBond(container.Atoms[19], container.Atoms[20], Single);
            container.AddBond(container.Atoms[19], container.Atoms[21], Single);
            container.AddBond(container.Atoms[21], container.Atoms[35], Single);

            string[] expected = {"NC=O", "CR", "CONN", "O=CN", "NC=O", "CR", "C=ON", "O=CN", "CR4R", "F", "CR4R", "NC=O",
                "CR", "CONN", "O=CN", "NC=O", "CR", "C=ON", "O=CN", "CR4R", "F", "CR4R", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CONFAM
        /// </summary>
        // @cdk.inchi InChI=1S/C2H5NOS/c1-4-2(3)5/h1H3,(H2,3,5)
        [TestMethod()]
        public void TestCONFAM()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);

            string[] expected = { "S=C", "C=SN", "CR", "OC=S", "NC=S", "HC", "HC", "HC", "HNCS", "HNCS" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CONLIA
        /// </summary>
        // @cdk.inchi InChI=1S/C7H18N2/c1-8(2)5-6-9(3,4)7-8/h5-7H2,1-4H3/q+2
        [TestMethod()]
        public void TestCONLIA()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[7], container.Atoms[21], Single);
            container.AddBond(container.Atoms[7], container.Atoms[22], Single);
            container.AddBond(container.Atoms[7], container.Atoms[23], Single);
            container.AddBond(container.Atoms[8], container.Atoms[24], Single);
            container.AddBond(container.Atoms[8], container.Atoms[25], Single);
            container.AddBond(container.Atoms[8], container.Atoms[26], Single);

            string[] expected = {"NR+", "NR+", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CORDOC
        /// </summary>
        // @cdk.inchi InChI=1S/C9H9ClO3S/c1-14(12,13)9(10)8(11)7-5-3-2-4-6-7/h2-6,9H,1H3/t9-/m1/s1
        [TestMethod()]
        public void TestCORDOC()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[11], Double);
            container.AddBond(container.Atoms[0], container.Atoms[12], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[14], Single);
            container.AddBond(container.Atoms[2], container.Atoms[15], Single);
            container.AddBond(container.Atoms[2], container.Atoms[16], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);

            string[] expected = {"SO2", "CL", "CR", "CR", "C=OR", "CB", "CB", "CB", "CB", "CB", "CB", "O2S", "O2S", "O=CR",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CORWUB10
        /// </summary>
        // @cdk.inchi InChI=1S/C2H3NOS2/c4-1-3-2(5)6/h1H,(H2,3,4,5,6)/p-1
        [TestMethod()]
        public void TestCORWUB10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);

            string[] expected = { "S2CM", "S2CM", "CS2M", "NC=O", "C=ON", "O=CN", "HNCO", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for COSFAR
        /// </summary>
        // @cdk.inchi InChI=1S/C8H7NOS/c1-9-6-4-2-3-5-7(6)11-8(9)10/h2-5H,1H3
        [TestMethod()]
        public void TestCOSFAR()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Double);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);

            string[] expected = {"S", "O=CN", "NC=O", "CB", "CB", "CB", "CB", "CB", "CB", "C=ON", "CR", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for COSSEI
        /// </summary>
        // @cdk.inchi InChI=1S/C4H8N2S4/c7-3(8)5-1-2-6-4(9)10/h1-2H2,(H2,5,7,8)(H2,6,9,10)/p-2
        [TestMethod()]
        public void TestCOSSEI()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", -1));
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[15], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Double);

            string[] expected = {"S2CM", "S2CM", "CS2M", "NC=S", "CR", "HNCS", "HC", "HC", "CR", "NC=S", "HC", "HC",
                "CS2M", "HNCS", "S2CM", "S2CM"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for COSWIQ
        /// </summary>
        // @cdk.inchi InChI=1S/C11H10N2O/c1-3-10-6-4-9(8-12)5-7-11(13-10)14-2/h3-7H,1H2,2H3/b6-4-,7-5-,9-4+,9-5+,10-6-,11-7+,13-10?,13-11+
        [TestMethod()]
        public void TestCOSWIQ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[14], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Triple);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);

            string[] expected = {"N=C", "C=N", "C=C", "C=C", "C=C", "C=C", "C=C", "C=C", "OC=N", "CR", "CSP", "NSP", "C=C",
                "C=C", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for COTMON
        /// </summary>
        // @cdk.inchi InChI=1S/C7H8ClN3S/c8-5-1-3-6(4-2-5)10-7(12)11-9/h1-4H,9H2,(H2,10,11,12)
        [TestMethod()]
        public void TestCOTMON()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[0], container.Atoms[13], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[14], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);

            string[] expected = {"NR", "NC=S", "C=SN", "NC=S", "CB", "CB", "CB", "CB", "CB", "CB", "CL", "S=C", "HNR",
                "HNR", "HNCS", "HNCS", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for COTPEG
        /// </summary>
        // @cdk.inchi InChI=1S/C5H6O5/c6-3(5(9)10)1-2-4(7)8/h1-2H2,(H,7,8)(H,9,10)/p-1
        [TestMethod()]
        public void TestCOTPEG()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Double);
            container.AddBond(container.Atoms[3], container.Atoms[9], Double);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);

            string[] expected = {"O2CM", "O2CM", "O=CR", "O=CO", "OC=O", "CO2M", "C=OR", "CR", "CR", "COO", "HOCO", "HC",
                "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for COTRIM
        /// </summary>
        // @cdk.inchi InChI=1S/C11H9N3O2/c15-13-8-6-11(7-9-13)14(16)12-10-4-2-1-3-5-10/h1-9H/b14-12-
        [TestMethod()]
        public void TestCOTRIM()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Double);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[23], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[15], container.Atoms[24], Single);

            string[] expected = {"OXN", "OXN", "NPOX", "N2OX", "N=N", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB",
                "CB", "CB", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for COVHUQ
        /// </summary>
        // @cdk.inchi InChI=1S/C4H6O2S5/c1-7-3(5)9-11-10-4(6)8-2/h1-2H3
        [TestMethod()]
        public void TestCOVHUQ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Single);
            container.AddBond(container.Atoms[13], container.Atoms[16], Single);

            string[] expected = {"CR", "C=OS", "O=C", "S", "S", "S", "HC", "HC", "HC", "S", "C=OS", "O=C", "S", "CR", "HC",
                "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for COVMAB
        /// </summary>
        // @cdk.inchi InChI=1S/C10H20N2/c1-9(2,3)11-7-8-12-10(4,5)6/h7-8H,1-6H3/b11-7+,12-8+
        [TestMethod()]
        public void TestCOVMAB()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[16], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Double);
            container.AddBond(container.Atoms[16], container.Atoms[18], Single);
            container.AddBond(container.Atoms[17], container.Atoms[19], Single);
            container.AddBond(container.Atoms[19], container.Atoms[20], Single);
            container.AddBond(container.Atoms[19], container.Atoms[21], Single);
            container.AddBond(container.Atoms[19], container.Atoms[22], Single);
            container.AddBond(container.Atoms[20], container.Atoms[23], Single);
            container.AddBond(container.Atoms[20], container.Atoms[24], Single);
            container.AddBond(container.Atoms[20], container.Atoms[25], Single);
            container.AddBond(container.Atoms[21], container.Atoms[26], Single);
            container.AddBond(container.Atoms[21], container.Atoms[27], Single);
            container.AddBond(container.Atoms[21], container.Atoms[28], Single);
            container.AddBond(container.Atoms[22], container.Atoms[29], Single);
            container.AddBond(container.Atoms[22], container.Atoms[30], Single);
            container.AddBond(container.Atoms[22], container.Atoms[31], Single);

            string[] expected = {"N=C", "C=N", "CR", "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "C=N", "N=C", "HC", "CR", "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for COVXIU
        /// </summary>
        // @cdk.inchi InChI=1S/C12H14N4O2S/c1-8-7-9(2)15-12(14-8)16-19(17,18)11-5-3-10(13)4-6-11/h3-7H,13H2,1-2H3,(H,14,15,16)
        [TestMethod()]
        public void TestCOVXIU()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[19], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[20], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[21], Single);
            container.AddBond(container.Atoms[5], container.Atoms[22], Single);
            container.AddBond(container.Atoms[6], container.Atoms[23], Single);
            container.AddBond(container.Atoms[6], container.Atoms[24], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[9], Double);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[25], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[13], container.Atoms[17], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[26], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Double);
            container.AddBond(container.Atoms[15], container.Atoms[18], Single);
            container.AddBond(container.Atoms[17], container.Atoms[27], Single);
            container.AddBond(container.Atoms[17], container.Atoms[28], Single);
            container.AddBond(container.Atoms[17], container.Atoms[29], Single);
            container.AddBond(container.Atoms[18], container.Atoms[30], Single);
            container.AddBond(container.Atoms[18], container.Atoms[31], Single);
            container.AddBond(container.Atoms[18], container.Atoms[32], Single);

            string[] expected = {"CB", "CB", "CB", "CB", "CB", "CB", "NC=C", "SO2N", "O2S", "O2S", "NSO2", "CB", "NPYD",
                "CB", "CB", "CB", "NPYD", "CR", "CR", "HC", "HC", "HC", "HC", "HNCC", "HNCC", "HNSO", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for COWTIR
        /// </summary>
        // @cdk.inchi InChI=1S/C10H16NO4P/c1-7(2)11-10(16(13,14)15)8-5-3-4-6-9(8)12/h3-7,10-12H,1-2H3,(H2,13,14,15)/t10-/m1/s1
        [TestMethod()]
        public void TestCOWTIR()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[27], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[8], container.Atoms[22], Single);
            container.AddBond(container.Atoms[8], container.Atoms[23], Single);
            container.AddBond(container.Atoms[9], container.Atoms[24], Single);
            container.AddBond(container.Atoms[9], container.Atoms[25], Single);
            container.AddBond(container.Atoms[9], container.Atoms[26], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[28], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[29], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[14], container.Atoms[30], Single);
            container.AddBond(container.Atoms[15], container.Atoms[31], Single);

            string[] expected = {"PO3", "OPO2", "O2P", "O2P", "OC=C", "NR+", "CR", "CR", "CR", "CR", "CB", "CB", "CB",
                "CB", "CB", "CB", "HOP", "HC", "HNR+", "HNR+", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HOCC", "HC",
                "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for COXBAS
        /// </summary>
        // @cdk.inchi InChI=1S/C5H11O3PS3/c1-7-9(6,8-2)5-11-3-10-4-12-5/h5H,3-4H2,1-2H3
        [TestMethod()]
        public void TestCOXBAS()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Double);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[9], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);

            string[] expected = {"PO3", "S", "S", "S", "OP", "OPO2", "OPO2", "CR", "CR", "CR", "CR", "CR", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for COXZEU
        /// </summary>
        // @cdk.inchi InChI=1S/C3H7N3S2/c1-8-3(7)6-2(4)5/h1H3,(H4,4,5,6,7)
        [TestMethod()]
        public void TestCOXZEU()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Double);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Double);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);

            string[] expected = {"S", "S=C", "N=C", "NC=N", "NC=N", "CGD", "CSS", "CR", "HC", "HC", "HC", "HNCN", "HNCN",
                "HNCN", "HNCN"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for COYMOS
        /// </summary>
        // @cdk.inchi InChI=1S/C10H11N3O2/c11-8(14)10(9(12)15)6-13(10)7-4-2-1-3-5-7/h1-5H,6H2,(H2,11,14)(H2,12,15)/t13-/m0/s1
        [TestMethod()]
        public void TestCOYMOS()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[1], container.Atoms[6], Double);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[15], Single);
            container.AddBond(container.Atoms[2], container.Atoms[16], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[17], Single);
            container.AddBond(container.Atoms[3], container.Atoms[18], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[13], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[25], Single);

            string[] expected = {"O=CN", "O=CN", "NC=O", "NC=O", "NC=C", "C=ON", "C=ON", "CR3R", "CR3R", "CB", "CB", "CB",
                "CB", "CB", "CB", "HNCO", "HNCO", "HNCO", "HNCO", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for COYNAF
        /// </summary>
        // @cdk.inchi InChI=1S/C8H6N2O2/c9-10-7(11)5-3-1-2-4-6(5)8(10)12/h1-4H,9H2
        [TestMethod()]
        public void TestCOYNAF()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[0], container.Atoms[13], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[11], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);

            string[] expected = {"NR", "NC=O", "O=CN", "O=CN", "C=ON", "CB", "CB", "CB", "CB", "CB", "CB", "C=ON", "HNR",
                "HNR", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for COYVIV
        /// </summary>
        // @cdk.inchi InChI=1S/C9H10N4O2S2/c1-11-17(14,15)7-5-3-2-4-6(7)8-12-13-9(10)16-8/h2-5,11H,1H3,(H2,10,13)
        [TestMethod()]
        public void TestCOYVIV()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[14], Double);
            container.AddBond(container.Atoms[12], container.Atoms[15], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[23], Single);
            container.AddBond(container.Atoms[16], container.Atoms[24], Single);
            container.AddBond(container.Atoms[16], container.Atoms[25], Single);
            container.AddBond(container.Atoms[16], container.Atoms[26], Single);

            string[] expected = {"STHI", "C5A", "N5B", "N5B", "C5A", "CB", "CB", "CB", "CB", "CB", "CB", "NC=N", "SO2N",
                "O2S", "O2S", "NSO2", "CR", "HNCN", "HNCN", "HC", "HC", "HC", "HC", "HNSO", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CUBTUO
        /// </summary>
        // @cdk.inchi InChI=1S/C12H14N2/c1-9-4-3-5-11(10(9)2)6-12-7-13-8-14-12/h3-5,7-8H,6H2,1-2H3,(H,13,14)/p+1
        [TestMethod()]
        public void TestCUBTUO()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[10], Double);
            container.AddBond(container.Atoms[0], container.Atoms[16], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[18], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[28], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);
            container.AddBond(container.Atoms[13], container.Atoms[27], Single);

            string[] expected = {"NIM+", "NIM+", "CB", "CB", "CB", "CB", "CB", "CB", "CR", "C5", "CIM+", "C5", "CR", "CR",
                "HC", "HC", "HIM+", "HC", "HIM+", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CUCDAF
        /// </summary>
        // @cdk.inchi InChI=1S/C12H12O3/c1-6-4-3-5-7-8(6)12(2,14)11-10(15-11)9(7)13/h3-5,10-11,14H,1-2H3/t10-,11-,12+/m0/s1
        [TestMethod()]
        public void TestCUCDAF()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[20], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Double);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[10], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[21], Single);
            container.AddBond(container.Atoms[14], container.Atoms[26], Single);
            container.AddBond(container.Atoms[14], container.Atoms[25], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);

            string[] expected = {"OR", "OR", "O=CR", "CR", "CR3R", "CR3R", "C=OR", "CB", "CB", "CB", "CB", "CB", "CB",
                "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HOR", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CUCHOX
        /// </summary>
        // @cdk.inchi InChI=1S/C11H14O4/c1-6(12)10-5-11(10,7(2)13)9(3,15)4-8(10)14/h15H,4-5H2,1-3H3/t9-,10-,11+/m0/s1
        [TestMethod()]
        public void TestCUCHOX()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[15], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[23], Single);
            container.AddBond(container.Atoms[1], container.Atoms[24], Single);
            container.AddBond(container.Atoms[1], container.Atoms[25], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Double);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Double);
            container.AddBond(container.Atoms[4], container.Atoms[10], Double);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[14], container.Atoms[26], Single);
            container.AddBond(container.Atoms[14], container.Atoms[27], Single);
            container.AddBond(container.Atoms[14], container.Atoms[28], Single);

            string[] expected = {"OR", "CR", "O=CR", "C=OR", "O=CR", "CR3R", "CR", "C=OR", "CR", "CR3R", "C=OR", "CR3R",
                "CR", "O=CR", "CR", "HOR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CUCHUD
        /// </summary>
        // @cdk.inchi InChI=1S/C9H8N4O3S/c1-12-5-11-7(13(15)16)9(12)17-8-6(14)3-2-4-10-8/h2-5,14H,1H3
        [TestMethod()]
        public void TestCUCHUD()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Double);
            container.AddBond(container.Atoms[15], container.Atoms[21], Single);
            container.AddBond(container.Atoms[15], container.Atoms[22], Single);
            container.AddBond(container.Atoms[15], container.Atoms[23], Single);
            container.AddBond(container.Atoms[16], container.Atoms[24], Single);

            string[] expected = {"S", "C5A", "C5B", "N5B", "C5A", "NPYL", "CB", "NPYD", "CB", "CB", "CB", "CB", "NO2",
                "O2N", "O2N", "CR", "OC=C", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HOCC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CUDJAM
        /// </summary>
        // @cdk.inchi InChI=1S/C6H10N4O3/c1-3(8-12)6(9-13)10-2-4(10)5(7)11/h4,12-13H,2H2,1H3,(H2,7,11)/b8-3+,9-6-/t4-,10+/m1/s1
        [TestMethod()]
        public void TestCUDJAM()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[12], Double);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Double);
            container.AddBond(container.Atoms[5], container.Atoms[8], Double);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);

            string[] expected = {"O=CN", "-O-", "-O-", "NC=N", "N=C", "N=C", "NC=O", "C=N", "C=N", "CR3R", "CR3R", "CR",
                "C=ON", "HO", "HO", "HNCO", "HNCO", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CUDNEU
        /// </summary>
        // @cdk.inchi InChI=1S/C10H22O2Si/c1-12-10(13(2,3)4)8-6-5-7-9(10)11/h9,11H,5-8H2,1-4H3/t9-,10+/m1/s1
        [TestMethod()]
        public void TestCUDNEU()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Si", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[12], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[18], Single);
            container.AddBond(container.Atoms[4], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[20], Single);
            container.AddBond(container.Atoms[5], container.Atoms[21], Single);
            container.AddBond(container.Atoms[5], container.Atoms[22], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[23], Single);
            container.AddBond(container.Atoms[7], container.Atoms[24], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[25], Single);
            container.AddBond(container.Atoms[8], container.Atoms[26], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[27], Single);
            container.AddBond(container.Atoms[9], container.Atoms[28], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[29], Single);
            container.AddBond(container.Atoms[10], container.Atoms[30], Single);
            container.AddBond(container.Atoms[11], container.Atoms[31], Single);
            container.AddBond(container.Atoms[12], container.Atoms[32], Single);
            container.AddBond(container.Atoms[12], container.Atoms[33], Single);
            container.AddBond(container.Atoms[12], container.Atoms[34], Single);

            string[] expected = {"SI", "OR", "OR", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "HOR", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CUDPAS
        /// </summary>
        // @cdk.inchi InChI=1S/C6H5N3O4/c10-5-3-7-2-1-4(5)6(8-11)9(12)13/h1-3,10-11H/p-1/b8-6+
        [TestMethod()]
        public void TestCUDPAS()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Double);

            string[] expected = {"NPYD", "CB", "CB", "CB", "CB", "CB", "OC=C", "C=N", "N=C", "OM2", "NO2", "O2N", "O2N",
                "HC", "HC", "HC", "HOCC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CUDPOG
        /// </summary>
        // @cdk.inchi InChI=1S/C10H11N3S/c1-10(2)12-11-9(14)13(10)8-6-4-3-5-7-8/h3-7H,1-2H3
        [TestMethod()]
        public void TestCUDPOG()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Double);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[22], Single);
            container.AddBond(container.Atoms[6], container.Atoms[23], Single);
            container.AddBond(container.Atoms[6], container.Atoms[24], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[7], container.Atoms[21], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);
            container.AddBond(container.Atoms[13], container.Atoms[18], Single);

            string[] expected = {"S=C", "NC=S", "N=N", "N=N", "C=SN", "CR", "CR", "CR", "CB", "CB", "CB", "CB", "CB", "CB",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CUDREY
        /// </summary>
        // @cdk.inchi InChI=1S/C3H4N2S/c4-3-5-1-2-6-3/h1-2H,(H2,4,5)/p+1
        [TestMethod()]
        public void TestCUDREY()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);

            string[] expected = { "STHI", "NIM+", "NCN+", "CIM+", "C5B", "C5A", "HIM+", "HC", "HC", "HNN+", "HNN+" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CUFFAK
        /// </summary>
        // @cdk.inchi InChI=1S/C20H12O5/c21-11-5-7-15-17(9-11)24-18-10-12(22)6-8-16(18)20(15)14-4-2-1-3-13(14)19(23)25-20/h1-10,21-22H
        [TestMethod()]
        public void TestCUFFAK()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[14], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Double);
            container.AddBond(container.Atoms[1], container.Atoms[27], Single);
            container.AddBond(container.Atoms[1], container.Atoms[36], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[30], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[29], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[33], Single);
            container.AddBond(container.Atoms[5], container.Atoms[31], Single);
            container.AddBond(container.Atoms[5], container.Atoms[34], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[22], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[35], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Double);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[16], Double);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[16], container.Atoms[18], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Single);
            container.AddBond(container.Atoms[18], container.Atoms[20], Double);
            container.AddBond(container.Atoms[19], container.Atoms[26], Single);
            container.AddBond(container.Atoms[20], container.Atoms[22], Single);
            container.AddBond(container.Atoms[21], container.Atoms[28], Single);
            container.AddBond(container.Atoms[22], container.Atoms[24], Single);
            container.AddBond(container.Atoms[22], container.Atoms[34], Single);
            container.AddBond(container.Atoms[23], container.Atoms[32], Single);
            container.AddBond(container.Atoms[24], container.Atoms[26], Double);
            container.AddBond(container.Atoms[24], container.Atoms[33], Single);
            container.AddBond(container.Atoms[25], container.Atoms[36], Single);
            container.AddBond(container.Atoms[26], container.Atoms[28], Single);
            container.AddBond(container.Atoms[28], container.Atoms[30], Double);
            container.AddBond(container.Atoms[30], container.Atoms[32], Single);
            container.AddBond(container.Atoms[32], container.Atoms[33], Double);
            container.AddBond(container.Atoms[34], container.Atoms[35], Single);
            container.AddBond(container.Atoms[35], container.Atoms[36], Double);

            string[] expected = {"OC=C", "CB", "OC=C", "CB", "OC=C", "CB", "OC=O", "COO", "O=CO", "HOCC", "CB", "HOCC",
                "CB", "HC", "CB", "HC", "CB", "HC", "CB", "HC", "CB", "HC", "CR", "HC", "CB", "HC", "CB", "HC", "CB",
                "HC", "CB", "HC", "CB", "CB", "CB", "CB", "CB"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CUGBEL
        /// </summary>
        // @cdk.inchi InChI=1S/C12H14N2O2/c1-2-16-12-10(7-13)8-5-3-4-6-9(8)11(15)14-12/h2-6H2,1H3,(H,14,15)
        [TestMethod()]
        public void TestCUGBEL()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[16], Single);
            container.AddBond(container.Atoms[3], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[18], Single);
            container.AddBond(container.Atoms[4], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[20], Single);
            container.AddBond(container.Atoms[5], container.Atoms[21], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[22], Single);
            container.AddBond(container.Atoms[6], container.Atoms[23], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[15], Double);
            container.AddBond(container.Atoms[9], container.Atoms[24], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[25], Single);
            container.AddBond(container.Atoms[11], container.Atoms[26], Single);
            container.AddBond(container.Atoms[12], container.Atoms[27], Single);
            container.AddBond(container.Atoms[12], container.Atoms[28], Single);
            container.AddBond(container.Atoms[12], container.Atoms[29], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Triple);

            string[] expected = {"C=C", "C=C", "C=C", "CR", "CR", "CR", "CR", "C=C", "C=ON", "NC=O", "OC=C", "CR", "CR",
                "CSP", "NSP", "O=CN", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HNCO", "HC", "HC", "HC", "HC",
                "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CUGGOA
        /// </summary>
        // @cdk.inchi InChI=1S/C7H6Cl5NO4/c1-6(10,5(14)15)2-3(8)4(9)7(11,12)13(16)17/h2,4H,1H3,(H,14,15)/b3-2+/t4-,6-/m1/s1
        [TestMethod()]
        public void TestCUGGOA()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Double);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[18], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[19], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[16], container.Atoms[22], Single);
            container.AddBond(container.Atoms[16], container.Atoms[21], Single);
            container.AddBond(container.Atoms[16], container.Atoms[20], Single);

            string[] expected = {"CL", "CL", "CL", "CL", "CL", "O=CO", "OC=O", "O2N", "O2N", "NO2", "COO", "CR", "C=C",
                "C=C", "CR", "CR", "CR", "HOCO", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CUGLOF
        /// </summary>
        // @cdk.inchi InChI=1S/C10H9N3O6/c14-11(15)9-3-1-2-4-5(3)6(9)7(4)10(8(2)9,12(16)17)13(18)19/h2-8H,1H2/t2-,3+,4-,5+,6+,7-,8+,9-/m1/s1
        [TestMethod()]
        public void TestCUGLOF()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[19], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[20], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[21], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[22], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[23], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[24], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[25], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);
            container.AddBond(container.Atoms[9], container.Atoms[26], Single);
            container.AddBond(container.Atoms[9], container.Atoms[27], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);
            container.AddBond(container.Atoms[10], container.Atoms[14], Double);
            container.AddBond(container.Atoms[11], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Double);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);
            container.AddBond(container.Atoms[12], container.Atoms[18], Double);

            string[] expected = {"CR4R", "CR", "CR", "CR4R", "CR4R", "CR4R", "CR4R", "CR4R", "CR", "CR", "NO2", "NO2",
                "NO2", "O2N", "O2N", "O2N", "O2N", "O2N", "O2N", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CUJYUB10
        /// </summary>
        // @cdk.inchi InChI=1S/C8H10N2OS/c1-10-6-4-3-5-7(10)8(9-11)12-2/h3-6H,1-2H3/p+1
        [TestMethod()]
        public void TestCUJYUB10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Double);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);

            string[] expected = {"S", "-O-", "CB", "CB", "CB", "CB", "CR", "CB", "C=N", "CR", "NPD+", "N=C", "HO", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CULGEV10
        /// </summary>
        // @cdk.inchi InChI=1S/C8H9NO3S/c1-13(10,11)9-8(12-9)7-5-3-2-4-6-7/h2-6,8H,1H3/t8-,9-/m0/s1
        [TestMethod()]
        public void TestCULGEV10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[12], container.Atoms[19], Single);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);

            string[] expected = {"SO2N", "NSO2", "O2S", "O2S", "OR", "CR3R", "CB", "CB", "CB", "CB", "CB", "CB", "CR",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CULHIA10
        /// </summary>
        // @cdk.inchi InChI=1S/C12H24N2O/c15-14(10-5-2-6-11-14)12-9-13-7-3-1-4-8-13/h1-12H2
        [TestMethod()]
        public void TestCULHIA10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[15], Single);
            container.AddBond(container.Atoms[0], container.Atoms[16], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[17], Single);
            container.AddBond(container.Atoms[1], container.Atoms[18], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[19], Single);
            container.AddBond(container.Atoms[2], container.Atoms[20], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[21], Single);
            container.AddBond(container.Atoms[3], container.Atoms[22], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[23], Single);
            container.AddBond(container.Atoms[4], container.Atoms[24], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[25], Single);
            container.AddBond(container.Atoms[6], container.Atoms[26], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[27], Single);
            container.AddBond(container.Atoms[7], container.Atoms[28], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[29], Single);
            container.AddBond(container.Atoms[9], container.Atoms[30], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[31], Single);
            container.AddBond(container.Atoms[10], container.Atoms[32], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[33], Single);
            container.AddBond(container.Atoms[11], container.Atoms[34], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[35], Single);
            container.AddBond(container.Atoms[12], container.Atoms[36], Single);
            container.AddBond(container.Atoms[13], container.Atoms[37], Single);
            container.AddBond(container.Atoms[13], container.Atoms[38], Single);

            string[] expected = {"CR", "CR", "CR", "CR", "CR", "NR", "CR", "CR", "N3OX", "CR", "CR", "CR", "CR", "CR",
                "OXN", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CULVEK
        /// </summary>
        // @cdk.inchi InChI=1S/C8H16ClO3P/c1-6(2)7-8(3,4)5-11-13(9,10)12-7/h6-7H,5H2,1-4H3/t7-,13+/m0/s1
        [TestMethod()]
        public void TestCULVEK()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[11], container.Atoms[24], Single);
            container.AddBond(container.Atoms[11], container.Atoms[25], Single);
            container.AddBond(container.Atoms[12], container.Atoms[26], Single);
            container.AddBond(container.Atoms[12], container.Atoms[27], Single);
            container.AddBond(container.Atoms[12], container.Atoms[28], Single);

            string[] expected = {"PO3", "CL", "OPO2", "OP", "OPO2", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CUNVAI
        /// </summary>
        // @cdk.inchi InChI=1S/C10H10N4O5/c1-6(7(2)15)11-12-9-4-3-8(13(16)17)5-10(9)14(18)19/h3-5,12H,1-2H3/b11-6+
        [TestMethod()]
        public void TestCUNVAI()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[19], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[20], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[21], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[9], container.Atoms[14], Double);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Double);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[17], container.Atoms[25], Single);
            container.AddBond(container.Atoms[17], container.Atoms[24], Single);
            container.AddBond(container.Atoms[17], container.Atoms[23], Single);
            container.AddBond(container.Atoms[18], container.Atoms[28], Single);
            container.AddBond(container.Atoms[18], container.Atoms[27], Single);
            container.AddBond(container.Atoms[18], container.Atoms[26], Single);

            string[] expected = {"CB", "CB", "CB", "CB", "CB", "CB", "C=N", "C=OR", "O=CR", "NO2", "NO2", "NC=C", "N=C",
                "O2N", "O2N", "O2N", "O2N", "CR", "CR", "HC", "HC", "HC", "HNCC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CUNVEM
        /// </summary>
        // @cdk.inchi InChI=1S/C10H14ClNO2S/c1-8(2,3)15-9(6-12)5-10(9,11)7(13)14-4/h5H2,1-4H3/t9-,10+/m1/s1
        [TestMethod()]
        public void TestCUNVEM()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Double);
            container.AddBond(container.Atoms[4], container.Atoms[8], Triple);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[27], Single);
            container.AddBond(container.Atoms[7], container.Atoms[28], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[14], Single);
            container.AddBond(container.Atoms[12], container.Atoms[18], Single);
            container.AddBond(container.Atoms[12], container.Atoms[19], Single);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[21], Single);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[25], Single);
            container.AddBond(container.Atoms[14], container.Atoms[26], Single);

            string[] expected = {"CL", "S", "OC=O", "O=CO", "NSP", "CR3R", "CR3R", "CR3R", "CSP", "COO", "CR", "CR", "CR",
                "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CURZIY
        /// </summary>
        // @cdk.inchi InChI=1S/C8H12O3S/c1-2-5-4-3-6(12(5,9)10)8-7(4)11-8/h4-8H,2-3H2,1H3/t4-,5-,6-,7-,8+/m1/s1
        [TestMethod()]
        public void TestCURZIY()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);

            string[] expected = {"SO2", "OR", "O2S", "O2S", "CR", "CR", "CR", "CR3R", "CR3R", "CR", "CR", "CR", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CUVFOO
        /// </summary>
        // @cdk.inchi InChI=1S/C6H11NO4S2/c7-4(6(10)11)3-13-12-2-1-5(8)9/h4H,1-3,7H2,(H,8,9)(H,10,11)/t4-/m0/s1
        [TestMethod()]
        public void TestCUVFOO()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);

            string[] expected = {"O2CM", "O2CM", "CO2M", "CR", "NR+", "CR", "S", "S", "CR", "CR", "COO", "O=CO", "OC=O",
                "HC", "HNR+", "HNR+", "HNR+", "HC", "HC", "HC", "HC", "HC", "HC", "HOCO"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CUVGAB
        /// </summary>
        // @cdk.inchi InChI=1S/C6H13O4P/c1-5(7)3-4-6(2,8)11(5,9)10/h7-8H,3-4H2,1-2H3,(H,9,10)/t5-,6-/m0/s1
        [TestMethod()]
        public void TestCUVGAB()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);

            string[] expected = {"PO2", "OPO", "OP", "OR", "OR", "CR", "CR", "CR", "CR", "CR", "CR", "HOP", "HOR", "HOR",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CUVJOS
        /// </summary>
        // @cdk.inchi InChI=1S/CH6N2/c1-3-2/h3H,2H2,1H3/p+1
        [TestMethod()]
        public void TestCUVJOS()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);

            string[] expected = { "NR", "NR+", "CR", "HNR", "HNR", "HNR+", "HNR+", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CUYRAP
        /// </summary>
        // @cdk.inchi InChI=1S/C12H12O4/c1-7(13)10-6-9-11(15-3)4-8(14-2)5-12(9)16-10/h4-6H,1-3H3
        [TestMethod()]
        public void TestCUYRAP()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[12], Double);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[19], Single);
            container.AddBond(container.Atoms[13], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);
            container.AddBond(container.Atoms[14], container.Atoms[21], Single);
            container.AddBond(container.Atoms[14], container.Atoms[22], Single);
            container.AddBond(container.Atoms[14], container.Atoms[26], Single);
            container.AddBond(container.Atoms[15], container.Atoms[23], Single);
            container.AddBond(container.Atoms[15], container.Atoms[24], Single);
            container.AddBond(container.Atoms[15], container.Atoms[27], Single);

            string[] expected = {"OFUR", "O=CR", "OC=C", "OC=C", "C5A", "C5B", "CB", "CB", "CB", "CB", "C5A", "C5B",
                "C=OR", "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CYANAM01
        /// </summary>
        // @cdk.inchi InChI=1S/CH2N2/c2-1-3/h2H2
        [TestMethod()]
        public void TestCYANAM01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Triple);

            string[] expected = { "NC%N", "NSP", "CSP", "HNC%", "HNC%" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CYGUAN01
        /// </summary>
        // @cdk.inchi InChI=1S/C11H14ClN5/c1-11(2)16-9(13)15-10(14)17(11)8-5-3-7(12)4-6-8/h3-6H,1-2H3,(H4,13,14,15,16)/p+1
        [TestMethod()]
        public void TestCYGUAN01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[14], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[23], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[22], Single);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[25], Single);
            container.AddBond(container.Atoms[9], container.Atoms[24], Single);
            container.AddBond(container.Atoms[10], container.Atoms[27], Single);
            container.AddBond(container.Atoms[10], container.Atoms[26], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Double);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[28], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[13], container.Atoms[29], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[15], container.Atoms[30], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[16], container.Atoms[31], Single);

            string[] expected = {"CL", "NCN+", "CR", "NC=N", "CGD", "N=C", "CNN+", "CR", "CR", "NC=N", "NCN+", "CB", "CB",
                "CB", "CB", "CB", "CB", "HC", "HC", "HC", "HC", "HC", "HC", "HNCN", "HNCN", "HNCN", "HNN+", "HNN+",
                "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DABHAP
        /// </summary>
        // @cdk.inchi InChI=1S/C12H14N4O3S/c1-8-14-11(7-12(15-8)19-2)16-20(17,18)10-5-3-9(13)4-6-10/h3-7H,13H2,1-2H3,(H,14,15,16)
        [TestMethod()]
        public void TestDABHAP()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[20], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[21], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[22], Single);
            container.AddBond(container.Atoms[5], container.Atoms[23], Single);
            container.AddBond(container.Atoms[6], container.Atoms[24], Single);
            container.AddBond(container.Atoms[6], container.Atoms[25], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[9], Double);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[26], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[17], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[19], Single);
            container.AddBond(container.Atoms[16], container.Atoms[27], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Single);
            container.AddBond(container.Atoms[18], container.Atoms[28], Single);
            container.AddBond(container.Atoms[18], container.Atoms[29], Single);
            container.AddBond(container.Atoms[18], container.Atoms[30], Single);
            container.AddBond(container.Atoms[19], container.Atoms[31], Single);
            container.AddBond(container.Atoms[19], container.Atoms[32], Single);
            container.AddBond(container.Atoms[19], container.Atoms[33], Single);

            string[] expected = {"CB", "CB", "CB", "CB", "CB", "CB", "NC=C", "SO2N", "O2S", "O2S", "N=C", "C=N", "C=C",
                "C=C", "N=C", "C=N", "NC=N", "OC=C", "CR", "CR", "HC", "HC", "HC", "HC", "HNCC", "HNCC", "HC", "HNCN",
                "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DABLIB
        /// </summary>
        // @cdk.inchi InChI=1S/C8H8F4/c9-7(10)3-1-4-6(2-5(3)7)8(4,11)12/h3-6H,1-2H2/t3-,4-,5+,6+
        [TestMethod()]
        public void TestDABLIB()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);
            container.AddBond(container.Atoms[13], container.Atoms[18], Single);
            container.AddBond(container.Atoms[13], container.Atoms[19], Single);

            string[] expected = {"CR3R", "CR", "CR3R", "F", "F", "HC", "HC", "CR3R", "CR3R", "HC", "CR", "HC", "CR3R",
                "CR3R", "HC", "HC", "HC", "HC", "F", "F"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DACSAB
        /// </summary>
        // @cdk.inchi InChI=1S/C11H15FNO2P/c1-10(11-6-3-2-4-7-11)13-8-5-9-15-16(13,12)14/h2-4,6-7,10H,5,8-9H2,1H3/t10-,16+/m0/s1
        [TestMethod()]
        public void TestDACSAB()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[6], container.Atoms[21], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[22], Single);
            container.AddBond(container.Atoms[9], container.Atoms[23], Single);
            container.AddBond(container.Atoms[9], container.Atoms[24], Single);
            container.AddBond(container.Atoms[9], container.Atoms[25], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[26], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[27], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[28], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[14], container.Atoms[29], Single);
            container.AddBond(container.Atoms[15], container.Atoms[30], Single);

            string[] expected = {"F", "OP", "OPO", "PO2", "NR", "CR", "CR", "CR", "CR", "CR", "CB", "CB", "CB", "CB", "CB",
                "CB", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DACYIP
        /// </summary>
        // @cdk.inchi InChI=1S/C10H22NPS/c1-8-9(2,3)12(13,11(6)7)10(8,4)5/h8H,1-7H3/t8-,12-
        [TestMethod()]
        public void TestDACYIP()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[21], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[22], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[21], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[23], Single);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[21], container.Atoms[24], Single);
            container.AddBond(container.Atoms[21], container.Atoms[25], Single);
            container.AddBond(container.Atoms[22], container.Atoms[26], Single);
            container.AddBond(container.Atoms[22], container.Atoms[27], Single);
            container.AddBond(container.Atoms[22], container.Atoms[28], Single);
            container.AddBond(container.Atoms[24], container.Atoms[29], Single);
            container.AddBond(container.Atoms[24], container.Atoms[30], Single);
            container.AddBond(container.Atoms[24], container.Atoms[31], Single);
            container.AddBond(container.Atoms[25], container.Atoms[32], Single);
            container.AddBond(container.Atoms[25], container.Atoms[33], Single);
            container.AddBond(container.Atoms[25], container.Atoms[34], Single);

            string[] expected = {"S-P", "PTET", "NR", "CR4R", "CR4R", "CR", "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "CR4R", "CR", "HC", "CR", "CR", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DADDAN
        /// </summary>
        // @cdk.inchi InChI=1S/C12H15NO4/c14-10-1-2-11(15)17-9-4-6-13-5-3-8(7-16-10)12(9)13/h3,9,12H,1-2,4-7H2/t9-,12-/m1/s1
        [TestMethod()]
        public void TestDADDAN()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[0], container.Atoms[13], Single);
            container.AddBond(container.Atoms[1], container.Atoms[13], Double);
            container.AddBond(container.Atoms[2], container.Atoms[16], Double);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[7], container.Atoms[21], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[22], Single);
            container.AddBond(container.Atoms[8], container.Atoms[23], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[24], Single);
            container.AddBond(container.Atoms[9], container.Atoms[25], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[12], container.Atoms[26], Single);
            container.AddBond(container.Atoms[12], container.Atoms[27], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[28], Single);
            container.AddBond(container.Atoms[14], container.Atoms[29], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[30], Single);
            container.AddBond(container.Atoms[15], container.Atoms[31], Single);

            string[] expected = {"OC=O", "O=CO", "O=CO", "OC=O", "NR", "C=C", "C=C", "CR", "CR", "CR", "CR", "CR", "CR",
                "COO", "CR", "CR", "COO", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DADLAV
        /// </summary>
        // @cdk.inchi InChI=1S/C7H8N2O2/c1-3-5(4(2)10)6(8)7(11)9-3/h1,8H2,2H3,(H,9,11)
        [TestMethod()]
        public void TestDADLAV()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Double);
            container.AddBond(container.Atoms[1], container.Atoms[8], Double);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Double);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);

            string[] expected = {"O=CN", "O=CR", "NC=O", "NC=C", "C=ON", "C=C", "C=C", "C=C", "C=OR", "CR", "C=C", "HNCO",
                "HNCC", "HNCC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DADLEZ
        /// </summary>
        // @cdk.inchi InChI=1S/C7H8N2O2/c1-3(10)5-4(2)11-7(9)6(5)8/h9H,2,8H2,1H3/b9-7-
        [TestMethod()]
        public void TestDADLEZ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Double);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);

            string[] expected = {"OC=C", "C=N", "C=C", "C=C", "C=C", "N=C", "NC=C", "C=OR", "O=CR", "C=C", "CR", "HC",
                "HC", "HC", "HNCC", "HNCC", "HC", "HC", "HN=C"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DAFKIE
        /// </summary>
        // @cdk.inchi InChI=1S/C8H11N3/c1-7-3-5-8(6-4-7)10-11-9-2/h3-6H,1-2H3,(H,9,10)
        [TestMethod()]
        public void TestDAFKIE()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);

            string[] expected = {"CB", "CB", "CB", "CB", "CB", "CB", "CR", "CR", "N=N", "N=N", "NN=N", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HNNN"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DAFPUV
        /// </summary>
        // @cdk.inchi InChI=1S/C2H2N4O3/c3-1-2(6(7)8)5-9-4-1/h(H2,3,4)
        [TestMethod()]
        public void TestDAFPUV()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Double);
            container.AddBond(container.Atoms[3], container.Atoms[7], Double);
            container.AddBond(container.Atoms[4], container.Atoms[8], Double);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);

            string[] expected = { "OFUR", "O2N", "O2N", "N5A", "N5A", "NO2", "NC=N", "C5B", "C5B", "HNCN", "HNCN" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DAGTUA
        /// </summary>
        // @cdk.inchi InChI=1S/C4H12N2O6S2/c1-11-5(13(3,7)8)6(12-2)14(4,9)10/h1-4H3
        [TestMethod()]
        public void TestDAGTUA()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[0], container.Atoms[6], Double);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Double);
            container.AddBond(container.Atoms[1], container.Atoms[7], Double);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[10], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[13], container.Atoms[24], Single);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);

            string[] expected = {"SO2N", "SO2N", "OR", "O2S", "OR", "O2S", "O2S", "O2S", "NSO2", "NSO2", "CR", "CR", "CR",
                "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DAHBAP
        /// </summary>
        // @cdk.inchi InChI=1S/C8H10N2O3/c1-9(2)8(12)6-4-3-5-7(11)10(6)13/h3-5,13H,1-2H3
        [TestMethod()]
        public void TestDAHBAP()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[16], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Double);
            container.AddBond(container.Atoms[2], container.Atoms[10], Double);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);

            string[] expected = {"-O-", "O=CN", "O=CN", "NC=O", "NC=O", "C=C", "C=C", "C=C", "C=C", "C=ON", "C=ON", "CR",
                "CR", "HC", "HC", "HC", "HO", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DAHNAB
        /// </summary>
        // @cdk.inchi InChI=1S/C6H16Cl2Si2/c1-9(2,7)5-6-10(3,4)8/h5-6H2,1-4H3
        [TestMethod()]
        public void TestDAHNAB()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Si", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("Si", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Single);
            container.AddBond(container.Atoms[13], container.Atoms[16], Single);
            container.AddBond(container.Atoms[14], container.Atoms[17], Single);
            container.AddBond(container.Atoms[14], container.Atoms[18], Single);
            container.AddBond(container.Atoms[14], container.Atoms[19], Single);
            container.AddBond(container.Atoms[18], container.Atoms[20], Single);
            container.AddBond(container.Atoms[18], container.Atoms[21], Single);
            container.AddBond(container.Atoms[18], container.Atoms[22], Single);
            container.AddBond(container.Atoms[19], container.Atoms[23], Single);
            container.AddBond(container.Atoms[19], container.Atoms[24], Single);
            container.AddBond(container.Atoms[19], container.Atoms[25], Single);

            string[] expected = {"SI", "CL", "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "CR", "SI",
                "HC", "HC", "CL", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DAJXER
        /// </summary>
        // @cdk.inchi InChI=1S/C11H14N4O2/c1-11-7-6-8(11)15(10(17)13-9(11)16)4-2-3-14(6)5-12-7/h5-8H,2-4H2,1H3,(H,13,16,17)/t6-,7+,8-,11+/m0/s1
        [TestMethod()]
        public void TestDAJXER()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[14], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[22], Single);
            container.AddBond(container.Atoms[8], container.Atoms[23], Single);
            container.AddBond(container.Atoms[8], container.Atoms[24], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[21], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[25], Single);
            container.AddBond(container.Atoms[14], container.Atoms[26], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[27], Single);
            container.AddBond(container.Atoms[15], container.Atoms[28], Single);
            container.AddBond(container.Atoms[16], container.Atoms[29], Single);
            container.AddBond(container.Atoms[16], container.Atoms[30], Single);

            string[] expected = {"NC=O", "CONN", "O=CN", "NC=O", "C=ON", "O=CN", "CR4R", "CR4R", "CR", "NC=N", "C=N",
                "N=C", "CR4R", "CR4R", "CR", "CR", "CR", "HNCO", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DAKBAS
        /// </summary>
        // @cdk.inchi InChI=1S/C15H13N3O3S/c1-8-13(9(2)19)14(11(7-16)15(22)17-8)10-5-3-4-6-12(10)18(20)21/h3-6,14,17,22H,1-2H3/p-1/t14-/m1/s1
        [TestMethod()]
        public void TestDAKBAS()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[20], Double);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Double);
            container.AddBond(container.Atoms[4], container.Atoms[22], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Triple);
            container.AddBond(container.Atoms[6], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Double);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[10], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[19], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[15], container.Atoms[27], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[16], container.Atoms[28], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Double);
            container.AddBond(container.Atoms[17], container.Atoms[29], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Single);
            container.AddBond(container.Atoms[18], container.Atoms[30], Single);
            container.AddBond(container.Atoms[18], container.Atoms[19], Double);
            container.AddBond(container.Atoms[20], container.Atoms[21], Single);
            container.AddBond(container.Atoms[21], container.Atoms[33], Single);
            container.AddBond(container.Atoms[21], container.Atoms[32], Single);
            container.AddBond(container.Atoms[21], container.Atoms[31], Single);

            string[] expected = {"SM", "O=CR", "O2N", "O2N", "NC=C", "NSP", "NO2", "C=C", "C=C", "C=C", "CR", "C=C", "CSP",
                "CR", "CB", "CB", "CB", "CB", "CB", "CB", "C=OR", "CR", "HNCC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DAKCEX
        /// </summary>
        // @cdk.inchi InChI=1S/C8H4N8/c9-13-10-7-5-3-1-2-4-6(5)8-11-14-15-16(8)12-7/h1-4H
        [TestMethod()]
        public void TestDAKCEX()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", -1));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[8], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[16], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);

            string[] expected = {"N5B", "N5B", "N5A", "NPYL", "N=C", "C=N", "CB", "CB", "C5A", "CB", "CB", "CB", "CB",
                "N=N", "=N=", "NAZT", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DAKDOI
        /// </summary>
        // @cdk.inchi InChI=1S/C16H11ClN4O3S/c17-8-1-3-10-11(5-8)13(7-15(22)23)21(19-16(10)24)9-2-4-14-12(6-9)18-20-25-14/h1-6,13H,7H2,(H,19,24)(H,22,23)/t13-/m0/s1
        [TestMethod()]
        public void TestDAKDOI()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[17], Single);
            container.AddBond(container.Atoms[0], container.Atoms[21], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[25], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[26], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[27], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[28], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[29], Single);
            container.AddBond(container.Atoms[8], container.Atoms[30], Single);
            container.AddBond(container.Atoms[9], container.Atoms[22], Double);
            container.AddBond(container.Atoms[9], container.Atoms[23], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Double);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[31], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[32], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[13], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[19], Single);
            container.AddBond(container.Atoms[15], container.Atoms[33], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Single);
            container.AddBond(container.Atoms[17], container.Atoms[34], Single);
            container.AddBond(container.Atoms[19], container.Atoms[20], Double);
            container.AddBond(container.Atoms[20], container.Atoms[24], Single);
            container.AddBond(container.Atoms[23], container.Atoms[35], Single);

            string[] expected = {"C=ON", "CB", "CB", "CB", "CB", "CB", "CB", "CR", "CR", "COO", "CB", "CB", "CB", "C5A",
                "C5B", "CB", "CL", "NC=O", "NC=C", "N5B", "N5A", "O=CN", "O=CO", "OC=O", "STHI", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HNCO", "HOCO"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DANCUQ
        /// </summary>
        // @cdk.inchi InChI=1S/C4H8S4Si/c1-2-6-9(5-1)7-3-4-8-9/h1-4H2
        [TestMethod()]
        public void TestDANCUQ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Si", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[14], Single);
            container.AddBond(container.Atoms[12], container.Atoms[15], Single);
            container.AddBond(container.Atoms[12], container.Atoms[16], Single);

            string[] expected = {"SI", "S", "S", "CR", "CR", "HC", "HC", "HC", "HC", "S", "S", "CR", "CR", "HC", "HC",
                "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DAPSUO03
        /// </summary>
        // @cdk.inchi InChI=1S/C12H12N2O2S/c13-9-1-5-11(6-2-9)17(15,16)12-7-3-10(14)4-8-12/h1-8H,13-14H2
        [TestMethod()]
        public void TestDAPSUO03()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[3], container.Atoms[26], Single);
            container.AddBond(container.Atoms[3], container.Atoms[25], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[28], Single);
            container.AddBond(container.Atoms[4], container.Atoms[27], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[15], container.Atoms[23], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Double);
            container.AddBond(container.Atoms[16], container.Atoms[24], Single);

            string[] expected = {"SO2", "O2S", "O2S", "NC=C", "NC=C", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB",
                "CB", "CB", "CB", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HNCC", "HNCC", "HNCC", "HNCC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DARDEF
        /// </summary>
        // @cdk.inchi InChI=1S/C10H14N4S2/c1-6-8(13-5-12-6)9-14-7(3-15-9)4-16-10(14)11-2/h5,7,9H,3-4H2,1-2H3,(H,12,13)/b11-10-/t7-,9-/m0/s1
        [TestMethod()]
        public void TestDARDEF()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[16], Single);
            container.AddBond(container.Atoms[0], container.Atoms[17], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[7], container.Atoms[21], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[9], container.Atoms[23], Single);
            container.AddBond(container.Atoms[9], container.Atoms[24], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[14], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[15], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);
            container.AddBond(container.Atoms[15], container.Atoms[27], Single);
            container.AddBond(container.Atoms[15], container.Atoms[28], Single);
            container.AddBond(container.Atoms[15], container.Atoms[29], Single);

            string[] expected = {"CR", "S", "C=N", "NC=N", "CR", "S", "CR", "CR", "N=C", "CR", "C5B", "C5A", "NPYL", "C5A",
                "N5B", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HPYL", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DARPOB10
        /// </summary>
        // @cdk.inchi InChI=1S/C10H25N2PSi/c1-8-12(9-2)10(11(3)4)13-14(5,6)7/h8-9H2,1-7H3
        [TestMethod()]
        public void TestDARPOB10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("Si", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[22], Single);
            container.AddBond(container.Atoms[6], container.Atoms[21], Single);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[25], Single);
            container.AddBond(container.Atoms[8], container.Atoms[24], Single);
            container.AddBond(container.Atoms[8], container.Atoms[23], Single);
            container.AddBond(container.Atoms[9], container.Atoms[38], Single);
            container.AddBond(container.Atoms[9], container.Atoms[27], Single);
            container.AddBond(container.Atoms[9], container.Atoms[26], Single);
            container.AddBond(container.Atoms[10], container.Atoms[29], Single);
            container.AddBond(container.Atoms[10], container.Atoms[28], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[32], Single);
            container.AddBond(container.Atoms[11], container.Atoms[31], Single);
            container.AddBond(container.Atoms[11], container.Atoms[30], Single);
            container.AddBond(container.Atoms[12], container.Atoms[34], Single);
            container.AddBond(container.Atoms[12], container.Atoms[33], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[37], Single);
            container.AddBond(container.Atoms[13], container.Atoms[36], Single);
            container.AddBond(container.Atoms[13], container.Atoms[35], Single);

            string[] expected = {"-P=C", "SI", "NC=P", "NC=P", "CR", "CR", "CR", "C=P", "CR", "CR", "CR", "CR", "CR", "CR",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DARXID
        /// </summary>
        // @cdk.inchi InChI=1S/C11H12N2S/c1-9-8-11(14)13(12(9)2)10-6-4-3-5-7-10/h3-8H,1-2H3
        [TestMethod()]
        public void TestDARXID()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);

            string[] expected = {"S=C", "NC=S", "NC=C", "C=SN", "C=C", "C=C", "CR", "CR", "CB", "CB", "CB", "CB", "CB",
                "CB", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DARZEB
        /// </summary>
        // @cdk.inchi InChI=1S/C9H11N3O/c1-2-12-9(13)7-5-3-4-6-8(7)10-11-12/h3-6,9,13H,2H2,1H3/t9-/m0/s1
        [TestMethod()]
        public void TestDARZEB()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[18], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[20], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[21], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[22], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[23], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);
            container.AddBond(container.Atoms[10], container.Atoms[14], Single);
            container.AddBond(container.Atoms[11], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[12], container.Atoms[19], Single);

            string[] expected = {"N=N", "N=N", "NN=N", "CR", "CB", "CB", "CB", "CB", "CB", "CB", "CR", "CR", "OR", "HC",
                "HC", "HC", "HC", "HC", "HC", "HOR", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DAVWEC
        /// </summary>
        // @cdk.inchi InChI=1S/C9H9Br2N3O7/c1-7(12(16)17)4(10)5(11)8(2,13(18)19)9(3,6(7)15)14(20)21/h1-3H3/t7-,8+,9-/m1/s1
        [TestMethod()]
        public void TestDAVWEC()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Br", 0));
            container.Atoms.Add(NewAtm("Br", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[14], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[8], container.Atoms[22], Single);
            container.AddBond(container.Atoms[8], container.Atoms[23], Single);
            container.AddBond(container.Atoms[9], container.Atoms[24], Single);
            container.AddBond(container.Atoms[9], container.Atoms[25], Single);
            container.AddBond(container.Atoms[9], container.Atoms[26], Single);
            container.AddBond(container.Atoms[10], container.Atoms[27], Single);
            container.AddBond(container.Atoms[10], container.Atoms[28], Single);
            container.AddBond(container.Atoms[10], container.Atoms[29], Single);
            container.AddBond(container.Atoms[11], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Double);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);
            container.AddBond(container.Atoms[12], container.Atoms[18], Double);
            container.AddBond(container.Atoms[13], container.Atoms[19], Single);
            container.AddBond(container.Atoms[13], container.Atoms[20], Double);

            string[] expected = {"BR", "BR", "C=OR", "CR", "C=C", "C=C", "CR", "CR", "CR", "CR", "CR", "NO2", "NO2", "NO2",
                "O=CR", "O2N", "O2N", "O2N", "O2N", "O2N", "O2N", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DAVXED
        /// </summary>
        // @cdk.inchi InChI=1S/C10H12N4O9/c1-5-6(11(16)17)9(3,13(20)21)10(4,14(22)23)7(15)8(5,2)12(18)19/h1-4H3/t8-,9+,10+/m0/s1
        [TestMethod()]
        public void TestDAVXED()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[14], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[32], Single);
            container.AddBond(container.Atoms[6], container.Atoms[33], Single);
            container.AddBond(container.Atoms[6], container.Atoms[34], Single);
            container.AddBond(container.Atoms[7], container.Atoms[29], Single);
            container.AddBond(container.Atoms[7], container.Atoms[30], Single);
            container.AddBond(container.Atoms[7], container.Atoms[31], Single);
            container.AddBond(container.Atoms[8], container.Atoms[23], Single);
            container.AddBond(container.Atoms[8], container.Atoms[24], Single);
            container.AddBond(container.Atoms[8], container.Atoms[25], Single);
            container.AddBond(container.Atoms[9], container.Atoms[26], Single);
            container.AddBond(container.Atoms[9], container.Atoms[27], Single);
            container.AddBond(container.Atoms[9], container.Atoms[28], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Double);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Double);
            container.AddBond(container.Atoms[12], container.Atoms[19], Single);
            container.AddBond(container.Atoms[12], container.Atoms[20], Double);
            container.AddBond(container.Atoms[13], container.Atoms[21], Single);
            container.AddBond(container.Atoms[13], container.Atoms[22], Double);

            string[] expected = {"C=OR", "CR", "C=C", "C=C", "CR", "CR", "CR", "CR", "CR", "CR", "NO2", "NO2", "NO2",
                "NO2", "O=CR", "O2N", "O2N", "O2N", "O2N", "O2N", "O2N", "O2N", "O2N", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DAWXII
        /// </summary>
        // @cdk.inchi InChI=1S/C6H7F4N3O/c1-11-3-4(13(14)12-2)6(9,10)5(3,7)8/h11H,1-2H3/b13-12-
        [TestMethod()]
        public void TestDAWXII()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);

            string[] expected = {"CE4R", "CE4R", "CR4R", "CR4R", "NC=C", "CR", "N2OX", "N=N", "CR", "OXN", "F", "F", "F",
                "F", "HNCC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DAWYUV
        /// </summary>
        // @cdk.inchi InChI=1S/C9H5ClO2/c10-7-5-9(11)12-8-4-2-1-3-6(7)8/h1-5H
        [TestMethod()]
        public void TestDAWYUV()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);

            string[] expected = {"CL", "OC=O", "COO", "C=C", "C=C", "CB", "CB", "CB", "CB", "CB", "CB", "O=CO", "HC", "HC",
                "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DAYWEF
        /// </summary>
        // @cdk.inchi InChI=1S/C6H12O7P2/c7-14(9-3-1-4-10-14)13-15(8)11-5-2-6-12-15/h1-6H2
        [TestMethod()]
        public void TestDAYWEF()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Double);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[13], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[25], Single);
            container.AddBond(container.Atoms[14], container.Atoms[26], Single);

            string[] expected = {"PO4", "PO4", "OPO3", "OPO3", "OPO3", "OP", "CR", "CR", "CR", "OPO3", "OPO3", "OP", "CR",
                "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DAZVEF
        /// </summary>
        // @cdk.inchi InChI=1S/C12H12O3/c13-7-10(1-2-10)8(14)12(5-6-12)9(15)11(7)3-4-11/h1-6H2
        [TestMethod()]
        public void TestDAZVEF()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[13], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[25], Single);
            container.AddBond(container.Atoms[14], container.Atoms[26], Single);

            string[] expected = {"C=OR", "O=CR", "CR3R", "CR3R", "CR3R", "C=OR", "O=CR", "CR3R", "CR3R", "CR3R", "C=OR",
                "O=CR", "CR3R", "CR3R", "CR3R", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DEBMOM01
        /// </summary>
        // @cdk.inchi InChI=1S/C4H4O4/c5-3(6)1-2-4(7)8/h1-2H,(H,5,6)(H,7,8)/p-1/b2-1-
        [TestMethod()]
        public void TestDEBMOM01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Double);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);

            string[] expected = { "O=CO", "OC=O", "O2CM", "O2CM", "COO", "C=C", "C=C", "CO2M", "HOCO", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DECJAW
        /// </summary>
        // @cdk.inchi InChI=1S/C7H8N2O4/c10-6-3-1-2-8-4(7(11)12)5(3)13-9-6/h4,8H,1-2H2,(H,9,10)(H,11,12)/t4-/m0/s1
        [TestMethod()]
        public void TestDECJAW()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);

            string[] expected = {"OFUR", "N5A", "C5B", "C5B", "CR", "CR", "NR+", "CR", "C5A", "CO2M", "O2CM", "O2CM",
                "OC=N", "HC", "HC", "HC", "HC", "HNR+", "HNR+", "HC", "HOCN"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DECKUR
        /// </summary>
        // @cdk.inchi InChI=1S/C10H15N3O2/c1-12-6-7(9(11)14)10(15)13-5-3-2-4-8(12)13/h6,8H,2-5H2,1H3,(H2,11,14)/t8-/m1/s1
        [TestMethod()]
        public void TestDECKUR()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[14], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[15], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[7], container.Atoms[21], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[22], Single);
            container.AddBond(container.Atoms[8], container.Atoms[23], Single);
            container.AddBond(container.Atoms[9], container.Atoms[24], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[12], container.Atoms[26], Single);
            container.AddBond(container.Atoms[14], container.Atoms[27], Single);
            container.AddBond(container.Atoms[14], container.Atoms[28], Single);
            container.AddBond(container.Atoms[14], container.Atoms[29], Single);

            string[] expected = {"NC=C", "C=C", "C=C", "C=ON", "NC=O", "CR", "CR", "CR", "CR", "CR", "C=ON", "O=CN",
                "NC=O", "O=CN", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HNCO", "HNCO", "HC",
                "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DECRIM
        /// </summary>
        // @cdk.inchi InChI=1S/C10H13N2O/c1-11(2)10-12(3)8-6-4-5-7-9(8)13-10/h4-7H,1-3H3/q+1
        [TestMethod()]
        public void TestDECRIM()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Double);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[25], Single);
            container.AddBond(container.Atoms[10], container.Atoms[24], Single);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[18], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);

            string[] expected = {"OFUR", "NIM+", "NCN+", "CIM+", "C5A", "CB", "CB", "CB", "CB", "C5B", "CR", "CR", "CR",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DEDCIY
        /// </summary>
        // @cdk.inchi InChI=1S/C9H6Cl3NO/c1-9(12)5-2-4(10)3-6(11)7(5)13-8(9)14/h2-3H,1H3,(H,13,14)/t9-/m0/s1
        [TestMethod()]
        public void TestDEDCIY()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Double);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[12], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[17], Single);
            container.AddBond(container.Atoms[13], container.Atoms[18], Single);
            container.AddBond(container.Atoms[13], container.Atoms[19], Single);

            string[] expected = {"CL", "CL", "CL", "O=CN", "NC=O", "CB", "CB", "CB", "CB", "CB", "CB", "C=ON", "CR", "CR",
                "HC", "HC", "HNCO", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DEDSIO
        /// </summary>
        // @cdk.inchi InChI=1S/C11H14INO3/c1-11(2,3)16-10(15)4-5-13-8(7-12)6-9(13)14/h8H,6-7H2,1-3H3/t8-/m1/s1
        [TestMethod()]
        public void TestDEDSIO()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("I", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Triple);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[12], container.Atoms[15], Single);
            container.AddBond(container.Atoms[13], container.Atoms[21], Single);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[25], Single);
            container.AddBond(container.Atoms[14], container.Atoms[26], Single);
            container.AddBond(container.Atoms[15], container.Atoms[27], Single);
            container.AddBond(container.Atoms[15], container.Atoms[28], Single);
            container.AddBond(container.Atoms[15], container.Atoms[29], Single);

            string[] expected = {"I", "NC=O", "O=CN", "C=ON", "CR4R", "CR4R", "CR", "CSP", "CSP", "COO", "O=CO", "OC=O",
                "CR", "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DEFGIE
        /// </summary>
        // @cdk.inchi InChI=1S/C8H10N4O2/c1-12(14)11-10-7-4-2-6(3-5-7)8(9)13/h2-5,10H,1H3,(H2,9,13)/b12-11-
        [TestMethod()]
        public void TestDEFGIE()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[13], Double);
            container.AddBond(container.Atoms[2], container.Atoms[14], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);

            string[] expected = {"OXN", "O=CN", "NC=C", "N=N", "N2OX", "NC=O", "CB", "CB", "CB", "CB", "CB", "CB", "CR",
                "C=ON", "HNCC", "HC", "HC", "HNCO", "HNCO", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DEFLEF
        /// </summary>
        // @cdk.inchi InChI=1S/C8H8N6O8/c1-3(15)9-5-6(12(7(9)17)14(21)22)10(4(2)16)8(18)11(5)13(19)20/h5-6H,1-2H3/t5-,6-/m1/s1
        [TestMethod()]
        public void TestDEFLEF()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[23], Single);
            container.AddBond(container.Atoms[0], container.Atoms[18], Single);
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Double);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[29], Single);
            container.AddBond(container.Atoms[9], container.Atoms[28], Single);
            container.AddBond(container.Atoms[9], container.Atoms[27], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Double);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[16], container.Atoms[18], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Double);
            container.AddBond(container.Atoms[18], container.Atoms[19], Single);
            container.AddBond(container.Atoms[19], container.Atoms[21], Double);
            container.AddBond(container.Atoms[19], container.Atoms[20], Single);
            container.AddBond(container.Atoms[20], container.Atoms[26], Single);
            container.AddBond(container.Atoms[20], container.Atoms[25], Single);
            container.AddBond(container.Atoms[20], container.Atoms[24], Single);

            string[] expected = {"CR", "NC=O", "NO2", "O2N", "O2N", "CONN", "O=CN", "NC=O", "C=ON", "CR", "O=CN", "CR",
                "NC=O", "NO2", "O2N", "O2N", "CONN", "O=CN", "NC=O", "C=ON", "CR", "O=CN", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DEFPUZ
        /// </summary>
        // @cdk.inchi InChI=1S/C4H8N4S/c1-6-4-7-9-3(5)8(4)2/h5H,1-2H3,(H,6,7)/p+1
        [TestMethod()]
        public void TestDEFPUZ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Double);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Double);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);

            string[] expected = {"STHI", "N5A", "NIM+", "NC=N", "NCN+", "C5B", "CIM+", "CR", "CR", "HNCN", "HNN+", "HNN+",
                "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DEFTUD
        /// </summary>
        // @cdk.inchi InChI=1S/C10H11N5O/c1-14(2)9-11-10(16)15(13-12-9)8-6-4-3-5-7-8/h3-7H,1-2H3
        [TestMethod()]
        public void TestDEFTUD()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[23], Single);
            container.AddBond(container.Atoms[5], container.Atoms[22], Single);
            container.AddBond(container.Atoms[5], container.Atoms[21], Single);
            container.AddBond(container.Atoms[6], container.Atoms[26], Single);
            container.AddBond(container.Atoms[6], container.Atoms[25], Single);
            container.AddBond(container.Atoms[6], container.Atoms[24], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[13], container.Atoms[18], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[19], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[15], container.Atoms[20], Single);

            string[] expected = {"NC=O", "N=N", "N=N", "C=N", "NC=N", "CR", "CR", "N=C", "CONN", "O=CN", "CB", "CB", "CB",
                "CB", "CB", "CB", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DEFVAL
        /// </summary>
        // @cdk.inchi InChI=1S/C11H13N5O/c1-8-4-6-9(7-5-8)13-16-11(17)12-10(14-16)15(2)3/h4-7H,1-3H3/p+1
        [TestMethod()]
        public void TestDEFVAL()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[26], Single);
            container.AddBond(container.Atoms[7], container.Atoms[25], Single);
            container.AddBond(container.Atoms[7], container.Atoms[24], Single);
            container.AddBond(container.Atoms[8], container.Atoms[29], Single);
            container.AddBond(container.Atoms[8], container.Atoms[28], Single);
            container.AddBond(container.Atoms[8], container.Atoms[27], Single);
            container.AddBond(container.Atoms[9], container.Atoms[30], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Double);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[12], container.Atoms[18], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[16], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[14], container.Atoms[19], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[15], container.Atoms[20], Single);
            container.AddBond(container.Atoms[16], container.Atoms[23], Single);
            container.AddBond(container.Atoms[16], container.Atoms[22], Single);
            container.AddBond(container.Atoms[16], container.Atoms[21], Single);

            string[] expected = {"N=N", "N+=N", "CONN", "O=CN", "N=C", "C=N", "NC=N", "CR", "CR", "NC=C", "CB", "CB", "CB",
                "CB", "CB", "CB", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HNCC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DEFYUI
        /// </summary>
        // @cdk.inchi InChI=1S/C6H9NS2/c7-5-3-1-2-4(5)6(8)9/h1-3,7H2,(H,8,9)
        [TestMethod()]
        public void TestDEFYUI()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);

            string[] expected = {"S=C", "S", "NC=C", "CSS", "C=C", "C=C", "CR", "CR", "CR", "HS", "HNCC", "HNCC", "HC",
                "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DEGLUW
        /// </summary>
        // @cdk.inchi InChI=1S/C3H7ClN2/c1-6(2)3(4)5/h5H,1-2H3/p+1
        [TestMethod()]
        public void TestDEGLUW()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);

            string[] expected = {"CL", "NCN+", "NCN+", "CNN+", "CR", "CR", "HNN+", "HNN+", "HC", "HC", "HC", "HC", "HC",
                "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DEGRIQ
        /// </summary>
        // @cdk.inchi InChI=1S/C17H18N2/c1-12-3-5-16-14(7-12)9-18-11-19(16)10-15-8-13(2)4-6-17(15)18/h3-8H,9-11H2,1-2H3
        [TestMethod()]
        public void TestDEGRIQ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[13], Single);
            container.AddBond(container.Atoms[0], container.Atoms[19], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[15], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[20], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[21], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Double);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[22], Single);
            container.AddBond(container.Atoms[5], container.Atoms[23], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[24], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[25], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[26], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[18], Single);
            container.AddBond(container.Atoms[12], container.Atoms[27], Single);
            container.AddBond(container.Atoms[12], container.Atoms[28], Single);
            container.AddBond(container.Atoms[14], container.Atoms[17], Single);
            container.AddBond(container.Atoms[14], container.Atoms[18], Single);
            container.AddBond(container.Atoms[14], container.Atoms[29], Single);
            container.AddBond(container.Atoms[14], container.Atoms[30], Single);
            container.AddBond(container.Atoms[15], container.Atoms[31], Single);
            container.AddBond(container.Atoms[15], container.Atoms[32], Single);
            container.AddBond(container.Atoms[15], container.Atoms[33], Single);
            container.AddBond(container.Atoms[16], container.Atoms[34], Single);
            container.AddBond(container.Atoms[16], container.Atoms[35], Single);
            container.AddBond(container.Atoms[16], container.Atoms[36], Single);

            string[] expected = {"CB", "CB", "CB", "CB", "CB", "CR", "CB", "CB", "CB", "CB", "CB", "CB", "CR", "CB", "CR",
                "CR", "CR", "NC=C", "NC=C", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DEKRUG
        /// </summary>
        // @cdk.inchi InChI=1S/C6H5N3O5/c1-9-4(12)7-2(10)6(9)3(11)8-5(13)14-6/h1H3,(H2,7,8,10,11,12,13)/p-1/t6-/m1/s1
        [TestMethod()]
        public void TestDEKRUG()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[16], Single);
            container.AddBond(container.Atoms[1], container.Atoms[15], Single);
            container.AddBond(container.Atoms[1], container.Atoms[14], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);

            string[] expected = {"NC=O", "CR", "CONN", "O=CN", "NC=O", "C=ON", "O=CN", "CR", "C=ON", "O=CN", "NM", "C=ON",
                "O=CN", "OC=O", "HC", "HC", "HC", "HNCO"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DEMBIG
        /// </summary>
        // @cdk.inchi InChI=1S/C7H7ClN6O2/c8-1-2-14-7(16)13-3-10-4(5(9)15)6(13)11-12-14/h3H,1-2H2,(H2,9,15)
        [TestMethod()]
        public void TestDEMBIG()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[20], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Double);
            container.AddBond(container.Atoms[14], container.Atoms[21], Single);
            container.AddBond(container.Atoms[14], container.Atoms[22], Single);

            string[] expected = {"N=N", "N=N", "NC=O", "CONN", "NPYL", "C5A", "N5B", "C5B", "C5A", "CR", "CR", "CL",
                "O=CN", "C=ON", "NC=O", "O=CN", "HC", "HC", "HC", "HC", "HC", "HNCO", "HNCO"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DEPKEO
        /// </summary>
        // @cdk.inchi InChI=1S/C9H5N3OS/c1-2-6-8(11-3-1)14-9-7(13-6)10-4-5-12-9/h1-5H
        [TestMethod()]
        public void TestDEPKEO()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[13], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);

            string[] expected = {"S", "CB", "NPYD", "CB", "CB", "NPYD", "CB", "OC=C", "CB", "CB", "CB", "CB", "NPYD", "CB",
                "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DERZUV
        /// </summary>
        // @cdk.inchi InChI=1S/C9H13F3N4O2/c1-8(2)6(15(3)4)16(7(18)13-8)14-5(17)9(10,11)12/h1-4H3,(H-,13,14,17,18)
        [TestMethod()]
        public void TestDERZUV()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[18], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);
            container.AddBond(container.Atoms[9], container.Atoms[12], Single);
            container.AddBond(container.Atoms[13], container.Atoms[19], Single);
            container.AddBond(container.Atoms[13], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[21], Single);
            container.AddBond(container.Atoms[14], container.Atoms[22], Single);
            container.AddBond(container.Atoms[14], container.Atoms[23], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[17], Single);
            container.AddBond(container.Atoms[16], container.Atoms[25], Single);
            container.AddBond(container.Atoms[16], container.Atoms[26], Single);
            container.AddBond(container.Atoms[16], container.Atoms[27], Single);
            container.AddBond(container.Atoms[17], container.Atoms[28], Single);
            container.AddBond(container.Atoms[17], container.Atoms[29], Single);
            container.AddBond(container.Atoms[17], container.Atoms[30], Single);

            string[] expected = {"NCN+", "CONN", "O=CN", "NC=O", "CR", "CNN+", "N=C", "C=N", "OM2", "CR", "F", "F", "F",
                "CR", "CR", "NCN+", "CR", "CR", "HNCO", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DESWUT
        /// </summary>
        // @cdk.inchi InChI=1S/C6H8N2O2S/c1-2-10-6(9)4-5(7)11-3-8-4/h3H,2,7H2,1H3
        [TestMethod()]
        public void TestDESWUT()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[18], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);

            string[] expected = {"STHI", "C5A", "N5B", "C5B", "C5A", "NC=C", "COO", "O=CO", "OC=O", "CR", "CR", "HNCC",
                "HNCC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DESYOP
        /// </summary>
        // @cdk.inchi InChI=1S/C3H4N2/c1-3(5)2-4/h1,5H2
        [TestMethod()]
        public void TestDESYOP()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Triple);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);

            string[] expected = { "NSP", "NC=C", "CSP", "C=C", "C=C", "HNCC", "HNCC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DEWHOC
        /// </summary>
        // @cdk.inchi InChI=1S/C12H10N2O5/c1-2-14-7-4-9-8(18-5-19-9)3-6(7)11(15)10(13-14)12(16)17/h3-4H,2,5H2,1H3,(H,16,17)
        [TestMethod()]
        public void TestDEWHOC()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[17], Single);
            container.AddBond(container.Atoms[0], container.Atoms[16], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Double);
            container.AddBond(container.Atoms[2], container.Atoms[19], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Double);
            container.AddBond(container.Atoms[4], container.Atoms[9], Double);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Double);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[21], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[15], container.Atoms[23], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[17], container.Atoms[25], Single);
            container.AddBond(container.Atoms[17], container.Atoms[24], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Single);
            container.AddBond(container.Atoms[18], container.Atoms[28], Single);
            container.AddBond(container.Atoms[18], container.Atoms[27], Single);
            container.AddBond(container.Atoms[18], container.Atoms[26], Single);

            string[] expected = {"NC=C", "N=C", "OC=O", "O=CO", "O=CR", "OC=C", "OC=C", "COO", "C=N", "C=OR", "CB", "CB",
                "CB", "CR", "CB", "CB", "CB", "CR", "CR", "HOCO", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DEWJEU
        /// </summary>
        // @cdk.inchi InChI=1S/C10H22N2Si2/c1-13(2,3)11-7-9-12(10-8-11)14(4,5)6/h7-10H,1-6H3
        [TestMethod()]
        public void TestDEWJEU()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Si", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("Si", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[18], Double);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[19], Double);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[18], container.Atoms[20], Single);
            container.AddBond(container.Atoms[18], container.Atoms[21], Single);
            container.AddBond(container.Atoms[19], container.Atoms[20], Single);
            container.AddBond(container.Atoms[19], container.Atoms[22], Single);
            container.AddBond(container.Atoms[20], container.Atoms[23], Single);
            container.AddBond(container.Atoms[23], container.Atoms[24], Single);
            container.AddBond(container.Atoms[23], container.Atoms[25], Single);
            container.AddBond(container.Atoms[23], container.Atoms[26], Single);
            container.AddBond(container.Atoms[24], container.Atoms[27], Single);
            container.AddBond(container.Atoms[24], container.Atoms[28], Single);
            container.AddBond(container.Atoms[24], container.Atoms[29], Single);
            container.AddBond(container.Atoms[25], container.Atoms[30], Single);
            container.AddBond(container.Atoms[25], container.Atoms[31], Single);
            container.AddBond(container.Atoms[25], container.Atoms[32], Single);
            container.AddBond(container.Atoms[26], container.Atoms[33], Single);
            container.AddBond(container.Atoms[26], container.Atoms[34], Single);
            container.AddBond(container.Atoms[26], container.Atoms[35], Single);

            string[] expected = {"SI", "NC=C", "C=C", "C=C", "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "C=C", "C=C", "NC=C", "HC", "HC", "SI", "CR", "CR", "CR", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DEXCIS
        /// </summary>
        // @cdk.inchi InChI=1S/C11H13NO2/c1-7(13)9-10(12-11(9)14)8-5-3-2-4-6-8/h2-7,9-10,13H,1H3,(H,12,14)/t7-,9+,10-/m1/s1
        [TestMethod()]
        public void TestDEXCIS()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[14], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[6], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[26], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);

            string[] expected = {"O=CN", "C=ON", "CR4R", "CR4R", "NC=O", "CR", "CR", "OR", "CB", "CB", "CB", "CB", "CB",
                "CB", "HC", "HC", "HNCO", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HOR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DEXGIW
        /// </summary>
        // @cdk.inchi InChI=1S/C9H9N3O3/c13-5-10-9(15)6-1-3-12-4-2-7(14)11-8(6)12/h1,3,5H,2,4H2,(H,11,14)(H,10,13,15)
        [TestMethod()]
        public void TestDEXGIW()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[15], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[16], Single);
            container.AddBond(container.Atoms[3], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[18], Single);
            container.AddBond(container.Atoms[4], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[21], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);

            string[] expected = {"NC=O", "C=ON", "O=CN", "CR", "CR", "NPYL", "C5A", "C5B", "C5B", "C5A", "C=ON", "O=CN",
                "NC=O", "C=ON", "O=CN", "HNCO", "HC", "HC", "HC", "HC", "HC", "HC", "HNCO", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DEZDUH
        /// </summary>
        // @cdk.inchi InChI=1S/C8H6F6/c9-5(10)1-3-4-2-6(11,12)7(3,13)8(4,5)14/h3-4H,1-2H2/t3-,4-,7+,8+/m1/s1
        [TestMethod()]
        public void TestDEZDUH()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[18], Single);
            container.AddBond(container.Atoms[12], container.Atoms[19], Single);

            string[] expected = {"F", "F", "F", "F", "F", "F", "CR4R", "CR4R", "CR", "CR", "CR4R", "CR4R", "CR", "CR",
                "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DEZNIF
        /// </summary>
        // @cdk.inchi InChI=1S/C11H13NO2S/c1-15(13,14)11-10-5-3-2-4-9(8-10)6-7-12-11/h2-7,9-10H,8H2,1H3/t9-,10-/m0/s1
        [TestMethod()]
        public void TestDEZNIF()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[14], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[26], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[27], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[21], Single);
            container.AddBond(container.Atoms[14], container.Atoms[25], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[23], Single);

            string[] expected = {"SO2", "O2S", "O2S", "N=C", "C=N", "CR", "C=C", "C=C", "C=C", "C=C", "CR", "C=C", "C=C",
                "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DEZXEL
        /// </summary>
        // @cdk.inchi InChI=1S/C8H5Cl2NO2/c9-5-2-1-3-7(10)11-6(5)4-13-8(11)12/h1-3H,4H2
        [TestMethod()]
        public void TestDEZXEL()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);

            string[] expected = {"NC=O", "C=C", "C=C", "C=C", "C=C", "C=C", "C=C", "CR", "OC=O", "C=ON", "O=CN", "CL",
                "CL", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DHOADS01
        /// </summary>
        // @cdk.inchi InChI=1S/C10H11N5O2/c11-9-8-10(13-4-12-9)15(5-14-8)7-2-1-6(3-16)17-7/h1-2,4-7,16H,3H2,(H2,11,12,13)/t6-,7+/m0/s1
        [TestMethod()]
        public void TestDHOADS01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[0], container.Atoms[11], Double);
            container.AddBond(container.Atoms[0], container.Atoms[17], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[14], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Double);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Double);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[20], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[21], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[22], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[23], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[24], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[25], Single);
            container.AddBond(container.Atoms[9], container.Atoms[26], Single);
            container.AddBond(container.Atoms[12], container.Atoms[18], Single);
            container.AddBond(container.Atoms[12], container.Atoms[19], Single);
            container.AddBond(container.Atoms[16], container.Atoms[27], Single);

            string[] expected = {"CB", "C5A", "C5B", "CB", "C5A", "CR", "C=C", "C=C", "CR", "CR", "NPYD", "NPYD", "NC=N",
                "N5B", "NPYL", "OR", "OR", "HC", "HNCN", "HNCN", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HOR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DICKIJ
        /// </summary>
        // @cdk.inchi InChI=1S/C16H12N2S/c1-2-4-14-12(3-1)9-13(10-18-7-6-17-11-18)15-5-8-19-16(14)15/h1-9,11H,10H2/p+1
        [TestMethod()]
        public void TestDICKIJ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[19], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[20], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[21], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[22], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[23], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[24], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[25], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[13], container.Atoms[27], Single);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[18], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[15], container.Atoms[28], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Double);
            container.AddBond(container.Atoms[16], container.Atoms[29], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[17], container.Atoms[30], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Double);
            container.AddBond(container.Atoms[18], container.Atoms[31], Single);

            string[] expected = {"STHI", "C5A", "C5B", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "C5B", "C5A", "CR",
                "NIM+", "CIM+", "NIM+", "C5", "C5", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HIM+",
                "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DICPUA
        /// </summary>
        // @cdk.inchi InChI=1S/C8H6N2O2/c11-10-8(6-9-12-10)7-4-2-1-3-5-7/h1-6H
        [TestMethod()]
        public void TestDICPUA()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[8], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Double);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);

            string[] expected = {"C5B", "C5B", "CB", "CB", "CB", "CB", "CB", "CB", "N5AX", "N5A", "OFUR", "OXN", "HC",
                "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DICRAI
        /// </summary>
        // @cdk.inchi InChI=1S/C8H6N2O2/c11-10-6-8(9-12-10)7-4-2-1-3-5-7/h1-6H
        [TestMethod()]
        public void TestDICRAI()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[8], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Double);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);

            string[] expected = {"C5B", "C5B", "CB", "CB", "CB", "CB", "CB", "CB", "N5A", "N5AX", "OFUR", "OXN", "HC",
                "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DICYIX
        /// </summary>
        // @cdk.inchi InChI=1S/C5H15NSi/c1-6(2)7(3,4)5/h1-5H3
        [TestMethod()]
        public void TestDICYIX()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Si", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[6], container.Atoms[21], Single);

            string[] expected = {"SI", "NR", "CR", "CR", "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DICYOD
        /// </summary>
        // @cdk.inchi InChI=1S/C8H10Cl4N2O2/c1-3-14(4-2)7(10)13-6(16)8(11,12)5(9)15/h3-4H2,1-2H3/b13-7+
        [TestMethod()]
        public void TestDICYOD()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Double);
            container.AddBond(container.Atoms[5], container.Atoms[10], Double);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Double);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);
            container.AddBond(container.Atoms[13], container.Atoms[18], Single);
            container.AddBond(container.Atoms[13], container.Atoms[19], Single);
            container.AddBond(container.Atoms[13], container.Atoms[20], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[21], Single);
            container.AddBond(container.Atoms[14], container.Atoms[22], Single);
            container.AddBond(container.Atoms[15], container.Atoms[23], Single);
            container.AddBond(container.Atoms[15], container.Atoms[24], Single);
            container.AddBond(container.Atoms[15], container.Atoms[25], Single);

            string[] expected = {"CL", "CL", "CL", "CL", "O=C", "O=CN", "N=C", "NC=N", "C=O", "CR", "C=ON", "C=N", "CR",
                "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DIDYOE
        /// </summary>
        // @cdk.inchi InChI=1S/C7H11NO5/c1-12-7(11)6(10)5(9)4-2-3-8-13-4/h3-6,9-10H,2H2,1H3/t4-,5-,6+/m1/s1
        [TestMethod()]
        public void TestDIDYOE()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Double);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);

            string[] expected = {"OR", "OR", "OR", "O=CO", "OC=O", "N=C", "C=N", "CR", "CR", "CR", "CR", "COO", "CR",
                "HOR", "HOR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DIFSIU
        /// </summary>
        // @cdk.inchi InChI=1S/C12H8N2O5S/c15-13(16)9-5-1-3-7-11(9)20(19)12-8-4-2-6-10(12)14(17)18/h1-8H
        [TestMethod()]
        public void TestDIFSIU()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[14], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Double);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[14], container.Atoms[19], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Double);
            container.AddBond(container.Atoms[16], container.Atoms[24], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Single);
            container.AddBond(container.Atoms[17], container.Atoms[25], Single);
            container.AddBond(container.Atoms[18], container.Atoms[19], Double);
            container.AddBond(container.Atoms[18], container.Atoms[26], Single);
            container.AddBond(container.Atoms[19], container.Atoms[27], Single);

            string[] expected = {"S=O", "O=S", "O2N", "O2N", "O2N", "O2N", "NO2", "NO2", "CB", "CB", "CB", "CB", "CB",
                "CB", "CB", "CB", "CB", "CB", "CB", "CB", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DIGCOL
        /// </summary>
        // @cdk.inchi InChI=1S/C2H4N2S4/c5-1(6)3-4-2(7)8/h(H2,3,5,6)(H2,4,7,8)/p-2
        [TestMethod()]
        public void TestDIGCOL()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", -1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", -1));
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Double);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);

            string[] expected = { "S2CM", "S2CM", "NC=S", "CS2M", "HNCS", "NC=S", "CS2M", "HNCS", "S2CM", "S2CM" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DIGCUR
        /// </summary>
        // @cdk.inchi InChI=1S/C6H10S6/c1-9-5(7)11-3-4-12-6(8)10-2/h3-4H2,1-2H3
        [TestMethod()]
        public void TestDIGCUR()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[14], Single);
            container.AddBond(container.Atoms[12], container.Atoms[15], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Double);
            container.AddBond(container.Atoms[15], container.Atoms[17], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Single);
            container.AddBond(container.Atoms[18], container.Atoms[19], Single);
            container.AddBond(container.Atoms[18], container.Atoms[20], Single);
            container.AddBond(container.Atoms[18], container.Atoms[21], Single);

            string[] expected = {"S=C", "S", "S", "CR", "CSS", "CR", "HC", "HC", "HC", "HC", "HC", "CR", "S", "HC", "HC",
                "CSS", "S=C", "S", "CR", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DIGLEK
        /// </summary>
        // @cdk.inchi InChI=1S/C17H14N2O7/c20-12-3-1-2-11(15(12)21)16(22)18-14-13(26-17(14)23)8-9-4-6-10(7-5-9)19(24)25/h1-7,13-14,20-21H,8H2,(H,18,22)/t13-,14+/m1/s1
        [TestMethod()]
        public void TestDIGLEK()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[9], Double);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[19], Double);
            container.AddBond(container.Atoms[3], container.Atoms[21], Single);
            container.AddBond(container.Atoms[3], container.Atoms[39], Single);
            container.AddBond(container.Atoms[4], container.Atoms[22], Single);
            container.AddBond(container.Atoms[4], container.Atoms[38], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[37], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[26], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[27], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[28], Single);
            container.AddBond(container.Atoms[12], container.Atoms[29], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[13], container.Atoms[18], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[30], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Double);
            container.AddBond(container.Atoms[15], container.Atoms[31], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Double);
            container.AddBond(container.Atoms[17], container.Atoms[32], Single);
            container.AddBond(container.Atoms[18], container.Atoms[33], Single);
            container.AddBond(container.Atoms[19], container.Atoms[20], Single);
            container.AddBond(container.Atoms[20], container.Atoms[21], Double);
            container.AddBond(container.Atoms[20], container.Atoms[25], Single);
            container.AddBond(container.Atoms[21], container.Atoms[22], Single);
            container.AddBond(container.Atoms[22], container.Atoms[23], Double);
            container.AddBond(container.Atoms[23], container.Atoms[24], Single);
            container.AddBond(container.Atoms[23], container.Atoms[34], Single);
            container.AddBond(container.Atoms[24], container.Atoms[25], Double);
            container.AddBond(container.Atoms[24], container.Atoms[35], Single);
            container.AddBond(container.Atoms[25], container.Atoms[36], Single);

            string[] expected = {"O=CO", "OC=O", "O=CN", "OC=C", "OC=C", "O2N", "O2N", "NC=O", "NO2", "COO", "CR4R",
                "CR4R", "CR", "CB", "CB", "CB", "CB", "CB", "CB", "C=ON", "CB", "CB", "CB", "CB", "CB", "CB", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HNCO", "HOCC", "HOCC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DIHTET
        /// </summary>
        // @cdk.inchi InChI=1S/C9H8N2O2/c1-5-3-7(12)6-4-10-11(2)8(6)9(5)13/h3-4H,1-2H3
        [TestMethod()]
        public void TestDIHTET()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[1], container.Atoms[8], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[15], Single);
            container.AddBond(container.Atoms[12], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);

            string[] expected = {"O=CR", "O=CR", "NPYL", "N5A", "C5B", "C=OR", "C=C", "C=C", "C=OR", "C5A", "C5B", "CR",
                "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DIKGAF
        /// </summary>
        // @cdk.inchi InChI=1S/C7H10Cl3NO3S/c1-4-6(2,3)11(15(4,13)14)5(12)7(8,9)10/h4H,1-3H3/t4-/m1/s1
        [TestMethod()]
        public void TestDIKGAF()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[14], Single);
            container.AddBond(container.Atoms[1], container.Atoms[14], Single);
            container.AddBond(container.Atoms[2], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Double);
            container.AddBond(container.Atoms[3], container.Atoms[6], Double);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Double);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);
            container.AddBond(container.Atoms[9], container.Atoms[12], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[10], container.Atoms[24], Single);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[18], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);

            string[] expected = {"CL", "CL", "CL", "SO2N", "O=CN", "O2S", "O2S", "NSO2", "CR4R", "CR4R", "CR", "CR", "CR",
                "C=ON", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DIKGEJ
        /// </summary>
        // @cdk.inchi InChI=1S/C7H10Cl3NO3S/c1-4-6(2,3)14-5(7(8,9)10)11-15(4,12)13/h4H,1-3H3/t4-/m1/s1
        [TestMethod()]
        public void TestDIKGEJ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[0], container.Atoms[6], Double);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);
            container.AddBond(container.Atoms[10], container.Atoms[14], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[24], Single);
            container.AddBond(container.Atoms[12], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[18], Single);
            container.AddBond(container.Atoms[12], container.Atoms[19], Single);
            container.AddBond(container.Atoms[13], container.Atoms[17], Single);
            container.AddBond(container.Atoms[13], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[21], Single);
            container.AddBond(container.Atoms[14], container.Atoms[23], Single);

            string[] expected = {"SO2N", "CL", "CL", "CL", "OC=N", "O2S", "O2S", "N=C", "CR", "C=N", "CR", "CR", "CR",
                "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DIKWID
        /// </summary>
        // @cdk.inchi InChI=1S/C12H21N3O2/c16-15-11-7-3-1-5-9(11)13-10-6-2-4-8-12(10,15)17-14-11/h9-10,13-14,16H,1-8H2/t9-,10+,11-,12-/m0/s1
        [TestMethod()]
        public void TestDIKWID()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[13], Single);
            container.AddBond(container.Atoms[0], container.Atoms[15], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[17], Single);
            container.AddBond(container.Atoms[1], container.Atoms[18], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[19], Single);
            container.AddBond(container.Atoms[2], container.Atoms[20], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[21], Single);
            container.AddBond(container.Atoms[3], container.Atoms[22], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[23], Single);
            container.AddBond(container.Atoms[4], container.Atoms[24], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[25], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[26], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[27], Single);
            container.AddBond(container.Atoms[7], container.Atoms[28], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[29], Single);
            container.AddBond(container.Atoms[8], container.Atoms[30], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[31], Single);
            container.AddBond(container.Atoms[9], container.Atoms[32], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[33], Single);
            container.AddBond(container.Atoms[10], container.Atoms[34], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[14], Single);
            container.AddBond(container.Atoms[12], container.Atoms[35], Single);
            container.AddBond(container.Atoms[13], container.Atoms[16], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[36], Single);
            container.AddBond(container.Atoms[16], container.Atoms[37], Single);

            string[] expected = {"CR", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "NR", "NR", "NR",
                "OR", "-O-", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HNR", "HNR", "HO"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DIKYUR
        /// </summary>
        // @cdk.inchi InChI=1S/C8H6Cl2O2/c9-8(10)5-2-1-4(3-11)6(5)7(8)12/h1,3,5-6H,2H2/t5-,6+/m1/s1
        [TestMethod()]
        public void TestDIKYUR()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Double);
            container.AddBond(container.Atoms[3], container.Atoms[11], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);

            string[] expected = {"CL", "CL", "O=CR", "O=CR", "CR4R", "C=OR", "CR4R", "C=C", "C=C", "CR", "CR4R", "C=OR",
                "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DILCOQ
        /// </summary>
        // @cdk.inchi InChI=1S/C11H17NO3/c1-6(2)7-8(13)12-9(7)15-10(14)11(3,4)5/h9H,1-5H3,(H,12,13)/t9-/m0/s1
        [TestMethod()]
        public void TestDILCOQ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[15], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[11], container.Atoms[24], Single);
            container.AddBond(container.Atoms[11], container.Atoms[25], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);
            container.AddBond(container.Atoms[13], container.Atoms[27], Single);
            container.AddBond(container.Atoms[13], container.Atoms[28], Single);
            container.AddBond(container.Atoms[14], container.Atoms[29], Single);
            container.AddBond(container.Atoms[14], container.Atoms[30], Single);
            container.AddBond(container.Atoms[14], container.Atoms[31], Single);

            string[] expected = {"NC=O", "C=ON", "O=CN", "CE4R", "CR4R", "OC=O", "COO", "O=CO", "CR", "CR", "CR", "CR",
                "C=C", "CR", "CR", "HNCO", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DIMYIH10
        /// </summary>
        // @cdk.inchi InChI=1S/C10H6N2O6S2/c13-11(14)8-6-9(12(15)16)19-10(8)20(17,18)7-4-2-1-3-5-7/h1-6H
        [TestMethod()]
        public void TestDIMYIH10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[18], Single);
            container.AddBond(container.Atoms[0], container.Atoms[19], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[20], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[18], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[21], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[22], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[23], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[24], Single);
            container.AddBond(container.Atoms[9], container.Atoms[25], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Double);
            container.AddBond(container.Atoms[11], container.Atoms[14], Single);
            container.AddBond(container.Atoms[11], container.Atoms[15], Double);
            container.AddBond(container.Atoms[16], container.Atoms[19], Double);
            container.AddBond(container.Atoms[17], container.Atoms[19], Double);

            string[] expected = {"C5A", "C5B", "C5B", "C5A", "CB", "CB", "CB", "CB", "CB", "CB", "NO2", "NO2", "O2N",
                "O2N", "O2N", "O2N", "O2S", "O2S", "STHI", "SO2", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DIPDAH10
        /// </summary>
        // @cdk.inchi InChI=1S/C10H12N2O5/c1-4-2-6(14)11-10-12(4)9-8(17-10)7(15)5(3-13)16-9/h2,5,7-9,13,15H,3H2,1H3/t5-,7-,8+,9-/m1/s1
        [TestMethod()]
        public void TestDIPDAH10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[9], Double);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[2], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[27], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[28], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Double);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[23], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[24], Single);
            container.AddBond(container.Atoms[16], container.Atoms[25], Single);
            container.AddBond(container.Atoms[16], container.Atoms[26], Single);

            string[] expected = {"O=CN", "OC=N", "OR", "OR", "OR", "NC=N", "N=C", "CR", "C=N", "C=ON", "C=C", "C=C", "CR",
                "CR", "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HOR", "HOR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DIPDIP10
        /// </summary>
        // @cdk.inchi InChI=1S/C5H10N4/c6-2-1-4-3-8-5(7)9-4/h3H,1-2,6H2,(H3,7,8,9)/p+2
        [TestMethod()]
        public void TestDIPDIP10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Double);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[18], Single);
            container.AddBond(container.Atoms[3], container.Atoms[17], Single);
            container.AddBond(container.Atoms[3], container.Atoms[16], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);

            string[] expected = {"NIM+", "NIM+", "NGD+", "NR+", "CIM+", "C5", "C5", "CR", "CR", "HIM+", "HIM+", "HGD+",
                "HGD+", "HC", "HC", "HC", "HNR+", "HNR+", "HNR+", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DIRMIA
        /// </summary>
        // @cdk.inchi InChI=1S/CH5NO3S/c1-6(4,5)2-3/h2-3H,1H3
        [TestMethod()]
        public void TestDIRMIA()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);

            string[] expected = { "SO2N", "O2S", "O2S", "-O-", "NSO2", "CR", "HNSO", "HC", "HC", "HC", "HO" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DISHES
        /// </summary>
        // @cdk.inchi InChI=1S/C12H13NO/c1-8-7-12(2,3)13-11-5-4-9(14)6-10(8)11/h4-7H,1-3H3
        [TestMethod()]
        public void TestDISHES()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[18], Single);
            container.AddBond(container.Atoms[12], container.Atoms[19], Single);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[24], Single);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);

            string[] expected = {"O=CR", "N=C", "C=N", "C=C", "C=C", "C=OR", "C=C", "C=C", "C=C", "C=C", "CR", "CR", "CR",
                "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DISJOE
        /// </summary>
        // @cdk.inchi InChI=1S/C4H6ClNO4/c1-2-10-4(7)3(5)6(8)9/h7H,2H2,1H3/p-1/b4-3+
        [TestMethod()]
        public void TestDISJOE()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Double);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);
            container.AddBond(container.Atoms[9], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);

            string[] expected = {"CL", "O2N", "O2N", "OM2", "OC=C", "NO2", "C=C", "C=C", "CR", "CR", "HC", "HC", "HC",
                "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DITRAZ
        /// </summary>
        // @cdk.inchi InChI=1S/C2H7N3S/c1-6-2(3)5-4/h4H2,1H3,(H2,3,5)/p+1
        [TestMethod()]
        public void TestDITRAZ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);

            string[] expected = {"S", "CNN+", "NCN+", "NCN+", "NR", "CR", "HNN+", "HNN+", "HNN+", "HNR", "HNR", "HC", "HC",
                "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DITYAG10
        /// </summary>
        // @cdk.inchi InChI=1S/C12H13ClO/c13-11-6-4-10(5-7-11)12(14)8-9-2-1-3-9/h4-7,9H,1-3,8H2
        [TestMethod()]
        public void TestDITYAG10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);

            string[] expected = {"CL", "O=CR", "CB", "CB", "CB", "CB", "CB", "CB", "C=OR", "CR", "CR4R", "CR4R", "CR4R",
                "CR4R", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DIVJUN
        /// </summary>
        // @cdk.inchi InChI=1S/C5H9N3OS/c1-6-4-5(8-9)10-3-2-7-4/h9H,2-3H2,1H3,(H,6,7)/p+1/b8-5-
        [TestMethod()]
        public void TestDIVJUN()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Double);
            container.AddBond(container.Atoms[2], container.Atoms[14], Single);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[16], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[19], Single);
            container.AddBond(container.Atoms[4], container.Atoms[18], Single);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);

            string[] expected = {"C=N", "CNN+", "CR", "CR", "CR", "NCN+", "N=C", "NCN+", "-O-", "S", "HNN+", "HO", "HNN+",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DIVTUX
        /// </summary>
        // @cdk.inchi InChI=1S/C11H12O2/c12-11-7-3-1-2-4-9(7)13-10-6-5-8(10)11/h1-4,8,10-12H,5-6H2/t8-,10+,11+/m1/s1
        [TestMethod()]
        public void TestDIVTUX()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[24], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);

            string[] expected = {"OR", "OC=C", "CB", "CB", "CB", "CB", "CB", "CB", "CR", "CR4R", "CR4R", "CR4R", "CR4R",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HOR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DIVVEJ
        /// </summary>
        // @cdk.inchi InChI=1S/C2H6N4O/c3-1(4)6-2(5)7/h(H6,3,4,5,6,7)/p+1
        [TestMethod()]
        public void TestDIVVEJ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Double);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);

            string[] expected = {"O=CN", "CONN", "CGD+", "NC=O", "NGD+", "NGD+", "NGD+", "HNCO", "HNCO", "HGD+", "HGD+",
                "HGD+", "HGD+", "HGD+"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DIVWEK
        /// </summary>
        // @cdk.inchi InChI=1S/C18H12O4/c19-16-14(11-12-7-3-1-4-8-12)22-17(18(20)21)15(16)13-9-5-2-6-10-13/h1-11H,(H,20,21)/b14-11-
        [TestMethod()]
        public void TestDIVWEK()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[27], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[28], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[23], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[31], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[24], Single);
            container.AddBond(container.Atoms[11], container.Atoms[26], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[13], container.Atoms[18], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[25], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Double);
            container.AddBond(container.Atoms[15], container.Atoms[33], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[16], container.Atoms[30], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Double);
            container.AddBond(container.Atoms[17], container.Atoms[32], Single);
            container.AddBond(container.Atoms[18], container.Atoms[29], Single);
            container.AddBond(container.Atoms[19], container.Atoms[20], Double);
            container.AddBond(container.Atoms[19], container.Atoms[21], Single);
            container.AddBond(container.Atoms[21], container.Atoms[22], Single);

            string[] expected = {"OC=C", "C=C", "C=OR", "C=C", "C=C", "C=C", "CB", "CB", "CB", "CB", "CB", "CB", "O=CR",
                "CB", "CB", "CB", "CB", "CB", "CB", "COO", "O=CO", "OC=O", "HOCO", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DIWCOB
        /// </summary>
        // @cdk.inchi InChI=1S/CH8N6/c2-5-1(6-3)7-4/h2-4H2,(H2,5,6,7)/p+1
        [TestMethod()]
        public void TestDIWCOB()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);

            string[] expected = {"CGD+", "NGD+", "NR", "NGD+", "NR", "NGD+", "NR", "HGD+", "HNR", "HNR", "HGD+", "HNR",
                "HNR", "HGD+", "HNR", "HNR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DIXJEZ
        /// </summary>
        // @cdk.inchi InChI=1S/C7H9N5/c1-12(2)7-5-6(9-3-8-5)10-4-11-7/h3-4H,1-2H3,(H,8,9,10,11)/p+1
        [TestMethod()]
        public void TestDIXJEZ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);

            string[] expected = {"NPYD", "CB", "NPD+", "C5A", "C5B", "CB", "NC=N", "N5B", "C5A", "NPYL", "CR", "CR", "HC",
                "HPD+", "HC", "HPYL", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DIYDIY
        /// </summary>
        // @cdk.inchi InChI=1S/C9H8O4/c10-5-7-3-1-2-4-8(7)13-6-9(11)12/h1-5H,6H2,(H,11,12)
        [TestMethod()]
        public void TestDIYDIY()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);

            string[] expected = {"CB", "CB", "CB", "CB", "CB", "CB", "OC=C", "CR", "COO", "O=CO", "OC=O", "C=OR", "O=CR",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HOCO"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DIYPOQ
        /// </summary>
        // @cdk.inchi InChI=1S/C9H15N5O3/c1-3(15)6(16)4-2-11-7-5(12-4)8(17)14-9(10)13-7/h3-4,6,12,15-16H,2H2,1H3,(H4,10,11,13,14,17)/p+2/t3-,4+,6-/m0/s1
        [TestMethod()]
        public void TestDIYPOQ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[17], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[18], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Double);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[20], Single);
            container.AddBond(container.Atoms[4], container.Atoms[19], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[21], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[23], Single);
            container.AddBond(container.Atoms[6], container.Atoms[22], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[24], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[10], container.Atoms[26], Single);
            container.AddBond(container.Atoms[10], container.Atoms[25], Single);
            container.AddBond(container.Atoms[12], container.Atoms[27], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[28], Single);
            container.AddBond(container.Atoms[14], container.Atoms[29], Single);
            container.AddBond(container.Atoms[14], container.Atoms[16], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[15], container.Atoms[30], Single);
            container.AddBond(container.Atoms[16], container.Atoms[33], Single);
            container.AddBond(container.Atoms[16], container.Atoms[32], Single);
            container.AddBond(container.Atoms[16], container.Atoms[31], Single);

            string[] expected = {"NGD+", "CGD+", "NGD+", "C=ON", "NR+", "CR", "CR", "NC=C", "C=C", "C=C", "NGD+", "O=CN",
                "CR", "OR", "CR", "OR", "CR", "HGD+", "HGD+", "HNR+", "HNR+", "HC", "HC", "HC", "HNCC", "HGD+", "HGD+",
                "HC", "HOR", "HC", "HOR", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DIYPUW
        /// </summary>
        // @cdk.inchi InChI=1S/C5H8N2O/c8-5(6-1-2-6)7-3-4-7/h1-4H2
        [TestMethod()]
        public void TestDIYPUW()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[14], Single);
            container.AddBond(container.Atoms[11], container.Atoms[15], Single);

            string[] expected = {"O=CN", "CONN", "NC=O", "CR3R", "CR3R", "HC", "HC", "HC", "HC", "NC=O", "CR3R", "CR3R",
                "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DIZPUX
        /// </summary>
        // @cdk.inchi InChI=1S/C10H15NO/c1-7(12)9-4-2-3-8-5-6-10(9)11-8/h4,8,10-11H,2-3,5-6H2,1H3/p+1/t8-,10-/m1/s1
        [TestMethod()]
        public void TestDIZPUX()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[10], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[6], container.Atoms[21], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[22], Single);
            container.AddBond(container.Atoms[7], container.Atoms[23], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[24], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[25], Single);
            container.AddBond(container.Atoms[11], container.Atoms[26], Single);
            container.AddBond(container.Atoms[11], container.Atoms[27], Single);

            string[] expected = {"O=CR", "NR+", "CR", "CR", "CR", "CR", "CR", "CR", "C=C", "C=C", "C=OR", "CR", "HNR+",
                "HNR+", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DMEOXA01
        /// </summary>
        // @cdk.inchi InChI=1S/C4H6O4/c1-7-3(5)4(6)8-2/h1-2H3
        [TestMethod()]
        public void TestDMEOXA01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);

            string[] expected = {"COO", "CR", "O=CO", "OC=O", "HC", "HC", "HC", "COO", "O=CO", "OC=O", "CR", "HC", "HC",
                "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DOCCIH
        /// </summary>
        // @cdk.inchi InChI=1S/C8H6S4/c9-7(10)5-1-2-6(4-3-5)8(11)12/h1-4H,(H,9,10)(H,11,12)/p-2
        [TestMethod()]
        public void TestDOCCIH()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", -1));
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Double);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);

            string[] expected = {"S2CM", "S2CM", "CS2M", "CB", "CB", "CB", "HC", "HC", "CB", "CB", "CB", "HC", "HC",
                "CS2M", "S2CM", "S2CM"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DOCFIK
        /// </summary>
        // @cdk.inchi InChI=1S/C8Cl2N8S3/c9-5(7-13-3(1-11)15-19-7)17-21-18-6(10)8-14-4(2-12)16-20-8/b17-5-,18-6-
        [TestMethod()]
        public void TestDOCFIK()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[9], container.Atoms[10], Triple);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[18], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[18], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Double);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[16], container.Atoms[19], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Double);
            container.AddBond(container.Atoms[19], container.Atoms[20], Triple);

            string[] expected = {"S", "N=C", "C=N", "CL", "STHI", "N5A", "C5B", "N5B", "C5A", "CSP", "NSP", "N=C", "C=N",
                "CL", "STHI", "N5A", "C5B", "N5B", "C5A", "CSP", "NSP"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DOCWUN
        /// </summary>
        // @cdk.inchi InChI=1S/C9H11N3O3/c1-6-4-3-5-12(9(6)13)8(11-15)7(2)10-14/h3-5,14-15H,1-2H3/b10-7+,11-8-
        [TestMethod()]
        public void TestDOCWUN()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Double);
            container.AddBond(container.Atoms[1], container.Atoms[15], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[16], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Double);
            container.AddBond(container.Atoms[5], container.Atoms[12], Double);
            container.AddBond(container.Atoms[6], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[25], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[23], Single);

            string[] expected = {"O=CN", "-O-", "-O-", "NC=O", "N=C", "N=C", "CR", "C=ON", "C=C", "C=C", "C=C", "C=C",
                "C=N", "C=N", "CR", "HO", "HO", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DODNOZ
        /// </summary>
        // @cdk.inchi InChI=1S/C6H15NO6S3/c1-4-14(8,9)7(15(10,11)5-2)16(12,13)6-3/h4-6H2,1-3H3
        [TestMethod()]
        public void TestDODNOZ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Double);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[20], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[8], Double);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[10], container.Atoms[24], Single);
            container.AddBond(container.Atoms[10], container.Atoms[25], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[13], Double);
            container.AddBond(container.Atoms[11], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[26], Single);
            container.AddBond(container.Atoms[14], container.Atoms[27], Single);
            container.AddBond(container.Atoms[15], container.Atoms[28], Single);
            container.AddBond(container.Atoms[15], container.Atoms[29], Single);
            container.AddBond(container.Atoms[15], container.Atoms[30], Single);

            string[] expected = {"NSO2", "SO2N", "O2S", "O2S", "CR", "CR", "SO2N", "O2S", "O2S", "CR", "CR", "SO2N", "O2S",
                "O2S", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DODNUF
        /// </summary>
        // @cdk.inchi InChI=1S/C4H11NO4S2/c1-3-10(6,7)5-11(8,9)4-2/h5H,3-4H2,1-2H3
        [TestMethod()]
        public void TestDODNUF()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Double);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[8], Double);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);

            string[] expected = {"NSO2", "SO2N", "O2S", "O2S", "CR", "CR", "SO2N", "O2S", "O2S", "CR", "CR", "HNSO", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DOJPAT
        /// </summary>
        // @cdk.inchi InChI=1S/C8H10O2S/c9-11(10)3-7-5-1-2-6(5)8(7)4-11/h1-2,5-8H,3-4H2/t5-,6+,7+,8-
        [TestMethod()]
        public void TestDOJPAT()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);

            string[] expected = {"SO2", "O2S", "O2S", "CR", "CR4R", "CR4R", "CE4R", "CE4R", "CR4R", "CR4R", "CR", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DONFOB
        /// </summary>
        // @cdk.inchi InChI=1S/C5H13NO6S4/c1-6(2)5(3-13-15(7,8)9)4-14-16(10,11)12/h5H,3-4H2,1-2H3,(H,7,8,9)(H,10,11,12)/p-1
        [TestMethod()]
        public void TestDONFOB()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[0], container.Atoms[6], Double);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Double);
            container.AddBond(container.Atoms[1], container.Atoms[9], Double);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[27], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[12], container.Atoms[19], Single);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Single);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);
            container.AddBond(container.Atoms[14], container.Atoms[23], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);
            container.AddBond(container.Atoms[15], container.Atoms[25], Single);
            container.AddBond(container.Atoms[15], container.Atoms[26], Single);

            string[] expected = {"SO3", "SO3", "S", "S", "NR+", "O3S", "O3S", "O3S", "O3S", "O3S", "O3S", "CR", "CR", "CR",
                "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HNR+"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DOSNOO
        /// </summary>
        // @cdk.inchi InChI=1S/C3H6N2O3S/c4-3(6)5-1-2-9(5,7)8/h1-2H2,(H2,4,6)
        [TestMethod()]
        public void TestDOSNOO()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[13], Double);
            container.AddBond(container.Atoms[1], container.Atoms[14], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);

            string[] expected = {"NSO2", "SO2N", "CR4R", "HC", "HC", "CR4R", "HC", "HC", "CONN", "O=CN", "NC=O", "HNCO",
                "HNCO", "O2S", "O2S"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DOTNIJ
        /// </summary>
        // @cdk.inchi InChI=1S/C8H7NS2/c10-6-9(7-11)8-4-2-1-3-5-8/h1-7H
        [TestMethod()]
        public void TestDOTNIJ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[14], Double);
            container.AddBond(container.Atoms[11], container.Atoms[15], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[16], Single);
            container.AddBond(container.Atoms[13], container.Atoms[17], Single);

            string[] expected = {"S=C", "NC=S", "C=SN", "CB", "CB", "CB", "CB", "HC", "HC", "HC", "HC", "C=SN", "CB", "CB",
                "S=C", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DOTVEN
        /// </summary>
        // @cdk.inchi InChI=1S/C3H5N3O3S/c4-2-1-3(7)6-10(8,9)5-2/h1H2,(H2,4,5)(H,6,7)
        [TestMethod()]
        public void TestDOTVEN()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Double);
            container.AddBond(container.Atoms[0], container.Atoms[6], Double);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);

            string[] expected = {"SO2N", "NSO2", "C=ON", "CR", "C=N", "N=C", "O2S", "O2S", "O=CN", "NC=N", "HNCN", "HC",
                "HNSO", "HNCN", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DOTWOY
        /// </summary>
        // @cdk.inchi InChI=1S/C12H12Cl2O3/c1-2-17-9-5-3-8(4-6-9)11(10(15)16)7-12(11,13)14/h3-6H,2,7H2,1H3,(H,15,16)/t11-/m0/s1
        [TestMethod()]
        public void TestDOTWOY()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[18], Single);
            container.AddBond(container.Atoms[4], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Double);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);
            container.AddBond(container.Atoms[13], container.Atoms[27], Single);
            container.AddBond(container.Atoms[13], container.Atoms[28], Single);
            container.AddBond(container.Atoms[15], container.Atoms[17], Single);

            string[] expected = {"CL", "CL", "CR3R", "CR3R", "CR3R", "COO", "CB", "CB", "CB", "CB", "CB", "CB", "CR", "CR",
                "O=CO", "OC=O", "OC=C", "HOCO", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DOWDEY
        /// </summary>
        // @cdk.inchi InChI=1S/C6H5N3O2S/c1-12-4-3(2-7)5(10)11-6(8)9-4/h1H3,(H2,8,9)
        [TestMethod()]
        public void TestDOWDEY()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Double);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Triple);

            string[] expected = {"OC=O", "C=N", "N=C", "C=C", "C=C", "COO", "NC=N", "S", "CR", "CSP", "NSP", "O=CO",
                "HNCN", "HNCN", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DOXXAP
        /// </summary>
        // @cdk.inchi InChI=1S/C3H7N3O4/c4-2(3(7)8)1-6(10)5-9/h2,9H,1,4H2,(H,7,8)/b6-5-/t2-/m0/s1
        [TestMethod()]
        public void TestDOXXAP()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);

            string[] expected = {"CO2M", "CR", "CR", "NR+", "N2OX", "N=N", "O2CM", "O2CM", "OXN", "-O-", "HC", "HC", "HC",
                "HNR+", "HNR+", "HNR+", "HO"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DOXZOF
        /// </summary>
        // @cdk.inchi InChI=1S/C8H7NO/c10-9-8-5-6-3-1-2-4-7(6)8/h1-4,10H,5H2/b9-8-
        [TestMethod()]
        public void TestDOXZOF()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);

            string[] expected = {"-O-", "N=C", "C=N", "CR4R", "CB", "CB", "CB", "CB", "CB", "CB", "HO", "HC", "HC", "HC",
                "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DOZFON
        /// </summary>
        // @cdk.inchi InChI=1S/C4H7F2N3O3/c1-8(2)7-3(10)4(5,6)9(11)12/h1-2H3,(H,7,10)/p+1
        [TestMethod()]
        public void TestDOZFON()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Double);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Double);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);

            string[] expected = {"F", "F", "O=CN", "O2N", "O2N", "NC=O", "NR+", "NO2", "C=ON", "CR", "CR", "CR", "HNR+",
                "HC", "HC", "HC", "HC", "HC", "HC", "HNCO"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DOZNIP
        /// </summary>
        // @cdk.inchi InChI=1S/C2H2N7O4/c10-8(11)6-1-3-2(5-4-1)7-9(12)13/h(H2-,3,4,5,6,7)/q-1
        [TestMethod()]
        public void TestDOZNIP()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", -1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Double);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Double);
            container.AddBond(container.Atoms[8], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);

            string[] expected = {"O2N", "O2N", "O2N", "O2N", "NO2", "NC=N", "N5M", "N5M", "N5M", "NC=N", "NO2", "C5", "C5",
                "HNCN", "HNCN"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DUBNET
        /// </summary>
        // @cdk.inchi InChI=1S/C8H9N3O2/c1-9-7(12)10-5-2-3-6(4-5)11(10)8(9)13/h2-3,5-6H,4H2,1H3/t5-,6+
        [TestMethod()]
        public void TestDUBNET()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[10], Double);
            container.AddBond(container.Atoms[1], container.Atoms[11], Double);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[12], container.Atoms[19], Single);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);

            string[] expected = {"O=CN", "O=CN", "NC=O", "NC=O", "NC=O", "CR", "C=C", "C=C", "CR", "CR", "CONN", "CONN",
                "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DUDMUK
        /// </summary>
        // @cdk.inchi InChI=1S/C5H10N4O/c1-4-6-7-5(2)9(3-10)8-4/h5,10H,3H2,1-2H3/t5-/m1/s1
        [TestMethod()]
        public void TestDUDMUK()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);

            string[] expected = {"NR", "N=C", "C=N", "N=N", "N=N", "CR", "CR", "CR", "CR", "OR", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HOR", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DUGMUN
        /// </summary>
        // @cdk.inchi InChI=1S/C8H6N2O/c9-6-8(10-11)7-4-2-1-3-5-7/h1-5,11H/b10-8+
        [TestMethod()]
        public void TestDUGMUN()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[4], Triple);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);

            string[] expected = {"-O-", "N=C", "NSP", "C=N", "CSP", "CB", "CB", "CB", "CB", "CB", "CB", "HO", "HC", "HC",
                "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DUGWIL01
        /// </summary>
        // @cdk.inchi InChI=1S/C3H9NO4S2/c1-4(9(2,5)6)10(3,7)8/h1-3H3
        [TestMethod()]
        public void TestDUGWIL01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Double);
            container.AddBond(container.Atoms[1], container.Atoms[5], Double);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);

            string[] expected = {"SO2N", "SO2N", "O2S", "O2S", "O2S", "O2S", "NSO2", "CR", "CR", "CR", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DUJHEV
        /// </summary>
        // @cdk.inchi InChI=1S/C6H7NO3S/c1-6(8)7-2-4-11(9,10)5-3-7/h2-5H,1H3
        [TestMethod()]
        public void TestDUJHEV()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);

            string[] expected = {"SO2", "O2S", "O2S", "C=C", "C=C", "C=C", "C=C", "NC=O", "C=ON", "CR", "O=CN", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DUJMEA
        /// </summary>
        // @cdk.inchi InChI=1S/C12H18N2O3/c1-13-5-9-17-12(10-4-3-7-15-10)11(13)16-8-6-14(12)2/h3-4,7,11H,5-6,8-9H2,1-2H3/t11-,12-/m0/s1
        [TestMethod()]
        public void TestDUJMEA()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[21], Single);
            container.AddBond(container.Atoms[2], container.Atoms[22], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[23], Single);
            container.AddBond(container.Atoms[3], container.Atoms[24], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[25], Single);
            container.AddBond(container.Atoms[5], container.Atoms[26], Single);
            container.AddBond(container.Atoms[5], container.Atoms[27], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[28], Single);
            container.AddBond(container.Atoms[8], container.Atoms[29], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[30], Single);
            container.AddBond(container.Atoms[9], container.Atoms[31], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[32], Single);
            container.AddBond(container.Atoms[11], container.Atoms[33], Single);
            container.AddBond(container.Atoms[11], container.Atoms[34], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[16], Single);
            container.AddBond(container.Atoms[13], container.Atoms[18], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Double);
            container.AddBond(container.Atoms[15], container.Atoms[19], Single);
            container.AddBond(container.Atoms[16], container.Atoms[20], Single);

            string[] expected = {"CR", "OR", "CR", "CR", "NR", "CR", "CR", "OR", "CR", "CR", "NR", "CR", "C5A", "C5B",
                "OFUR", "C5A", "C5B", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DUKVAG
        /// </summary>
        // @cdk.inchi InChI=1S/C2H4N4S/c3-1-5-6-2(4)7-1/h(H2,3,5)(H2,4,6)/p+1
        [TestMethod()]
        public void TestDUKVAG()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Double);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);

            string[] expected = {"STHI", "NIM+", "N5B", "NCN+", "NC=N", "CIM+", "C5A", "HIM+", "HNN+", "HNN+", "HNCN",
                "HNCN"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DUKWUB
        /// </summary>
        // @cdk.inchi InChI=1S/C6H13NO7S/c7-3-5(9)4(8)2(14-6(3)10)1-15(11,12)13/h2-6,8-10H,1,7H2,(H,11,12,13)/t2-,3-,4-,5-,6+/m1/s1
        [TestMethod()]
        public void TestDUKWUB()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[0], container.Atoms[14], Single);
            container.AddBond(container.Atoms[1], container.Atoms[13], Single);
            container.AddBond(container.Atoms[1], container.Atoms[26], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[27], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[24], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[25], Single);
            container.AddBond(container.Atoms[8], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[14], container.Atoms[17], Single);
            container.AddBond(container.Atoms[14], container.Atoms[18], Single);

            string[] expected = {"SO3", "OR", "OR", "O2S", "OSO2", "O2S", "OR", "OR", "NR", "CR", "CR", "CR", "CR", "CR",
                "CR", "HNR", "HNR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HOR", "HOR", "HOR", "HOS"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DULTIN
        /// </summary>
        // @cdk.inchi InChI=1S/C8H12BrNO2/c9-6-3-10-2-1-5-7(10)8(6,4-11)12-5/h5-7,11H,1-4H2/t5-,6-,7+,8+/m1/s1
        [TestMethod()]
        public void TestDULTIN()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Br", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);

            string[] expected = {"BR", "CR4R", "CR", "CR", "NR", "CR", "CR", "CR4R", "CR4R", "CR", "OR", "OR", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HOR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DUMHIC
        /// </summary>
        // @cdk.inchi InChI=1S/C8H12O5S/c1-9-6-5-4(12-8(14)13-5)3-11-7(6)10-2/h4-7H,3H2,1-2H3/t4-,5-,6+,7-/m0/s1
        [TestMethod()]
        public void TestDUMHIC()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[14], Single);
            container.AddBond(container.Atoms[1], container.Atoms[15], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[16], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[13], container.Atoms[24], Single);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);

            string[] expected = {"OR", "CR", "CR", "OC=S", "C=S", "S=C", "CR", "OC=S", "CR", "OR", "CR", "CR", "OR", "CR",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DUMPAC
        /// </summary>
        // @cdk.inchi InChI=1S/C7H14N4O5/c1-8(10(12)13)3-7(5-16-6-7)4-9(2)11(14)15/h3-6H2,1-2H3
        [TestMethod()]
        public void TestDUMPAC()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[16], Single);
            container.AddBond(container.Atoms[1], container.Atoms[17], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[18], Single);
            container.AddBond(container.Atoms[3], container.Atoms[19], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[20], Single);
            container.AddBond(container.Atoms[4], container.Atoms[21], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[22], Single);
            container.AddBond(container.Atoms[5], container.Atoms[23], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[24], Single);
            container.AddBond(container.Atoms[7], container.Atoms[25], Single);
            container.AddBond(container.Atoms[7], container.Atoms[26], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Double);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[27], Single);
            container.AddBond(container.Atoms[12], container.Atoms[28], Single);
            container.AddBond(container.Atoms[12], container.Atoms[29], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Double);

            string[] expected = {"OR", "CR4R", "CR4R", "CR4R", "CR", "CR", "NR", "CR", "NO2", "O2N", "O2N", "NR", "CR",
                "NO2", "O2N", "O2N", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DUPHEB
        /// </summary>
        // @cdk.inchi InChI=1S/C9H9ClN2O2S/c1-15-9(6-12(13)14)11-8-5-3-2-4-7(8)10/h2-6,11H,1H3/b9-6+
        [TestMethod()]
        public void TestDUPHEB()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[14], Double);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);

            string[] expected = {"S", "CL", "C=C", "C=C", "CB", "CB", "CB", "CB", "CB", "CB", "CR", "NO2", "NC=C", "O2N",
                "O2N", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HNCC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DUPTAJ
        /// </summary>
        // @cdk.inchi InChI=1S/C10H9NO2S/c12-14(13,11-8-4-5-9-11)10-6-2-1-3-7-10/h1-9H
        [TestMethod()]
        public void TestDUPTAJ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[14], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[15], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[16], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);

            string[] expected = {"NPYL", "C5A", "C5B", "C5B", "C5A", "SO2N", "O2S", "O2S", "CB", "CB", "CB", "CB", "CB",
                "CB", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DURDID
        /// </summary>
        // @cdk.inchi InChI=1S/C6H10N2O2/c1-5-4-6(2,3)8(10)7(5)9/h4H,1-3H3
        [TestMethod()]
        public void TestDURDID()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);

            string[] expected = {"C=C", "C=C", "CR", "CR", "CR", "CR", "N2OX", "N2OX", "OXN", "OXN", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DUTHIJ
        /// </summary>
        // @cdk.inchi InChI=1S/C12H14N2O3/c1-15-12(11-13-6-7-14-11)8-16-9-4-2-3-5-10(9)17-12/h2-5H,6-8H2,1H3,(H,13,14)/p+1/t12-/m1/s1
        [TestMethod()]
        public void TestDUTHIJ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[17], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[18], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[19], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[20], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[22], Single);
            container.AddBond(container.Atoms[6], container.Atoms[21], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Double);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[25], Single);
            container.AddBond(container.Atoms[9], container.Atoms[24], Single);
            container.AddBond(container.Atoms[9], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[27], Single);
            container.AddBond(container.Atoms[10], container.Atoms[26], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[31], Single);
            container.AddBond(container.Atoms[11], container.Atoms[30], Single);
            container.AddBond(container.Atoms[11], container.Atoms[29], Single);
            container.AddBond(container.Atoms[11], container.Atoms[14], Single);
            container.AddBond(container.Atoms[15], container.Atoms[23], Single);
            container.AddBond(container.Atoms[16], container.Atoms[28], Single);

            string[] expected = {"CB", "CB", "CB", "CB", "CB", "CB", "CR", "CR", "CNN+", "CR", "CR", "CR", "OC=C", "OC=C",
                "OR", "NCN+", "NCN+", "HC", "HC", "HC", "HC", "HC", "HC", "HNN+", "HC", "HC", "HC", "HC", "HNN+", "HC",
                "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DUVHUX10
        /// </summary>
        // @cdk.inchi InChI=1S/C10H8N2S3/c1-7-9(14-15-10(7)13)3-2-8-6-11-4-5-12-8/h2-6H,1H3/b3-2+
        [TestMethod()]
        public void TestDUVHUX10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[13], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Double);
            container.AddBond(container.Atoms[3], container.Atoms[5], Double);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Double);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[20], Single);
            container.AddBond(container.Atoms[14], container.Atoms[21], Single);
            container.AddBond(container.Atoms[14], container.Atoms[22], Single);

            string[] expected = {"S", "S", "S=C", "NPYD", "NPYD", "CB", "CB", "CB", "CB", "C=C", "C=C", "CSS", "C=C",
                "C=C", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DUVXIB
        /// </summary>
        // @cdk.inchi InChI=1S/C5H5N5O2/c1-10-3-2(7-9-8-3)4(11)6-5(10)12/h1H3,(H,6,11,12)(H,7,8,9)
        [TestMethod()]
        public void TestDUVXIB()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);

            string[] expected = {"NC=O", "CONN", "NC=O", "C5B", "C5B", "C=ON", "N5A", "NPYL", "N5A", "O=CN", "CR", "O=CN",
                "HNCO", "HC", "HC", "HC", "HPYL"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DUWGAD
        /// </summary>
        // @cdk.inchi InChI=1S/C5H13ClN2P/c1-7-4-5-8(2,3)9(7)6/h4-5H2,1-3H3/q+1/t9-/m1/s1
        [TestMethod()]
        public void TestDUWGAD()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);

            string[] expected = {"P", "CL", "NR", "CR", "CR", "CR", "NR+", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DUWKUB
        /// </summary>
        // @cdk.inchi InChI=1S/C5H6Cl3N5O2/c1-14-13-4(5(6,7)8)10-3-2(9)11-15-12-3/h1H3,(H2,9,11)(H,10,12,13)
        [TestMethod()]
        public void TestDUWKUB()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[12], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Double);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[13], container.Atoms[18], Single);
            container.AddBond(container.Atoms[13], container.Atoms[19], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[16], Single);
            container.AddBond(container.Atoms[14], container.Atoms[17], Single);

            string[] expected = {"CL", "CL", "CL", "OFUR", "C5B", "OR", "NC=N", "N5A", "N5A", "C5B", "C=N", "N=C", "CR",
                "NC=N", "CR", "HC", "HC", "HC", "HNCN", "HNCN", "HNCN"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DUWRIW
        /// </summary>
        // @cdk.inchi InChI=1S/C6H9NO6/c8-2-4-6(10)3(9)1-5(13-4)7(11)12/h1,3-4,6,8-10H,2H2/t3-,4-,6+/m1/s1
        [TestMethod()]
        public void TestDUWRIW()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Double);
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);

            string[] expected = {"C=C", "NO2", "O2N", "O2N", "C=C", "CR", "OR", "CR", "OR", "CR", "OC=C", "CR", "OR", "HC",
                "HC", "HOR", "HC", "HOR", "HC", "HC", "HC", "HOR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DUXTIZ
        /// </summary>
        // @cdk.inchi InChI=1S/C2H4N2O4/c5-1(3-7)2(6)4-8/h7-8H,(H,3,5)(H,4,6)
        [TestMethod()]
        public void TestDUXTIZ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);

            string[] expected = { "C=ON", "NC=O", "-O-", "O=CN", "HNCO", "HO", "C=ON", "NC=O", "O=CN", "-O-", "HNCO", "HO" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DUXWUO
        /// </summary>
        // @cdk.inchi InChI=1S/C11H12N2O2S2/c1-8(14)13-10(9-6-4-3-5-7-9)16-11(12-13)17(2)15/h3-7,10H,1-2H3/t10-,17+/m0/s1
        [TestMethod()]
        public void TestDUXWUO()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[17], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[14], container.Atoms[16], Single);
            container.AddBond(container.Atoms[16], container.Atoms[26], Single);
            container.AddBond(container.Atoms[16], container.Atoms[27], Single);
            container.AddBond(container.Atoms[16], container.Atoms[28], Single);

            string[] expected = {"S", "CR", "NC=O", "N=C", "C=N", "CB", "CB", "CB", "CB", "CB", "CB", "C=ON", "CR", "O=CN",
                "S=O", "O=S", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DUXXAV
        /// </summary>
        // @cdk.inchi InChI=1S/C11H12N2O3S2/c1-8(14)13-10(9-6-4-3-5-7-9)18(16)11(12-13)17(2)15/h3-7,10H,1-2H3/t10-,17-,18+/m0/s1
        [TestMethod()]
        public void TestDUXXAV()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[17], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[18], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[23], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[22], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[12], container.Atoms[26], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[14], container.Atoms[16], Single);
            container.AddBond(container.Atoms[16], container.Atoms[27], Single);
            container.AddBond(container.Atoms[16], container.Atoms[28], Single);
            container.AddBond(container.Atoms[16], container.Atoms[29], Single);

            string[] expected = {"S=O", "CR", "NC=O", "N=C", "C=N", "CB", "CB", "CB", "CB", "CB", "CB", "C=ON", "CR",
                "O=CN", "S=O", "O=S", "CR", "O=S", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DUYNOA
        /// </summary>
        // @cdk.inchi InChI=1S/C11H22N4O/c1-8-5-9(2)14(12)10(3,6-8)16-11(4,7-8)15(9)13/h5-7,12-13H2,1-4H3/t8-,9+,10-,11+
        [TestMethod()]
        public void TestDUYNOA()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[20], Single);
            container.AddBond(container.Atoms[5], container.Atoms[21], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[22], Single);
            container.AddBond(container.Atoms[7], container.Atoms[23], Single);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[24], Single);
            container.AddBond(container.Atoms[9], container.Atoms[25], Single);
            container.AddBond(container.Atoms[10], container.Atoms[26], Single);
            container.AddBond(container.Atoms[10], container.Atoms[27], Single);
            container.AddBond(container.Atoms[10], container.Atoms[28], Single);
            container.AddBond(container.Atoms[11], container.Atoms[29], Single);
            container.AddBond(container.Atoms[11], container.Atoms[30], Single);
            container.AddBond(container.Atoms[11], container.Atoms[31], Single);
            container.AddBond(container.Atoms[12], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);
            container.AddBond(container.Atoms[13], container.Atoms[35], Single);
            container.AddBond(container.Atoms[13], container.Atoms[36], Single);
            container.AddBond(container.Atoms[13], container.Atoms[37], Single);
            container.AddBond(container.Atoms[14], container.Atoms[32], Single);
            container.AddBond(container.Atoms[14], container.Atoms[33], Single);
            container.AddBond(container.Atoms[14], container.Atoms[34], Single);
            container.AddBond(container.Atoms[15], container.Atoms[18], Single);
            container.AddBond(container.Atoms[15], container.Atoms[19], Single);

            string[] expected = {"CR", "OR", "CR", "NR", "CR", "CR", "CR", "CR", "NR", "CR", "CR", "CR", "NR", "CR", "CR",
                "NR", "HNR", "HNR", "HNR", "HNR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DUYPES
        /// </summary>
        // @cdk.inchi InChI=1S/C20H23N2O2/c1-21(2)20(22(3)4)24-19(17-13-9-6-10-14-17)15-18(23)16-11-7-5-8-12-16/h5-15H,1-4H3/q+1/b19-15+
        [TestMethod()]
        public void TestDUYPES()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Double);
            container.AddBond(container.Atoms[2], container.Atoms[8], Double);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[26], Single);
            container.AddBond(container.Atoms[4], container.Atoms[25], Single);
            container.AddBond(container.Atoms[4], container.Atoms[24], Single);
            container.AddBond(container.Atoms[5], container.Atoms[29], Single);
            container.AddBond(container.Atoms[5], container.Atoms[28], Single);
            container.AddBond(container.Atoms[5], container.Atoms[27], Single);
            container.AddBond(container.Atoms[6], container.Atoms[32], Single);
            container.AddBond(container.Atoms[6], container.Atoms[31], Single);
            container.AddBond(container.Atoms[6], container.Atoms[30], Single);
            container.AddBond(container.Atoms[7], container.Atoms[35], Single);
            container.AddBond(container.Atoms[7], container.Atoms[34], Single);
            container.AddBond(container.Atoms[7], container.Atoms[33], Single);
            container.AddBond(container.Atoms[9], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[10], container.Atoms[36], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[13], container.Atoms[37], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[38], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[15], container.Atoms[39], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[16], container.Atoms[40], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Double);
            container.AddBond(container.Atoms[17], container.Atoms[41], Single);
            container.AddBond(container.Atoms[18], container.Atoms[23], Single);
            container.AddBond(container.Atoms[18], container.Atoms[19], Double);
            container.AddBond(container.Atoms[19], container.Atoms[42], Single);
            container.AddBond(container.Atoms[19], container.Atoms[20], Single);
            container.AddBond(container.Atoms[20], container.Atoms[43], Single);
            container.AddBond(container.Atoms[20], container.Atoms[21], Double);
            container.AddBond(container.Atoms[21], container.Atoms[44], Single);
            container.AddBond(container.Atoms[21], container.Atoms[22], Single);
            container.AddBond(container.Atoms[22], container.Atoms[45], Single);
            container.AddBond(container.Atoms[22], container.Atoms[23], Double);
            container.AddBond(container.Atoms[23], container.Atoms[46], Single);

            string[] expected = {"OC=C", "O=CR", "NCN+", "NCN+", "CR", "CR", "CR", "CR", "CNN+", "C=C", "C=C", "C=OR",
                "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for DUYRAQ
        /// </summary>
        // @cdk.inchi InChI=1S/C9H22N2P2/c1-8(2,3)12-7-13(11-10-12)9(4,5)6/h10-11H,7H2,1-6H3/t12-,13-/m1/s1
        [TestMethod()]
        public void TestDUYRAQ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[10], container.Atoms[24], Single);
            container.AddBond(container.Atoms[10], container.Atoms[25], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[14], Single);
            container.AddBond(container.Atoms[12], container.Atoms[26], Single);
            container.AddBond(container.Atoms[12], container.Atoms[27], Single);
            container.AddBond(container.Atoms[12], container.Atoms[28], Single);
            container.AddBond(container.Atoms[13], container.Atoms[29], Single);
            container.AddBond(container.Atoms[13], container.Atoms[30], Single);
            container.AddBond(container.Atoms[13], container.Atoms[31], Single);
            container.AddBond(container.Atoms[14], container.Atoms[32], Single);
            container.AddBond(container.Atoms[14], container.Atoms[33], Single);
            container.AddBond(container.Atoms[14], container.Atoms[34], Single);

            string[] expected = {"P", "P", "NR", "HNR", "NR", "HNR", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "CR",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FACMIF
        /// </summary>
        // @cdk.inchi InChI=1S/C10H13N2OP/c1-6-10-8-3-4-9(5-8)14(10)12(11-6)7(2)13/h3-4,8-10H,5H2,1-2H3/t8-,9+,10+,14-/m0/s1
        [TestMethod()]
        public void TestFACMIF()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[24], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);

            string[] expected = {"P", "O=CN", "NC=O", "N=C", "C=ON", "CR", "C=N", "CR", "CR", "CR", "CR", "CR", "C=C",
                "C=C", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FACREG
        /// </summary>
        // @cdk.inchi InChI=1S/C5H9NO6/c7-1-2-3(8)4(9)5(12-2)6(10)11/h2-5,7-9H,1H2/t2-,3-,4-,5-/m1/s1
        [TestMethod()]
        public void TestFACREG()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[19], container.Atoms[20], Single);

            string[] expected = {"CR", "NO2", "O2N", "O2N", "CR", "OR", "CR", "OR", "CR", "OR", "CR", "HC", "HC", "HOR",
                "HC", "HOR", "HC", "HC", "HC", "HOR", "OR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FACYAJ
        /// </summary>
        // @cdk.inchi InChI=1S/C10H5NO3/c11-3-10-7-2-9-8(13-5-14-9)1-6(7)4-12-10/h1-2,4H,5H2
        [TestMethod()]
        public void TestFACYAJ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Double);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Triple);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[17], Single);
            container.AddBond(container.Atoms[13], container.Atoms[18], Single);

            string[] expected = {"C5A", "OFUR", "C5A", "C5B", "CB", "CB", "CB", "CB", "C5B", "CSP", "NSP", "OC=C", "OC=C",
                "CR", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FADMIG
        /// </summary>
        // @cdk.inchi InChI=1S/C7H6N2O/c10-7-5-3-1-2-4-6(5)8-9-7/h1-4H,(H2,8,9,10)
        [TestMethod()]
        public void TestFADMIG()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);

            string[] expected = {"NC=C", "NC=O", "C=ON", "CB", "CB", "CB", "CB", "CB", "CB", "O=CN", "HNCC", "HNCO", "HC",
                "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FADVEL
        /// </summary>
        // @cdk.inchi InChI=1S/C3H9NO7S3/c1-12(5,6)4(13(2,7)8)11-14(3,9)10/h1-3H3
        [TestMethod()]
        public void TestFADVEL()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[0], container.Atoms[4], Double);
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Double);
            container.AddBond(container.Atoms[1], container.Atoms[7], Double);
            container.AddBond(container.Atoms[1], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Double);
            container.AddBond(container.Atoms[2], container.Atoms[9], Double);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[11], container.Atoms[14], Single);
            container.AddBond(container.Atoms[11], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);
            container.AddBond(container.Atoms[12], container.Atoms[18], Single);
            container.AddBond(container.Atoms[12], container.Atoms[19], Single);
            container.AddBond(container.Atoms[13], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[21], Single);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);

            string[] expected = {"SO2N", "SO3", "SO2N", "O2S", "O2S", "OSO2", "O2S", "O2S", "O2S", "O2S", "NSO2", "CR",
                "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FADVUB
        /// </summary>
        // @cdk.inchi InChI=1S/C5H12N2O3S/c1-11(7,10)3-2-4(6)5(8)9/h4,7H,2-3,6H2,1H3,(H,8,9)/t4-,11-/m0/s1
        [TestMethod()]
        public void TestFADVUB()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[22], Single);
            container.AddBond(container.Atoms[7], container.Atoms[21], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);

            string[] expected = {"SNO", "O-S", "NSO", "CR", "CR", "CR", "CR", "NR+", "CO2M", "O2CM", "O2CM", "HNSO", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HNR+", "HNR+", "HNR+"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FAGBUK
        /// </summary>
        // @cdk.inchi InChI=1S/C10H24N4O2P/c1-11(2)9(12(3)4)17(15,16)10(13(5)6)14(7)8/h1-8H3/q+1
        [TestMethod()]
        public void TestFAGBUK()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[22], Single);
            container.AddBond(container.Atoms[0], container.Atoms[21], Double);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[22], container.Atoms[24], Single);
            container.AddBond(container.Atoms[22], container.Atoms[23], Double);
            container.AddBond(container.Atoms[23], container.Atoms[26], Single);
            container.AddBond(container.Atoms[23], container.Atoms[25], Single);
            container.AddBond(container.Atoms[24], container.Atoms[28], Single);
            container.AddBond(container.Atoms[24], container.Atoms[27], Single);
            container.AddBond(container.Atoms[25], container.Atoms[31], Single);
            container.AddBond(container.Atoms[25], container.Atoms[30], Single);
            container.AddBond(container.Atoms[25], container.Atoms[29], Single);
            container.AddBond(container.Atoms[26], container.Atoms[34], Single);
            container.AddBond(container.Atoms[26], container.Atoms[33], Single);
            container.AddBond(container.Atoms[26], container.Atoms[32], Single);
            container.AddBond(container.Atoms[27], container.Atoms[37], Single);
            container.AddBond(container.Atoms[27], container.Atoms[36], Single);
            container.AddBond(container.Atoms[27], container.Atoms[35], Single);
            container.AddBond(container.Atoms[28], container.Atoms[40], Single);
            container.AddBond(container.Atoms[28], container.Atoms[39], Single);
            container.AddBond(container.Atoms[28], container.Atoms[38], Single);

            string[] expected = {"PO2", "O2P", "NCN+", "NCN+", "CNN+", "CR", "CR", "CR", "CR", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "O2P", "CNN+", "NCN+", "NCN+", "CR", "CR", "CR", "CR",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FAGCOF
        /// </summary>
        // @cdk.inchi InChI=1S/C10H11NO3S/c1-15(13,14)11-9(7-10(11)12)8-5-3-2-4-6-8/h2-6,9H,7H2,1H3/t9-/m0/s1
        [TestMethod()]
        public void TestFAGCOF()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[14], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);
            container.AddBond(container.Atoms[14], container.Atoms[23], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[25], Single);

            string[] expected = {"SO2N", "O=CN", "O2S", "O2S", "NSO2", "C=ON", "CR4R", "CR4R", "CB", "CB", "CB", "CB",
                "CB", "CB", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FAGLII
        /// </summary>
        // @cdk.inchi InChI=1S/C6H4ClO2P/c7-10-8-5-3-1-2-4-6(5)9-10/h1-4H
        [TestMethod()]
        public void TestFAGLII()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);

            string[] expected = { "CL", "P", "OPO", "OPO", "CB", "CB", "CB", "CB", "CB", "CB", "HC", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FAGVEO
        /// </summary>
        // @cdk.inchi InChI=1S/C4O4/c5-1-2(6)4(8)3(1)7
        [TestMethod()]
        public void TestFAGVEO()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Double);
            container.AddBond(container.Atoms[1], container.Atoms[5], Double);
            container.AddBond(container.Atoms[2], container.Atoms[6], Double);
            container.AddBond(container.Atoms[3], container.Atoms[7], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);

            string[] expected = { "O=CR", "O=CR", "O=CR", "O=CR", "C=OR", "C=OR", "C=OR", "C=OR" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FAGZOC
        /// </summary>
        // @cdk.inchi InChI=1S/C6H2Br2O4/c7-1-3(9)5(11)2(8)6(12)4(1)10/h9,12H/p-2
        [TestMethod()]
        public void TestFAGZOC()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Br", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("Br", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[5], Double);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Double);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Double);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);

            string[] expected = { "BR", "OM2", "O=CR", "C=C", "C=OR", "C=C", "C=OR", "C=C", "O=CR", "C=C", "OM2", "BR" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FAHPUZ
        /// </summary>
        // @cdk.inchi InChI=1S/C12H12N2O2S/c15-17(16)7-8-5-6-10-9-3-1-2-4-11(9)14(17)12(10)13-8/h1-6,8,10,12-13H,7H2/t8-,10+,12-/m1/s1
        [TestMethod()]
        public void TestFAHPUZ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[16], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[16], Single);
            container.AddBond(container.Atoms[14], container.Atoms[25], Single);
            container.AddBond(container.Atoms[15], container.Atoms[28], Single);
            container.AddBond(container.Atoms[16], container.Atoms[26], Single);
            container.AddBond(container.Atoms[16], container.Atoms[27], Single);

            string[] expected = {"SO2N", "O2S", "O2S", "NSO2", "CB", "CB", "CB", "CB", "CB", "CB", "CR", "CR", "C=C",
                "C=C", "CR", "NR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HNR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FAHSUC
        /// </summary>
        // @cdk.inchi InChI=1S/C8H11N5O/c1-9-6-5-7(12(2)4-10-6)13(3)8(14)11-5/h4H,1-3H3,(H,11,14)/p+1
        [TestMethod()]
        public void TestFAHSUC()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[20], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[24], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[14], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[17], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Single);

            string[] expected = {"NPYD", "CB", "NPD+", "CB", "CB", "CB", "NC=O", "CONN", "NC=O", "O=CN", "CR", "CR",
                "NC=N", "CR", "HC", "HC", "HC", "HC", "HC", "HNCO", "HC", "HC", "HNCN", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FAHYUI
        /// </summary>
        // @cdk.inchi InChI=1S/C9H11NOS/c1-10(11)9(12-2)8-6-4-3-5-7-8/h3-7H,1-2H3/b10-9-
        [TestMethod()]
        public void TestFAHYUI()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Double);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);

            string[] expected = {"S", "OXN", "N2OX", "CB", "CB", "CB", "CB", "CB", "CB", "C=N", "CR", "CR", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FAHZET
        /// </summary>
        // @cdk.inchi InChI=1S/C10H9NO4S/c1-7-9(8-5-3-2-4-6-8)15-16(13,14)11-10(7)12/h2-6H,1H3,(H,11,12)
        [TestMethod()]
        public void TestFAHZET()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[0], container.Atoms[4], Double);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Double);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[21], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[9], container.Atoms[23], Single);
            container.AddBond(container.Atoms[9], container.Atoms[24], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[18], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[14], container.Atoms[19], Single);
            container.AddBond(container.Atoms[15], container.Atoms[20], Single);

            string[] expected = {"SO3", "OSO2", "O=CN", "O2S", "O2S", "NSO3", "C=C", "C=C", "C=ON", "CR", "CB", "CB", "CB",
                "CB", "CB", "CB", "HC", "HC", "HC", "HC", "HC", "HNSO", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FAJWIW
        /// </summary>
        // @cdk.inchi InChI=1S/C5H7N3O3/c1-10-4-6-3(9)7-5(8-4)11-2/h1-2H3,(H,6,7,8,9)
        [TestMethod()]
        public void TestFAJWIW()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Double);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Double);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Double);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);

            string[] expected = {"OC=N", "O=CN", "OC=N", "NC=O", "N=C", "N=C", "CR", "CONN", "CR", "C=N", "C=N", "HNCO",
                "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FAMHAC
        /// </summary>
        // @cdk.inchi InChI=1S/C10H14NOPS/c1-8-9-6-4-5-7-10(9)13(14,12-8)11(2)3/h4-8H,1-3H3/t8-,13-/m1/s1
        [TestMethod()]
        public void TestFAMHAC()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);
            container.AddBond(container.Atoms[13], container.Atoms[27], Single);

            string[] expected = {"S-P", "PO", "-OP", "NR", "CR", "CR", "CR", "CB", "CB", "CB", "CB", "CB", "CB", "CR",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FAMYUN
        /// </summary>
        // @cdk.inchi InChI=1S/C4H4BrNO2/c5-6-3(7)1-2-4(6)8/h1-2H2
        [TestMethod()]
        public void TestFAMYUN()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Br", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);

            string[] expected = { "BR", "NC=O", "C=ON", "O=CN", "CR", "CR", "C=ON", "O=CN", "HC", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FAPLUD
        /// </summary>
        // @cdk.inchi InChI=1S/C2H4N3O3PS/c6-1-3-2(7)5-9(8,10)4-1/h(H4,3,4,5,6,7,8,10)/p-1
        [TestMethod()]
        public void TestFAPLUD()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Double);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Double);
            container.AddBond(container.Atoms[5], container.Atoms[9], Double);

            string[] expected = {"PO2", "NC=O", "NC=O", "NC=O", "CONN", "CONN", "SM", "O2P", "O=CN", "O=CN", "HNCO",
                "HNCO", "HNCO"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FARMAM
        /// </summary>
        // @cdk.inchi InChI=1S/C12H8N4/c1-3-7-15-9(5-1)13-11-12(15)16-8-4-2-6-10(16)14-11/h1-8H
        [TestMethod()]
        public void TestFARMAM()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[15], Single);
            container.AddBond(container.Atoms[0], container.Atoms[16], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[17], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[18], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[19], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);

            string[] expected = {"C=C", "C=C", "C=C", "C=C", "C5A", "N5B", "C5B", "N5B", "C5A", "C=C", "C=C", "C=C", "C=C",
                "NPYL", "C5A", "NPYL", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FARSOG
        /// </summary>
        // @cdk.inchi InChI=1S/C12N8S2/c13-1-5(2-14)7-9-11(19-21-17-9)8(6(3-15)4-16)12-10(7)18-22-20-12
        [TestMethod()]
        public void TestFARSOG()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Double);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Double);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Triple);
            container.AddBond(container.Atoms[10], container.Atoms[12], Triple);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[17], Double);
            container.AddBond(container.Atoms[14], container.Atoms[18], Double);
            container.AddBond(container.Atoms[15], container.Atoms[19], Triple);
            container.AddBond(container.Atoms[16], container.Atoms[20], Triple);
            container.AddBond(container.Atoms[17], container.Atoms[21], Single);
            container.AddBond(container.Atoms[18], container.Atoms[21], Single);

            string[] expected = {"STHI", "N5A", "C5B", "C5B", "N5A", "C=C", "C=C", "C=C", "C=C", "CSP", "CSP", "NSP",
                "NSP", "C5B", "C5B", "CSP", "CSP", "N5A", "N5A", "NSP", "NSP", "STHI"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FARWEA
        /// </summary>
        // @cdk.inchi InChI=1S/C3H6N2S2/c1-2(4)5-3(6)7/h1H3,(H3,4,5,6,7)/p-1
        [TestMethod()]
        public void TestFARWEA()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", -1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Double);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Double);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);

            string[] expected = { "S2CM", "S2CM", "N=C", "NC=N", "CS2M", "C=N", "CR", "HNCN", "HNCN", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FASGUB
        /// </summary>
        // @cdk.inchi InChI=1S/CH8N6/c2-5-1(6-3)7-4/h2-4H2,(H2,5,6,7)
        [TestMethod()]
        public void TestFASGUB()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);

            string[] expected = {"CGD", "N=C", "NR", "NC=N", "NR", "NC=N", "NR", "HNR", "HNR", "HNCN", "HNR", "HNR",
                "HNCN", "HNR", "HNR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FASJIS
        /// </summary>
        // @cdk.inchi InChI=1S/C10H19N5O2P2S/c1-13(2)18(16)11-14(3)19(20,15(4)12-18)17-10-8-6-5-7-9-10/h5-9H,1-4H3,(H2,11,12,16)/t18-,19+
        [TestMethod()]
        public void TestFASJIS()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 1));
            container.Atoms.Add(NewAtm("P", 1));
            container.Atoms.Add(NewAtm("S", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[26], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);
            container.AddBond(container.Atoms[15], container.Atoms[25], Single);
            container.AddBond(container.Atoms[16], container.Atoms[27], Single);
            container.AddBond(container.Atoms[16], container.Atoms[28], Single);
            container.AddBond(container.Atoms[16], container.Atoms[29], Single);
            container.AddBond(container.Atoms[17], container.Atoms[30], Single);
            container.AddBond(container.Atoms[17], container.Atoms[31], Single);
            container.AddBond(container.Atoms[17], container.Atoms[32], Single);
            container.AddBond(container.Atoms[18], container.Atoms[33], Single);
            container.AddBond(container.Atoms[18], container.Atoms[34], Single);
            container.AddBond(container.Atoms[18], container.Atoms[35], Single);
            container.AddBond(container.Atoms[19], container.Atoms[36], Single);
            container.AddBond(container.Atoms[19], container.Atoms[37], Single);
            container.AddBond(container.Atoms[19], container.Atoms[38], Single);

            string[] expected = {"PO", "PO", "S-P", "-OP", "OP", "NR", "NR", "NR", "NR", "NR", "CB", "CB", "CB", "CB",
                "CB", "CB", "CR", "CR", "CR", "CR", "HNR", "HC", "HC", "HC", "HC", "HC", "HNR", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FATLIV
        /// </summary>
        // @cdk.inchi InChI=1S/C12H16N3O3P/c1-18-11-4-2-3-10(9-11)12(16)13-19(17,14-5-6-14)15-7-8-15/h2-4,9H,5-8H2,1H3,(H,13,16,17)
        [TestMethod()]
        public void TestFATLIV()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Double);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[18], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[25], Single);
            container.AddBond(container.Atoms[15], container.Atoms[26], Single);
            container.AddBond(container.Atoms[15], container.Atoms[27], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[16], container.Atoms[28], Single);
            container.AddBond(container.Atoms[16], container.Atoms[29], Single);
            container.AddBond(container.Atoms[17], container.Atoms[30], Single);
            container.AddBond(container.Atoms[17], container.Atoms[31], Single);
            container.AddBond(container.Atoms[18], container.Atoms[32], Single);
            container.AddBond(container.Atoms[18], container.Atoms[33], Single);
            container.AddBond(container.Atoms[18], container.Atoms[34], Single);

            string[] expected = {"PO", "OP", "O=CN", "OC=C", "NC=O", "NR", "NR", "C=ON", "CB", "CB", "CB", "CB", "CB",
                "CB", "CR3R", "CR3R", "CR3R", "CR3R", "CR", "HNCO", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FAXFUF10
        /// </summary>
        // @cdk.inchi InChI=1S/C5H4N4O/c10-5-3-1-8-9-4(3)6-2-7-5/h1-2H,(H2,6,7,8,9,10)/p+1
        [TestMethod()]
        public void TestFAXFUF10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[8], Double);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Double);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);

            string[] expected = {"O=CN", "NCN+", "NCN+", "NPYL", "N5A", "CNN+", "C5B", "C5B", "C=ON", "C5A", "HNN+", "HC",
                "HNN+", "HC", "HPYL"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FAXVAB
        /// </summary>
        // @cdk.inchi InChI=1S/C8H8N2O3S/c1-10-8(11)6-4-2-3-5-7(6)9-14(10,12)13/h2-5,9H,1H3
        [TestMethod()]
        public void TestFAXVAB()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[3], container.Atoms[12], Double);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[13], container.Atoms[21], Single);
            container.AddBond(container.Atoms[13], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[19], Single);

            string[] expected = {"SO2N", "O2S", "O2S", "O=CN", "NSO2", "NSO2", "CB", "CB", "CB", "CB", "CB", "CB", "C=ON",
                "CR", "HNSO", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FAXVEF
        /// </summary>
        // @cdk.inchi InChI=1S/C9H14N/c1-2-3-7-10-8-5-4-6-9-10/h4-6,8-9H,2-3,7H2,1H3/q+1
        [TestMethod()]
        public void TestFAXVEF()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[23], Single);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);

            string[] expected = {"NPD+", "CB", "CB", "CB", "CB", "CB", "CR", "CR", "CR", "CR", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FAXVIJ
        /// </summary>
        // @cdk.inchi InChI=1S/C12H6F3N3O2/c13-12(14,15)7-5-8-11(9(6-7)18(19)20)17-4-2-1-3-10(17)16-8/h1-6H
        [TestMethod()]
        public void TestFAXVIJ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[20], Single);
            container.AddBond(container.Atoms[0], container.Atoms[19], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[21], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[22], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[23], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[19], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[24], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[14], container.Atoms[18], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[15], container.Atoms[17], Double);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[18], container.Atoms[19], Single);

            string[] expected = {"C=C", "C=C", "C=C", "C=C", "C5A", "N5B", "C5B", "CB", "CB", "CR", "F", "F", "F", "CB",
                "CB", "NO2", "O2N", "O2N", "C5A", "NPYL", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FAZBAJ
        /// </summary>
        // @cdk.inchi InChI=1S/C5H4N2OS/c1-9-5(8)4(2-6)3-7/h8H,1H3/p-1
        [TestMethod()]
        public void TestFAZBAJ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Triple);
            container.AddBond(container.Atoms[5], container.Atoms[7], Triple);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);

            string[] expected = { "S", "OM2", "C=C", "C=C", "CSP", "CSP", "NSP", "NSP", "CR", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FAZKUM
        /// </summary>
        // @cdk.inchi InChI=1S/C2Cl8Si2/c3-1(11(5,6)7)2(4)12(8,9)10/b2-1+
        [TestMethod()]
        public void TestFAZKUM()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Si", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Si", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);

            string[] expected = { "CL", "CL", "CL", "CL", "SI", "C=C", "C=C", "CL", "SI", "CL", "CL", "CL" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FBATNB
        /// </summary>
        // @cdk.inchi InChI=1S/C10H11FN4O6/c1-10(2,3)12(11)9-7(14(18)19)4-6(13(16)17)5-8(9)15(20)21/h4-5H,1-3H3
        [TestMethod()]
        public void TestFBATNB()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.AddBond(container.Atoms[0], container.Atoms[22], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[21], Single);
            container.AddBond(container.Atoms[1], container.Atoms[13], Single);
            container.AddBond(container.Atoms[1], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[23], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[24], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[25], Single);
            container.AddBond(container.Atoms[7], container.Atoms[22], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[23], container.Atoms[27], Double);
            container.AddBond(container.Atoms[23], container.Atoms[26], Single);
            container.AddBond(container.Atoms[24], container.Atoms[29], Double);
            container.AddBond(container.Atoms[24], container.Atoms[28], Single);
            container.AddBond(container.Atoms[25], container.Atoms[31], Double);
            container.AddBond(container.Atoms[25], container.Atoms[30], Single);

            string[] expected = {"CB", "CR", "CB", "CB", "CB", "CB", "CB", "CR", "CR", "CR", "F", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "NC=C", "NO2", "NO2", "NO2", "O2N", "O2N", "O2N", "O2N",
                "O2N", "O2N"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FECXEQ
        /// </summary>
        // @cdk.inchi InChI=1S/C9H12N2O/c1-7(2)8-4-5-11(3)10-6-9(8)12/h4-6H,1-3H3
        [TestMethod()]
        public void TestFECXEQ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[10], Double);
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[8], container.Atoms[22], Single);
            container.AddBond(container.Atoms[8], container.Atoms[23], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);

            string[] expected = {"C=N", "C=OR", "C=C", "C=C", "C=C", "C=C", "CR", "CR", "CR", "NC=C", "N=C", "O=CR", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FEGSEP
        /// </summary>
        // @cdk.inchi InChI=1S/C4H8NO4P/c6-3-1-2-4(5-3)10(7,8)9/h4H,1-2H2,(H,5,6)(H2,7,8,9)/t4-/m0/s1
        [TestMethod()]
        public void TestFEGSEP()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);

            string[] expected = {"PO3", "OPO2", "OPO2", "OP", "O=CN", "NC=O", "CR", "CR", "CR", "C=ON", "HOP", "HOP", "HC",
                "HNCO", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FEHDAX
        /// </summary>
        // @cdk.inchi InChI=1S/C5H7NO/c1-3-2-4(3)5(6)7/h4H,1-2H2,(H2,6,7)/t4-/m0/s1
        [TestMethod()]
        public void TestFEHDAX()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);

            string[] expected = {"C=C", "CR3R", "CR3R", "C=C", "C=ON", "O=CN", "NC=O", "HC", "HC", "HC", "HC", "HC",
                "HNCO", "HNCO"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FEJJEJ
        /// </summary>
        // @cdk.inchi InChI=1S/C12H11NO/c1-2-10-11(13-12(10)14)8-9-6-4-3-5-7-9/h3-7,11H,1,8H2,(H,13,14)/t11-/m1/s1
        [TestMethod()]
        public void TestFEJJEJ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);
            container.AddBond(container.Atoms[13], container.Atoms[24], Single);

            string[] expected = {"O=CN", "C=ON", "CE4R", "CR4R", "NC=O", "=C=", "C=C", "CR", "CB", "CB", "CB", "CB", "CB",
                "CB", "HNCO", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FEJKIO
        /// </summary>
        // @cdk.inchi InChI=1S/C12H22N2/c1-2-11(1)9-13-5-7-14(8-6-13)10-12-3-4-12/h11-12H,1-10H2/p+2
        [TestMethod()]
        public void TestFEJKIO()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[19], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[20], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[19], container.Atoms[21], Single);
            container.AddBond(container.Atoms[19], container.Atoms[22], Single);
            container.AddBond(container.Atoms[19], container.Atoms[23], Single);
            container.AddBond(container.Atoms[20], container.Atoms[21], Single);
            container.AddBond(container.Atoms[20], container.Atoms[24], Single);
            container.AddBond(container.Atoms[20], container.Atoms[25], Single);
            container.AddBond(container.Atoms[21], container.Atoms[26], Single);
            container.AddBond(container.Atoms[21], container.Atoms[27], Single);
            container.AddBond(container.Atoms[26], container.Atoms[28], Single);
            container.AddBond(container.Atoms[26], container.Atoms[29], Single);
            container.AddBond(container.Atoms[26], container.Atoms[30], Single);
            container.AddBond(container.Atoms[28], container.Atoms[31], Single);
            container.AddBond(container.Atoms[28], container.Atoms[32], Single);
            container.AddBond(container.Atoms[28], container.Atoms[33], Single);
            container.AddBond(container.Atoms[31], container.Atoms[32], Single);
            container.AddBond(container.Atoms[31], container.Atoms[34], Single);
            container.AddBond(container.Atoms[31], container.Atoms[35], Single);
            container.AddBond(container.Atoms[32], container.Atoms[36], Single);
            container.AddBond(container.Atoms[32], container.Atoms[37], Single);

            string[] expected = {"NR+", "CR", "CR", "CR", "CR3R", "CR3R", "CR3R", "HNR+", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "CR", "CR", "NR+", "HC", "HC", "HC", "HC", "CR", "HNR+", "CR3R",
                "HC", "HC", "CR3R", "CR3R", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FELYIE
        /// </summary>
        // @cdk.inchi InChI=1S/C7H9NO2S/c9-4-3-8-7(11)6-2-1-5-10-6/h1-2,5,9H,3-4H2,(H,8,11)
        [TestMethod()]
        public void TestFELYIE()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Double);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);

            string[] expected = {"S=C", "OFUR", "OR", "NC=S", "C=SN", "C5A", "C5B", "C5B", "C5A", "CR", "CR", "HC", "HC",
                "HC", "HNCS", "HOR", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FELYUQ
        /// </summary>
        // @cdk.inchi InChI=1S/C10H11NO3/c1-7(12)9-3-5-10(6-4-9)11(14)8(2)13/h3-6,14H,1-2H3
        [TestMethod()]
        public void TestFELYUQ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[14], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[15], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[13], container.Atoms[24], Single);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);

            string[] expected = {"CB", "CB", "CB", "CB", "CB", "CB", "C=OR", "O=CR", "CR", "NC=O", "-O-", "C=ON", "O=CN",
                "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HO", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FEMGEJ
        /// </summary>
        // @cdk.inchi InChI=1S/C10H14O2/c11-10(12)9-7-5-3-1-2-4-6-8(7)9/h3,5,7-9H,1-2,4,6H2,(H,11,12)/p-1/b5-3-/t7-,8+,9+/m1/s1
        [TestMethod()]
        public void TestFEMGEJ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[11], Double);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[8], container.Atoms[22], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[23], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[24], Single);

            string[] expected = {"O2CM", "O2CM", "CR3R", "C=C", "C=C", "CR", "CR", "CR", "CR", "CR3R", "CR3R", "CO2M",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FENCOQ
        /// </summary>
        // @cdk.inchi InChI=1S/C5H7N3O3/c1-3(6-9)5-4(2)8(10)11-7-5/h9H,1-2H3/b6-3+
        [TestMethod()]
        public void TestFENCOQ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Double);
            container.AddBond(container.Atoms[4], container.Atoms[7], Double);
            container.AddBond(container.Atoms[5], container.Atoms[9], Double);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[14], Single);

            string[] expected = {"OFUR", "OXN", "-O-", "N5AX", "N5A", "N=C", "C5B", "C5B", "CR", "C=N", "CR", "HO", "HC",
                "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FENHAH
        /// </summary>
        // @cdk.inchi InChI=1S/C5H7N3O2/c1-3-7-4(8-10-3)5(9)6-2/h1-2H3,(H,6,9)
        [TestMethod()]
        public void TestFENHAH()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Double);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);

            string[] expected = {"C5B", "N5B", "C5A", "OFUR", "N5A", "C=ON", "O=CN", "NC=O", "CR", "CR", "HNCO", "HC",
                "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FENJIR
        /// </summary>
        // @cdk.inchi InChI=1S/C9H17N3S2/c1-8(2)9(11(3)4)12(5-6-14-9)7(13)10-8/h5-6H2,1-4H3,(H,10,13)/t9-/m1/s1
        [TestMethod()]
        public void TestFENJIR()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[14], Single);
            container.AddBond(container.Atoms[1], container.Atoms[15], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[16], Single);
            container.AddBond(container.Atoms[2], container.Atoms[17], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[11], container.Atoms[24], Single);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[12], container.Atoms[26], Single);
            container.AddBond(container.Atoms[12], container.Atoms[27], Single);
            container.AddBond(container.Atoms[13], container.Atoms[28], Single);
            container.AddBond(container.Atoms[13], container.Atoms[29], Single);
            container.AddBond(container.Atoms[13], container.Atoms[30], Single);

            string[] expected = {"S", "CR", "CR", "NC=S", "C=SN", "S=C", "NC=S", "CR", "CR", "NR", "CR", "CR", "CR", "CR",
                "HC", "HC", "HC", "HC", "HNCS", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FENJOX
        /// </summary>
        // @cdk.inchi InChI=1S/C10H19N3S2/c1-5-10(2,8-11-6-7-15-8)12-9(14)13(3)4/h5-7H2,1-4H3,(H,12,14)/t10-/m0/s1
        [TestMethod()]
        public void TestFENJOX()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[33], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[22], Single);
            container.AddBond(container.Atoms[7], container.Atoms[21], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[25], Single);
            container.AddBond(container.Atoms[8], container.Atoms[24], Single);
            container.AddBond(container.Atoms[8], container.Atoms[23], Single);
            container.AddBond(container.Atoms[9], container.Atoms[26], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[29], Single);
            container.AddBond(container.Atoms[13], container.Atoms[28], Single);
            container.AddBond(container.Atoms[13], container.Atoms[27], Single);
            container.AddBond(container.Atoms[14], container.Atoms[32], Single);
            container.AddBond(container.Atoms[14], container.Atoms[31], Single);
            container.AddBond(container.Atoms[14], container.Atoms[30], Single);

            string[] expected = {"S", "C=N", "N=C", "CR", "CR", "CR", "CR", "CR", "CR", "NC=S", "C=SN", "S=C", "NC=S",
                "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HNCS", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FENJUD
        /// </summary>

        [TestMethod()]
        public void TestFENJUD()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[14], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[11], container.Atoms[24], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[12], container.Atoms[26], Single);
            container.AddBond(container.Atoms[13], container.Atoms[27], Single);

            string[] expected = {"NC=S", "C=SN", "S=C", "NC=O", "C=ON", "O=CN", "CR", "CR", "CR", "CR", "CR", "CR", "CR",
                "S", "HNCS", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HS"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FENNUH
        /// </summary>
        // @cdk.inchi InChI=1S/C5H13N2P/c1-6(2)5(8)7(3)4/h8H,1-4H3
        [TestMethod()]
        public void TestFENNUH()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);

            string[] expected = {"-P=C", "NC=P", "NC=P", "C=P", "CR", "CR", "CR", "CR", "HP", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FENYIG
        /// </summary>
        // @cdk.inchi InChI=1S/C12H16N4O4/c1-12(2,3)20-11(19)7-5-4-6-15-9(17)8(14-13)10(18)16(7)15/h7H,4-6H2,1-3H3/t7-/m1/s1
        [TestMethod()]
        public void TestFENYIG()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[2], container.Atoms[11], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[22], Single);
            container.AddBond(container.Atoms[7], container.Atoms[21], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[24], Single);
            container.AddBond(container.Atoms[8], container.Atoms[23], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[26], Single);
            container.AddBond(container.Atoms[9], container.Atoms[25], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[13], container.Atoms[15], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[16], container.Atoms[19], Single);
            container.AddBond(container.Atoms[16], container.Atoms[18], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[17], container.Atoms[29], Single);
            container.AddBond(container.Atoms[17], container.Atoms[28], Single);
            container.AddBond(container.Atoms[17], container.Atoms[27], Single);
            container.AddBond(container.Atoms[18], container.Atoms[32], Single);
            container.AddBond(container.Atoms[18], container.Atoms[31], Single);
            container.AddBond(container.Atoms[18], container.Atoms[30], Single);
            container.AddBond(container.Atoms[19], container.Atoms[35], Single);
            container.AddBond(container.Atoms[19], container.Atoms[34], Single);
            container.AddBond(container.Atoms[19], container.Atoms[33], Single);

            string[] expected = {"C=ON", "O=CN", "C=N", "C=ON", "O=CN", "NC=O", "CR", "CR", "CR", "CR", "NC=O", "=N=",
                "NAZT", "COO", "O=CO", "OC=O", "CR", "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FEPWAY
        /// </summary>
        // @cdk.inchi InChI=1S/C3H6N2S2/c1-2(4)5-3(6)7/h1H3,(H3,4,5,6,7)
        [TestMethod()]
        public void TestFEPWAY()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", -1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Double);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Double);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);

            string[] expected = {"S2CM", "S2CM", "NCN+", "NCN+", "CS2M", "CNN+", "CR", "HNN+", "HNN+", "HNN+", "HC", "HC",
                "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FEPWOM
        /// </summary>
        // @cdk.inchi InChI=1S/C4F4N2S2/c5-3(6,11-1-9)4(7,8)12-2-10
        [TestMethod()]
        public void TestFEPWOM()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Triple);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Triple);

            string[] expected = { "S", "F", "F", "NSP", "CR", "CSP", "CR", "S", "F", "F", "CSP", "NSP" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FESCAH
        /// </summary>
        // @cdk.inchi InChI=1S/C3H3NO3/c5-1-4(2-6)3-7/h1-3H
        [TestMethod()]
        public void TestFESCAH()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Double);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Double);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);

            string[] expected = { "NC=O", "C=ON", "O=CN", "HC", "C=ON", "C=ON", "O=CN", "HC", "O=CN", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FESMIZ
        /// </summary>
        // @cdk.inchi InChI=1S/C9H9Cl3N2O2/c10-9(11,12)8(15)16-14-7(13)6-4-2-1-3-5-6/h1-5,8,15H,(H2,13,14)/t8-/m1/s1
        [TestMethod()]
        public void TestFESMIZ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Double);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[15], Single);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);

            string[] expected = {"CL", "CL", "CL", "CR", "CR", "C=N", "CB", "CB", "CB", "CB", "CB", "CB", "N=C", "NC=N",
                "OR", "OR", "HC", "HC", "HC", "HC", "HC", "HC", "HNCN", "HNCN", "HOR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FETRUR
        /// </summary>
        // @cdk.inchi InChI=1S/C6H12N4/c1-7-2-9-4-8(1)5-10(3-7)6-9/h1-6H2/p+1
        [TestMethod()]
        public void TestFETRUR()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[20], Single);
            container.AddBond(container.Atoms[20], container.Atoms[21], Single);
            container.AddBond(container.Atoms[20], container.Atoms[22], Single);

            string[] expected = {"NR+", "CR", "NR", "CR", "HNR+", "HC", "HC", "HC", "CR", "CR", "HC", "CR", "NR", "NR",
                "HC", "HC", "HC", "HC", "HC", "HC", "CR", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FETWOQ
        /// </summary>
        // @cdk.inchi InChI=1S/C11H13NO5/c13-5-3-4-8(11(5)17)9(10(4)16)12-6(14)1-2-7(12)15/h4-5,8-9,11,13,17H,1-3H2/t4-,5-,8+,9+,11-/m1/s1
        [TestMethod()]
        public void TestFETWOQ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[17], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[18], Single);
            container.AddBond(container.Atoms[1], container.Atoms[19], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[20], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[21], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[22], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[23], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Double);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[24], Single);
            container.AddBond(container.Atoms[8], container.Atoms[25], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[26], Single);
            container.AddBond(container.Atoms[9], container.Atoms[27], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Double);
            container.AddBond(container.Atoms[12], container.Atoms[28], Single);
            container.AddBond(container.Atoms[13], container.Atoms[29], Single);

            string[] expected = {"CR4R", "CR", "CR", "CR", "CR4R", "CR4R", "C=OR", "C=ON", "CR", "CR", "C=ON", "NC=O",
                "OR", "OR", "O=CR", "O=CN", "O=CN", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HOR", "HOR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FEVNUP
        /// </summary>
        // @cdk.inchi InChI=1S/C5H6Cl3N3O2/c1-11-3(12)5(6,7)2(10-8)9-4(11)13/h3,12H,1H3,(H,9,10,13)/t3-/m0/s1
        [TestMethod()]
        public void TestFEVNUP()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[12], container.Atoms[18], Single);

            string[] expected = {"CL", "CL", "CL", "NC=O", "CR", "CONN", "O=CN", "NC=O", "C=N", "N=C", "CR", "CR", "OR",
                "HC", "HC", "HC", "HNCO", "HC", "HOR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FEYLUQ
        /// </summary>
        // @cdk.inchi InChI=1S/C4H4N6O5/c11-9(12)7-1-2-8(10(13)14)4-3(7)5-15-6-4/h1-2H2
        [TestMethod()]
        public void TestFEYLUQ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Double);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Double);
            container.AddBond(container.Atoms[5], container.Atoms[13], Double);
            container.AddBond(container.Atoms[6], container.Atoms[14], Double);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);
            container.AddBond(container.Atoms[12], container.Atoms[18], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);

            string[] expected = {"OFUR", "O2N", "O2N", "O2N", "O2N", "N5A", "N5A", "NC=N", "NC=N", "NO2", "NO2", "CR",
                "CR", "C5B", "C5B", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FEZPOP
        /// </summary>
        // @cdk.inchi InChI=1S/C2H4N2O2S2/c5-1(7)3-4-2(6)8/h(H2,3,5,7)(H2,4,6,8)/p-2
        [TestMethod()]
        public void TestFEZPOP()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Double);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);

            string[] expected = { "S=C", "OM2", "NC=S", "C=SN", "HNCS", "NC=S", "C=SN", "HNCS", "S=C", "OM2" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FEZRUX
        /// </summary>
        // @cdk.inchi InChI=1S/C12H11N5O/c1-8-14-15-12-13-10(7-11(18)17(12)16-8)9-5-3-2-4-6-9/h2-7H,1H3,(H,13,15)(H,14,16)
        [TestMethod()]
        public void TestFEZRUX()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[9], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[18], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Double);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Double);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[6], container.Atoms[21], Single);
            container.AddBond(container.Atoms[6], container.Atoms[22], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[14], container.Atoms[25], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[26], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Double);
            container.AddBond(container.Atoms[16], container.Atoms[27], Single);
            container.AddBond(container.Atoms[17], container.Atoms[28], Single);

            string[] expected = {"O=CN", "NC=O", "NC=N", "N=C", "NC=N", "N=C", "CR", "C=N", "CGD", "C=ON", "C=C", "C=C",
                "CB", "CB", "CB", "CB", "CB", "CB", "HNCN", "HNCN", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FIBLIL
        /// </summary>
        // @cdk.inchi InChI=1S/C11H12N2O4/c14-11(12-7-1-2-8-17-12)9-3-5-10(6-4-9)13(15)16/h3-6H,1-2,7-8H2
        [TestMethod()]
        public void TestFIBLIL()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[21], Single);
            container.AddBond(container.Atoms[2], container.Atoms[22], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[23], Single);
            container.AddBond(container.Atoms[3], container.Atoms[24], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[25], Single);
            container.AddBond(container.Atoms[4], container.Atoms[26], Single);
            container.AddBond(container.Atoms[5], container.Atoms[27], Single);
            container.AddBond(container.Atoms[5], container.Atoms[28], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[14], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[19], Single);
            container.AddBond(container.Atoms[13], container.Atoms[20], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[16], Double);

            string[] expected = {"NC=O", "OR", "CR", "CR", "CR", "CR", "C=ON", "O=CN", "CB", "CB", "CB", "CB", "CB", "CB",
                "NO2", "O2N", "O2N", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FICDOK
        /// </summary>
        // @cdk.inchi InChI=1S/C5H7N3O3/c1-7-3-6-4(8(9)10)5(7)11-2/h3H,1-2H3
        [TestMethod()]
        public void TestFICDOK()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Double);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);

            string[] expected = {"NPYL", "CR", "C5A", "N5B", "C5B", "NO2", "O2N", "O2N", "C5A", "OC=C", "CR", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FIFGUW
        /// </summary>
        // @cdk.inchi InChI=1S/C11H20O2S/c1-9(2)6-10(3,4)8-11(7-9,13-8)14(5)12/h8H,6-7H2,1-5H3/t8-,11-,14-/m1/s1
        [TestMethod()]
        public void TestFIFGUW()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[10], container.Atoms[24], Single);
            container.AddBond(container.Atoms[11], container.Atoms[25], Single);
            container.AddBond(container.Atoms[11], container.Atoms[26], Single);
            container.AddBond(container.Atoms[11], container.Atoms[27], Single);
            container.AddBond(container.Atoms[12], container.Atoms[28], Single);
            container.AddBond(container.Atoms[12], container.Atoms[29], Single);
            container.AddBond(container.Atoms[12], container.Atoms[30], Single);
            container.AddBond(container.Atoms[13], container.Atoms[31], Single);
            container.AddBond(container.Atoms[13], container.Atoms[32], Single);
            container.AddBond(container.Atoms[13], container.Atoms[33], Single);

            string[] expected = {"S=O", "O=S", "OR", "CR3R", "CR3R", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "CR",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FIGYID
        /// </summary>
        // @cdk.inchi InChI=1S/C3H7N/c4-3-1-2-3/h3H,1-2,4H2
        [TestMethod()]
        public void TestFIGYID()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);

            string[] expected = { "CR3R", "CR3R", "CR3R", "NR", "HC", "HC", "HC", "HC", "HC", "HNR", "HNR" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FIHXID
        /// </summary>
        // @cdk.inchi InChI=1S/C11H13BrN2O5/c12-2-1-6-4-14(11(18)13-10(6)17)9-3-7(16)8(5-15)19-9/h1-2,4,7-9,15-16H,3,5H2,(H,13,17,18)/b2-1-/t7-,8+,9+/m0/s1
        [TestMethod()]
        public void TestFIHXID()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Br", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[18], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Double);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[30], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Double);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[31], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[25], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[10], container.Atoms[24], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[26], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Single);
            container.AddBond(container.Atoms[13], container.Atoms[27], Single);
            container.AddBond(container.Atoms[14], container.Atoms[16], Double);
            container.AddBond(container.Atoms[14], container.Atoms[17], Single);
            container.AddBond(container.Atoms[15], container.Atoms[28], Single);
            container.AddBond(container.Atoms[15], container.Atoms[29], Single);
            container.AddBond(container.Atoms[16], container.Atoms[19], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Double);
            container.AddBond(container.Atoms[17], container.Atoms[20], Single);
            container.AddBond(container.Atoms[18], container.Atoms[21], Single);

            string[] expected = {"BR", "OR", "O=CN", "OR", "O=CN", "OR", "NC=O", "NC=O", "CR", "CONN", "CR", "CR", "C=ON",
                "CR", "C=C", "CR", "C=C", "C=C", "C=C", "HC", "HC", "HC", "HC", "HC", "HC", "HNCO", "HC", "HC", "HC",
                "HC", "HOR", "HOR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FIKJAK
        /// </summary>
        // @cdk.inchi InChI=1S/C11H6N6/c12-2-8-1-10(4-13,5-14)3-11(6-15,7-16)9(8)17/h1,3,17H2
        [TestMethod()]
        public void TestFIKJAK()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[19], Single);
            container.AddBond(container.Atoms[2], container.Atoms[20], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[21], Single);
            container.AddBond(container.Atoms[4], container.Atoms[22], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Triple);
            container.AddBond(container.Atoms[7], container.Atoms[13], Triple);
            container.AddBond(container.Atoms[8], container.Atoms[14], Triple);
            container.AddBond(container.Atoms[9], container.Atoms[15], Triple);
            container.AddBond(container.Atoms[10], container.Atoms[16], Triple);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);

            string[] expected = {"C=C", "C=C", "CR", "CR", "CR", "CR", "CSP", "CSP", "CSP", "CSP", "CSP", "NC=C", "NSP",
                "NSP", "NSP", "NSP", "NSP", "HNCC", "HNCC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FIKZOO10
        /// </summary>
        // @cdk.inchi InChI=1S/C9H7NS2/c11-9-10-8(6-12-9)7-4-2-1-3-5-7/h1-6H,(H,10,11)
        [TestMethod()]
        public void TestFIKZOO10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[12], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Double);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);

            string[] expected = {"CB", "CB", "CB", "CB", "CB", "CB", "C=C", "C=C", "C=SN", "NC=S", "S", "S=C", "HC", "HC",
                "HC", "HC", "HC", "HC", "HNCS"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FILGEM
        /// </summary>
        // @cdk.inchi InChI=1S/C12H9N3O/c1-8-11(9-2-4-14-5-3-9)6-10(7-13)12(16)15-8/h2-6H,1H3,(H,15,16)
        [TestMethod()]
        public void TestFILGEM()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[12], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[2], container.Atoms[15], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[20], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Triple);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Double);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[11], container.Atoms[24], Single);
            container.AddBond(container.Atoms[12], container.Atoms[16], Single);

            string[] expected = {"C=C", "C=C", "C=ON", "C=C", "C=C", "CR", "CSP", "CB", "CB", "CB", "CB", "CB", "NC=O",
                "NSP", "NPYD", "O=CN", "HNCO", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FILNOD
        /// </summary>
        // @cdk.inchi InChI=1S/C9H11NO2S/c1-9(2)7-5-3-4-6-8(7)13(12)10(9)11/h3-6,11H,1-2H3/t13-/m1/s1
        [TestMethod()]
        public void TestFILNOD()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);

            string[] expected = {"S=O", "O=S", "-O-", "NR", "CR", "CB", "CB", "CB", "CB", "CB", "CB", "CR", "CR", "HO",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FINBIN
        /// </summary>
        // @cdk.inchi InChI=1S/C6H3Cl9O3P2/c7-4(8,9)1-16-20-17-2(5(10,11)12)19(1)3(18-20)6(13,14)15/h1-3H/t1-,2-,3-,19-,20+/m0/s1
        [TestMethod()]
        public void TestFINBIN()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[17], Single);
            container.AddBond(container.Atoms[1], container.Atoms[17], Single);
            container.AddBond(container.Atoms[2], container.Atoms[17], Single);
            container.AddBond(container.Atoms[3], container.Atoms[18], Single);
            container.AddBond(container.Atoms[4], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);
            container.AddBond(container.Atoms[9], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);
            container.AddBond(container.Atoms[10], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[14], Single);
            container.AddBond(container.Atoms[12], container.Atoms[15], Single);
            container.AddBond(container.Atoms[13], container.Atoms[16], Single);
            container.AddBond(container.Atoms[14], container.Atoms[17], Single);
            container.AddBond(container.Atoms[14], container.Atoms[20], Single);
            container.AddBond(container.Atoms[15], container.Atoms[18], Single);
            container.AddBond(container.Atoms[15], container.Atoms[21], Single);
            container.AddBond(container.Atoms[16], container.Atoms[19], Single);
            container.AddBond(container.Atoms[16], container.Atoms[22], Single);

            string[] expected = {"CL", "CL", "CL", "CL", "CL", "CL", "CL", "CL", "CL", "P", "P", "OPO2", "OPO2", "OPO2",
                "CR", "CR", "CR", "CR", "CR", "CR", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FINPEX
        /// </summary>
        // @cdk.inchi InChI=1S/C6H11NO3/c7-6(5(9)10)1-4(2-6)3-8/h4,8H,1-3,7H2,(H,9,10)/p+1/t4-,6+
        [TestMethod()]
        public void TestFINPEX()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[21], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Double);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[17], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[18], Single);
            container.AddBond(container.Atoms[3], container.Atoms[19], Single);
            container.AddBond(container.Atoms[3], container.Atoms[20], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);

            string[] expected = {"OC=O", "O=CO", "OR", "NR+", "CR4R", "CR4R", "CR4R", "CR4R", "COO", "CR", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HOR", "HNR+", "HNR+", "HNR+", "HOCO"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FITGIY
        /// </summary>
        // @cdk.inchi InChI=1S/C9H14N2O3/c1-4-14-8(12)6-5(2)11-9(3,13)7(6)10/h13H,4,10H2,1-3H3/t9-/m0/s1
        [TestMethod()]
        public void TestFITGIY()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[14], Single);
            container.AddBond(container.Atoms[2], container.Atoms[15], Single);
            container.AddBond(container.Atoms[2], container.Atoms[16], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[12], container.Atoms[26], Single);
            container.AddBond(container.Atoms[13], container.Atoms[27], Single);

            string[] expected = {"N=C", "C=N", "CR", "C=C", "COO", "O=CO", "OC=O", "CR", "CR", "C=C", "NC=C", "CR", "CR",
                "OR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HNCC", "HNCC", "HC", "HC", "HC", "HOR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FITSEG
        /// </summary>
        // @cdk.inchi InChI=1S/C6H3N3/c7-1-4-5(2-8)6(4)3-9/h4-6H/t4-,5-,6-
        [TestMethod()]
        public void TestFITSEG()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Triple);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Triple);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Triple);

            string[] expected = { "CR3R", "CSP", "NSP", "CR3R", "CSP", "NSP", "HC", "HC", "CR3R", "CSP", "HC", "NSP" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FITTIL
        /// </summary>
        // @cdk.inchi InChI=1S/C6H7N5/c1-11-3-10-5(7)4-6(11)9-2-8-4/h2-3H,1H3,(H2,7,8,9)/p+1
        [TestMethod()]
        public void TestFITTIL()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);

            string[] expected = {"NPYD", "CB", "NPD+", "C5B", "C5A", "CB", "NPYL", "C5A", "N5B", "NC=N", "CR", "HC",
                "HPYL", "HNCN", "HNCN", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FIVNUT
        /// </summary>
        // @cdk.inchi InChI=1S/C12H15N3OS/c1-7-5-15(3)6-10(11(7)16)8(2)9(4-13)12(14)17/h5-6,8-9H,1-3H3,(H2,14,17)/t8-,9-/m1/s1
        [TestMethod()]
        public void TestFIVNUT()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[14], Double);
            container.AddBond(container.Atoms[1], container.Atoms[7], Double);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[17], Single);
            container.AddBond(container.Atoms[3], container.Atoms[18], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Triple);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[24], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[12], container.Atoms[15], Single);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);
            container.AddBond(container.Atoms[13], container.Atoms[27], Single);
            container.AddBond(container.Atoms[13], container.Atoms[28], Single);
            container.AddBond(container.Atoms[16], container.Atoms[29], Single);
            container.AddBond(container.Atoms[16], container.Atoms[30], Single);
            container.AddBond(container.Atoms[16], container.Atoms[31], Single);

            string[] expected = {"S=C", "O=CR", "NC=C", "NC=S", "NSP", "C=C", "C=C", "C=OR", "C=C", "C=C", "CR", "CR",
                "CR", "CR", "C=SN", "CSP", "CR", "HNCS", "HNCS", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FIVRAD
        /// </summary>
        // @cdk.inchi InChI=1S/C12H15N3OS/c1-2-3-8-13-12(16)14-11-9-6-4-5-7-10(9)17-15-11/h4-7H,2-3,8H2,1H3,(H2,13,14,15,16)
        [TestMethod()]
        public void TestFIVRAD()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[12], Double);
            container.AddBond(container.Atoms[2], container.Atoms[5], Double);
            container.AddBond(container.Atoms[3], container.Atoms[17], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[18], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[24], Single);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[26], Single);
            container.AddBond(container.Atoms[14], container.Atoms[25], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[15], container.Atoms[28], Single);
            container.AddBond(container.Atoms[15], container.Atoms[27], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[16], container.Atoms[31], Single);
            container.AddBond(container.Atoms[16], container.Atoms[30], Single);
            container.AddBond(container.Atoms[16], container.Atoms[29], Single);

            string[] expected = {"STHI", "O=CN", "N5A", "NC=O", "NC=O", "C5B", "C5B", "C5A", "CB", "CB", "CB", "CB",
                "CONN", "CR", "CR", "CR", "CR", "HNCO", "HNCO", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FIXPIL
        /// </summary>
        // @cdk.inchi InChI=1S/C11H10N2O3/c1-7-3-5-9(6-4-7)13-10(8(2)14)11(15)16-12-13/h3-6H,1-2H3
        [TestMethod()]
        public void TestFIXPIL()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[16], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[17], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[15], Double);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[10], container.Atoms[24], Single);
            container.AddBond(container.Atoms[10], container.Atoms[25], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);

            string[] expected = {"CB", "CB", "CB", "CB", "CB", "CB", "C5B", "C5A", "C=OR", "CR", "CR", "N5B+", "N5A",
                "OFUR", "OM2", "O=CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FIYBIY
        /// </summary>
        // @cdk.inchi InChI=1S/C10H11NO3S/c1-8-7-15(13,11-10(12)14-8)9-5-3-2-4-6-9/h2-6,8H,7H2,1H3/t8-,15-/m1/s1
        [TestMethod()]
        public void TestFIYBIY()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[13], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[2], container.Atoms[11], Double);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[21], Single);
            container.AddBond(container.Atoms[14], container.Atoms[25], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[23], Single);

            string[] expected = {"SNO", "O-S", "O=CN", "OC=O", "NSO", "CB", "CB", "CB", "CB", "CB", "CB", "C=ON", "CR",
                "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FIZGEA
        /// </summary>
        // @cdk.inchi InChI=1S/C11H7Cl4NO2S2/c1-6-2-4-7(5-3-6)20(17,18)16-19-10(14)8(12)9(13)11(19)15/h2-5H,1H3
        [TestMethod()]
        public void TestFIZGEA()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[9], Double);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Double);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[13], container.Atoms[18], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[14], container.Atoms[20], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[15], container.Atoms[21], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Double);
            container.AddBond(container.Atoms[16], container.Atoms[19], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[17], container.Atoms[22], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Double);
            container.AddBond(container.Atoms[18], container.Atoms[23], Single);
            container.AddBond(container.Atoms[19], container.Atoms[26], Single);
            container.AddBond(container.Atoms[19], container.Atoms[25], Single);
            container.AddBond(container.Atoms[19], container.Atoms[24], Single);

            string[] expected = {">S=N", "C=C", "C=C", "C=C", "C=C", "CL", "CL", "CL", "CL", "NSO2", "SO2N", "O2S", "O2S",
                "CB", "CB", "CB", "CB", "CB", "CB", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FIZGOK
        /// </summary>
        // @cdk.inchi InChI=1S/C7H5Cl4NO3S/c1-2-15-7(13)12-16(14)5(10)3(8)4(9)6(16)11/h2H2,1H3
        [TestMethod()]
        public void TestFIZGOK()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Double);
            container.AddBond(container.Atoms[0], container.Atoms[15], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[16], Single);
            container.AddBond(container.Atoms[13], container.Atoms[17], Single);
            container.AddBond(container.Atoms[14], container.Atoms[18], Single);
            container.AddBond(container.Atoms[14], container.Atoms[19], Single);
            container.AddBond(container.Atoms[14], container.Atoms[20], Single);

            string[] expected = {"SNO", "C=C", "C=C", "C=C", "C=C", "CL", "CL", "CL", "CL", "NSO", "C=ON", "O=CN", "OC=O",
                "CR", "CR", "O-S", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FIZJED
        /// </summary>
        // @cdk.inchi InChI=1S/C4H6N4O2/c1-9-3-5-7-4(10-2)8-6-3/h1-2H3
        [TestMethod()]
        public void TestFIZJED()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Double);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[15], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);

            string[] expected = {"NPYD", "NPYD", "CB", "OC=N", "CR", "HC", "HC", "HC", "CB", "NPYD", "NPYD", "OC=N", "CR",
                "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FOBJUB01
        /// </summary>
        // @cdk.inchi InChI=1S/C4H7NO2/c5-4(1-2-4)3(6)7/h1-2,5H2,(H,6,7)
        [TestMethod()]
        public void TestFOBJUB01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);

            string[] expected = {"O2CM", "O2CM", "NR+", "CO2M", "CR3R", "CR3R", "CR3R", "HNR+", "HNR+", "HNR+", "HC", "HC",
                "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FODTUN
        /// </summary>
        // @cdk.inchi InChI=1S/C9H14N2O2/c1-6(12)11-5-7-3-9(11,4-7)8(13)10-2/h7H,3-5H2,1-2H3,(H,10,13)/t7-,9+
        [TestMethod()]
        public void TestFODTUN()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[13], Single);
            container.AddBond(container.Atoms[0], container.Atoms[14], Single);
            container.AddBond(container.Atoms[0], container.Atoms[15], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[8], container.Atoms[22], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[12], container.Atoms[26], Single);

            string[] expected = {"CR", "C=ON", "O=CN", "NC=O", "CR4R", "CR4R", "CR4R", "CR4R", "CR", "C=ON", "O=CN",
                "NC=O", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HNCO", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FOGBIM
        /// </summary>
        // @cdk.inchi InChI=1S/C8H16NOSi/c1-11(2)7-9-6-4-3-5-8(9)10-11/h3-7H2,1-2H3/q+1
        [TestMethod()]
        public void TestFOGBIM()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Si", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Double);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[6], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[22], Single);
            container.AddBond(container.Atoms[7], container.Atoms[21], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[24], Single);
            container.AddBond(container.Atoms[8], container.Atoms[23], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[26], Single);
            container.AddBond(container.Atoms[9], container.Atoms[25], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);

            string[] expected = {"SI", "OC=N", "N+=C", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "C=N", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FOGVIG01
        /// </summary>
        // @cdk.inchi InChI=1S/C8H15N7O2S3/c9-6(15-20(12,16)17)1-2-18-3-5-4-19-8(13-5)14-7(10)11/h4H,1-3H2,(H2,9,15)(H2,12,16,17)(H4,10,11,13,14)
        [TestMethod()]
        public void TestFOGVIG01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[20], Single);
            container.AddBond(container.Atoms[0], container.Atoms[21], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[22], Single);
            container.AddBond(container.Atoms[1], container.Atoms[23], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[24], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[25], Single);
            container.AddBond(container.Atoms[9], container.Atoms[26], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[27], Single);
            container.AddBond(container.Atoms[11], container.Atoms[28], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[29], Single);
            container.AddBond(container.Atoms[12], container.Atoms[30], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[13], container.Atoms[19], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Double);
            container.AddBond(container.Atoms[15], container.Atoms[17], Double);
            container.AddBond(container.Atoms[15], container.Atoms[18], Single);
            container.AddBond(container.Atoms[18], container.Atoms[31], Single);
            container.AddBond(container.Atoms[18], container.Atoms[32], Single);
            container.AddBond(container.Atoms[19], container.Atoms[33], Single);
            container.AddBond(container.Atoms[19], container.Atoms[34], Single);

            string[] expected = {"NC=N", "NC=N", "CGD", "N=C", "C5A", "N5B", "C5B", "C5A", "STHI", "CR", "S", "CR", "CR",
                "C=N", "N=C", "SO2N", "O2S", "O2S", "NSO2", "NC=N", "HNCN", "HNCN", "HNCN", "HNCN", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HNSO", "HNSO", "HNCN", "HNCN"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FOHXEF
        /// </summary>
        // @cdk.inchi InChI=1S/C8H12N4S2/c1-2-5-14-7-10-6-9-3-4-12(6)8(13)11-7/h2-5H2,1H3,(H,9,10,11,13)
        [TestMethod()]
        public void TestFOHXEF()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Double);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[13], container.Atoms[24], Single);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);

            string[] expected = {"S=C", "S", "NC=N", "CGD", "N=C", "C=N", "N=C", "C=SN", "NC=S", "CR", "CR", "CR", "CR",
                "CR", "HNCN", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FOHYAC
        /// </summary>
        // @cdk.inchi InChI=1S/C7H7ClO2S/c1-6-2-4-7(5-3-6)11(8,9)10/h2-5H,1H3
        [TestMethod()]
        public void TestFOHYAC()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);

            string[] expected = {"SO2", "CL", "O2S", "O2S", "CB", "CB", "CB", "CB", "CB", "CB", "CR", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FOJBEL
        /// </summary>
        // @cdk.inchi InChI=1S/C8H16O2S/c1-3-4-8-5-6-10-7(2)11(8)9/h7-8H,3-6H2,1-2H3/t7-,8+,11-/m0/s1
        [TestMethod()]
        public void TestFOJBEL()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[18], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[22], Single);
            container.AddBond(container.Atoms[6], container.Atoms[23], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);
            container.AddBond(container.Atoms[9], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);
            container.AddBond(container.Atoms[10], container.Atoms[24], Single);
            container.AddBond(container.Atoms[10], container.Atoms[25], Single);
            container.AddBond(container.Atoms[10], container.Atoms[26], Single);

            string[] expected = {"S=O", "OR", "O=S", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FOJPAV
        /// </summary>
        // @cdk.inchi InChI=1S/C12H9NO2S2/c1-7-2-4-8(5-3-7)10-11-13(12(15)17-10)9(14)6-16-11/h2-5H,6H2,1H3
        [TestMethod()]
        public void TestFOJPAV()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[17], Single);
            container.AddBond(container.Atoms[1], container.Atoms[18], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[16], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[14], container.Atoms[21], Single);
            container.AddBond(container.Atoms[15], container.Atoms[22], Single);
            container.AddBond(container.Atoms[16], container.Atoms[23], Single);
            container.AddBond(container.Atoms[16], container.Atoms[24], Single);
            container.AddBond(container.Atoms[16], container.Atoms[25], Single);

            string[] expected = {"S", "CR", "C=ON", "O=CN", "NC=O", "C=ON", "O=CN", "S", "C=C", "C=C", "CB", "CB", "CB",
                "CB", "CB", "CB", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FONCOA
        /// </summary>
        // @cdk.inchi InChI=1S/C10H16N2O2/c1-6(2)5-7-10(14)12-4-3-8(12)9(13)11-7/h6-8H,3-5H2,1-2H3,(H,11,13)/t7-,8-/m1/s1
        [TestMethod()]
        public void TestFONCOA()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[16], Single);
            container.AddBond(container.Atoms[0], container.Atoms[15], Single);
            container.AddBond(container.Atoms[0], container.Atoms[14], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[20], Single);
            container.AddBond(container.Atoms[1], container.Atoms[19], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Double);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[29], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[13], container.Atoms[28], Single);
            container.AddBond(container.Atoms[13], container.Atoms[27], Single);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);

            string[] expected = {"CR", "CR", "C=ON", "CR", "O=CN", "C=ON", "NC=O", "CR", "CR4R", "O=CN", "NC=O", "CR4R",
                "CR4R", "CR", "HC", "HC", "HC", "HC", "HNCO", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FORGOI
        /// </summary>
        // @cdk.inchi InChI=1S/C8H7IO2/c1-11-8(10)6-2-4-7(9)5-3-6/h2-5H,1H3
        [TestMethod()]
        public void TestFORGOI()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("I", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Double);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);

            string[] expected = {"I", "O=CO", "OC=O", "CB", "CB", "CB", "CB", "CB", "CB", "COO", "CR", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FORHEZ
        /// </summary>
        // @cdk.inchi InChI=1S/C5H6N2O2S/c1-4(7(8)9)5(2)10-3-6/h1-2H3/b5-4-
        [TestMethod()]
        public void TestFORHEZ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Triple);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Double);

            string[] expected = {"CR", "C=C", "C=C", "CR", "CSP", "NSP", "NO2", "O2N", "O2N", "S", "HC", "HC", "HC", "HC",
                "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FORJIF
        /// </summary>
        // @cdk.inchi InChI=1S/C10H2Cl10/c11-3-1-5(13)4(12)2(7(3,15)9(5,17)18)8(3,16)10(19,20)6(1,4)14/h1-2H/t1-,2-,3-,4-,5-,6+,7-,8+
        [TestMethod()]
        public void TestFORJIF()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[11], container.Atoms[14], Single);
            container.AddBond(container.Atoms[11], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[12], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);
            container.AddBond(container.Atoms[13], container.Atoms[16], Single);
            container.AddBond(container.Atoms[13], container.Atoms[18], Single);
            container.AddBond(container.Atoms[13], container.Atoms[19], Single);
            container.AddBond(container.Atoms[14], container.Atoms[20], Single);
            container.AddBond(container.Atoms[16], container.Atoms[21], Single);

            string[] expected = {"CL", "CL", "CL", "CL", "CL", "CR4R", "CR4R", "CR4R", "CR4R", "CR", "HC", "CR4R", "CR4R",
                "CR", "CR4R", "CL", "CR4R", "HC", "CL", "CL", "CL", "CL"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FORJUR
        /// </summary>
        // @cdk.inchi InChI=1S/C11H14N4S/c1-7-5-4-6-8(2)9(7)15-10(12)13-11(14-15)16-3/h4-6H,1-3H3,(H2,12,13,14)
        [TestMethod()]
        public void TestFORJUR()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[15], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[28], Single);
            container.AddBond(container.Atoms[6], container.Atoms[29], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[19], Single);
            container.AddBond(container.Atoms[13], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[21], Single);
            container.AddBond(container.Atoms[14], container.Atoms[22], Single);
            container.AddBond(container.Atoms[14], container.Atoms[23], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);
            container.AddBond(container.Atoms[15], container.Atoms[25], Single);
            container.AddBond(container.Atoms[15], container.Atoms[26], Single);
            container.AddBond(container.Atoms[15], container.Atoms[27], Single);

            string[] expected = {"S", "NPYL", "N5A", "C5B", "N5B", "C5A", "NC=N", "CB", "CB", "CB", "CB", "CB", "CB", "CR",
                "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HNCN", "HNCN"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FORTAH
        /// </summary>
        // @cdk.inchi InChI=1S/C6H14N2S2/c1-7(2)5(6(9)10)8(3)4/h5H,1-4H3,(H,9,10)/p-1
        [TestMethod()]
        public void TestFORTAH()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[22], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);

            string[] expected = {"S2CM", "S2CM", "CS2M", "CR", "NR", "CR", "CR", "NR", "CR", "CR", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FOSDIA
        /// </summary>
        // @cdk.inchi InChI=1S/C8H12Cl3N4PS/c9-8(10,11)7-12-1-2-15(7)16(17,13-3-4-13)14-5-6-14/h1-6H2
        [TestMethod()]
        public void TestFOSDIA()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("S", -1));
            container.Atoms.Add(NewAtm("P", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[16], Single);
            container.AddBond(container.Atoms[1], container.Atoms[16], Single);
            container.AddBond(container.Atoms[2], container.Atoms[16], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Double);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[13], container.Atoms[16], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[25], Single);
            container.AddBond(container.Atoms[14], container.Atoms[26], Single);
            container.AddBond(container.Atoms[15], container.Atoms[27], Single);
            container.AddBond(container.Atoms[15], container.Atoms[28], Single);

            string[] expected = {"CL", "CL", "CL", "S-P", "PTET", "NR", "NR", "NC=N", "N=C", "CR3R", "CR3R", "CR3R",
                "CR3R", "C=N", "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FOVHUT
        /// </summary>
        // @cdk.inchi InChI=1S/C4H9N5/c1-2-7-3(5)9-4(6)8-2/h3H,5H2,1H3,(H3,6,7,8,9)/t3-/m1/s1
        [TestMethod()]
        public void TestFOVHUT()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[11], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[10], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);
            container.AddBond(container.Atoms[12], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[15], Single);

            string[] expected = {"N=C", "C=N", "NC=N", "HNCN", "HNCN", "N=C", "CR", "NR", "HNR", "HNR", "NC=N", "C=N",
                "CR", "HC", "HNCN", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FOVJIJ
        /// </summary>
        // @cdk.inchi InChI=1S/C10H12O3/c1-5-4-7-8(9(5)12)10(7,3)13-6(2)11/h4,7-8H,1-3H3/t7-,8-,10+/m1/s1
        [TestMethod()]
        public void TestFOVJIJ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Double);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);

            string[] expected = {"O=CR", "OC=O", "O=CO", "CR3R", "C=OR", "C=C", "C=C", "CR3R", "CR", "CR3R", "CR", "COO",
                "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FOVRAJ
        /// </summary>
        // @cdk.inchi InChI=1S/C14H14N4O/c1-10-12(15)18-8-7-16-14(13(18)17-10)19-9-11-5-3-2-4-6-11/h2-8H,9,15H2,1H3/p+1
        [TestMethod()]
        public void TestFOVRAJ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[19], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[20], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[21], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[9], container.Atoms[24], Single);
            container.AddBond(container.Atoms[9], container.Atoms[23], Single);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[26], Single);
            container.AddBond(container.Atoms[10], container.Atoms[25], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[28], Single);
            container.AddBond(container.Atoms[12], container.Atoms[27], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[18], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[14], container.Atoms[29], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[15], container.Atoms[30], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Double);
            container.AddBond(container.Atoms[16], container.Atoms[31], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[17], container.Atoms[32], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Double);
            container.AddBond(container.Atoms[18], container.Atoms[33], Single);

            string[] expected = {"NIM+", "C5", "C5", "NIM+", "C=C", "C=C", "N=C", "C=N", "CIM+", "CR", "NC=C", "OC=N",
                "CR", "CB", "CB", "CB", "CB", "CB", "CB", "HIM+", "HC", "HC", "HC", "HC", "HC", "HNCC", "HNCC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FOVRUD
        /// </summary>
        // @cdk.inchi InChI=1S/C14H14N4O/c1-10-8-13(19)16-17-14(10)11-2-4-12(5-3-11)18-7-6-15-9-18/h2-7,9-10H,8H2,1H3,(H,16,19)/p+1/t10-/m0/s1
        [TestMethod()]
        public void TestFOVRUD()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[19], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[21], Single);
            container.AddBond(container.Atoms[3], container.Atoms[20], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[22], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[25], Single);
            container.AddBond(container.Atoms[7], container.Atoms[24], Single);
            container.AddBond(container.Atoms[7], container.Atoms[23], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[26], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[27], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[14], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[28], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[13], container.Atoms[29], Single);
            container.AddBond(container.Atoms[14], container.Atoms[18], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[15], container.Atoms[30], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Double);
            container.AddBond(container.Atoms[16], container.Atoms[31], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[17], container.Atoms[32], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Double);
            container.AddBond(container.Atoms[18], container.Atoms[33], Single);

            string[] expected = {"N=C", "NC=O", "C=ON", "CR", "CR", "C=N", "O=CN", "CR", "CB", "CB", "CB", "CB", "CB",
                "CB", "NIM+", "CIM+", "NIM+", "C5", "C5", "HNCO", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HIM+", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FOWBEY
        /// </summary>
        // @cdk.inchi InChI=1S/C9H8ClN5/c1-9(2)5-6(12-14-9)7(10)13-15-4-3-11-8(5)15/h3-4H,1-2H3
        [TestMethod()]
        public void TestFOWBEY()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[12], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Double);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);
            container.AddBond(container.Atoms[10], container.Atoms[14], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[13], container.Atoms[17], Single);
            container.AddBond(container.Atoms[13], container.Atoms[18], Single);
            container.AddBond(container.Atoms[13], container.Atoms[19], Single);
            container.AddBond(container.Atoms[14], container.Atoms[20], Single);
            container.AddBond(container.Atoms[14], container.Atoms[21], Single);
            container.AddBond(container.Atoms[14], container.Atoms[22], Single);

            string[] expected = {"CL", "N5B", "C5B", "C5A", "NPYL", "N=C", "C=N", "C=C", "N=N", "N=N", "CR", "C=C", "C5A",
                "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FOWPOW
        /// </summary>
        // @cdk.inchi InChI=1S/C10H9N7O2/c1-19-7-4-2-6(3-5-7)11-8-9(18)12-10-13-15-16-17(10)14-8/h2-5H,1H3,(H,11,14)(H,12,13,16,18)
        [TestMethod()]
        public void TestFOWPOW()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[11], Double);
            container.AddBond(container.Atoms[1], container.Atoms[18], Single);
            container.AddBond(container.Atoms[1], container.Atoms[15], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Double);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[12], container.Atoms[17], Double);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[21], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[14], container.Atoms[22], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Double);
            container.AddBond(container.Atoms[16], container.Atoms[23], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[17], container.Atoms[24], Single);
            container.AddBond(container.Atoms[18], container.Atoms[27], Single);
            container.AddBond(container.Atoms[18], container.Atoms[26], Single);
            container.AddBond(container.Atoms[18], container.Atoms[25], Single);

            string[] expected = {"O=CN", "OC=C", "N5B", "N5B", "N5A", "NPYL", "N=C", "NC=O", "NC=N", "C5A", "C=N", "C=ON",
                "CB", "CB", "CB", "CB", "CB", "CB", "CR", "HNCO", "HNCN", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FOWVES
        /// </summary>
        // @cdk.inchi InChI=1S/C8O4S4/c9-5-1-2(6(10)15-5)14-4-3(13-1)7(11)16-8(4)12
        [TestMethod()]
        public void TestFOWVES()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Double);
            container.AddBond(container.Atoms[3], container.Atoms[7], Double);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Double);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Double);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);
            container.AddBond(container.Atoms[10], container.Atoms[14], Double);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Double);

            string[] expected = {"S", "S", "O=C", "O=C", "C=C", "C=C", "C=OS", "C=OS", "C=C", "C=C", "C=OS", "S", "S",
                "C=OS", "O=C", "O=C"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FOWZAS
        /// </summary>
        // @cdk.inchi InChI=1S/C12H14O3/c13-4-15-12-5-1-6-7-3-9(14)10(6)8(2-5)11(7)12/h4-8,10-12H,1-3H2/t5-,6-,7-,8-,10+,11+,12+/m1/s1
        [TestMethod()]
        public void TestFOWZAS()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[15], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[16], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[17], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[18], Single);
            container.AddBond(container.Atoms[3], container.Atoms[19], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[20], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[21], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[22], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[23], Single);
            container.AddBond(container.Atoms[8], container.Atoms[24], Single);
            container.AddBond(container.Atoms[8], container.Atoms[25], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[12], Double);
            container.AddBond(container.Atoms[10], container.Atoms[26], Single);
            container.AddBond(container.Atoms[10], container.Atoms[27], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[14], Double);
            container.AddBond(container.Atoms[11], container.Atoms[28], Single);

            string[] expected = {"CR", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "C=OR", "CR", "COO", "O=CR", "OC=O",
                "O=CO", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FOYMAH
        /// </summary>
        // @cdk.inchi InChI=1S/C7H8N2/c8-7(9)6-4-2-1-3-5-6/h1-5H,(H3,8,9)/p+1
        [TestMethod()]
        public void TestFOYMAH()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[15], Single);
            container.AddBond(container.Atoms[0], container.Atoms[14], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[17], Single);
            container.AddBond(container.Atoms[1], container.Atoms[16], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);

            string[] expected = {"NCN+", "NCN+", "CNN+", "CB", "CB", "CB", "CB", "CB", "CB", "HC", "HC", "HC", "HC", "HC",
                "HNN+", "HNN+", "HNN+", "HNN+"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FOYNUC
        /// </summary>
        // @cdk.inchi InChI=1S/C12H11NO3/c14-13(15)11-7-9-6-5-8-3-1-2-4-10(8)12(9)16-11/h5-7H,1-4H2
        [TestMethod()]
        public void TestFOYNUC()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[16], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[20], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[21], Single);
            container.AddBond(container.Atoms[6], container.Atoms[22], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[23], Single);
            container.AddBond(container.Atoms[7], container.Atoms[24], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[25], Single);
            container.AddBond(container.Atoms[8], container.Atoms[26], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Double);

            string[] expected = {"OFUR", "C5A", "C5B", "CB", "CB", "CR", "CR", "CR", "CR", "CB", "CB", "C5B", "C5A", "NO2",
                "O2N", "O2N", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FUCMIZ
        /// </summary>
        // @cdk.inchi InChI=1S/C2H7Cl2NSi/c1-5(2)6(3)4/h6H,1-2H3
        [TestMethod()]
        public void TestFUCMIZ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Si", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);

            string[] expected = { "CL", "CL", "SI", "NR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HSI", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FUCMUL
        /// </summary>
        // @cdk.inchi InChI=1S/C4H2N2S2/c1-5-3-4(7-1)6-2-8-3/h1-2H
        [TestMethod()]
        public void TestFUCMUL()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Double);
            container.AddBond(container.Atoms[2], container.Atoms[5], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Double);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);

            string[] expected = { "STHI", "N5B", "C5", "C5A", "HC", "C5", "C5A", "N5B", "STHI", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FUCTIG01
        /// </summary>
        // @cdk.inchi InChI=1S/NO3/c2-1(3)4/q-1
        [TestMethod()]
        public void TestFUCTIG01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("N", 1));
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);

            string[] expected = { "O3N", "O3N", "O3N", "NO3" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FUCWIJ
        /// </summary>
        // @cdk.inchi InChI=1S/C11H15N5O4/c1-15-3-14-10-6(9(15)12)13-4-16(10)11-8(19)7(18)5(2-17)20-11/h3-5,7-8,11-12,17-19H,2H2,1H3/b12-9+/t5-,7-,8-,11-/m1/s1
        [TestMethod()]
        public void TestFUCWIJ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[20], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[21], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);
            container.AddBond(container.Atoms[9], container.Atoms[29], Single);
            container.AddBond(container.Atoms[9], container.Atoms[30], Single);
            container.AddBond(container.Atoms[9], container.Atoms[31], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[18], Single);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[16], Single);
            container.AddBond(container.Atoms[14], container.Atoms[26], Single);
            container.AddBond(container.Atoms[15], container.Atoms[19], Single);
            container.AddBond(container.Atoms[15], container.Atoms[27], Single);
            container.AddBond(container.Atoms[15], container.Atoms[28], Single);
            container.AddBond(container.Atoms[17], container.Atoms[32], Single);
            container.AddBond(container.Atoms[18], container.Atoms[33], Single);
            container.AddBond(container.Atoms[19], container.Atoms[34], Single);

            string[] expected = {"NC=N", "C=N", "N=C", "C5A", "C5B", "C=N", "N5B", "C5A", "NPYL", "CR", "N=C", "CR", "CR",
                "CR", "CR", "CR", "OR", "OR", "OR", "OR", "HC", "HC", "HN=C", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HOR", "HOR", "HOR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FUCWOP
        /// </summary>
        // @cdk.inchi InChI=1S/C10H9N6/c11-10-14-8-7(12-6-13-8)9(15-10)16-4-2-1-3-5-16/h1-6H,(H3,11,12,13,14,15)/q+1
        [TestMethod()]
        public void TestFUCWOP()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[17], Single);
            container.AddBond(container.Atoms[2], container.Atoms[16], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Double);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[14], container.Atoms[23], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[15], container.Atoms[24], Single);

            string[] expected = {"NPYD", "CB", "NC=N", "NPYD", "C5A", "C5B", "CB", "N5B", "C5A", "NPYL", "NPD+", "CB",
                "CB", "CB", "CB", "CB", "HNCN", "HNCN", "HC", "HPYL", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FUDPOJ
        /// </summary>
        // @cdk.inchi InChI=1S/C3H2O3/c4-1-2(5)3(1)6/h4-5H
        [TestMethod()]
        public void TestFUDPOJ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);

            string[] expected = { "O=CR", "OC=C", "C=OR", "C=C", "HOCC", "C=C", "OC=C", "HOCC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FUDXUX
        /// </summary>
        // @cdk.inchi InChI=1S/C3H6N2/c1-5-3-2-4/h5H,3H2,1H3/p+1
        [TestMethod()]
        public void TestFUDXUX()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Triple);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);

            string[] expected = { "NSP", "NR+", "CSP", "CR", "CR", "HNR+", "HNR+", "HC", "HC", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FUFDIT
        /// </summary>
        // @cdk.inchi InChI=1S/C5H8N2O5/c1-5(10)2(8)6-4(9)7-3(5)12-11/h3,10-11H,1H3,(H2,6,7,8,9)/t3-,5-/m0/s1
        [TestMethod()]
        public void TestFUFDIT()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);

            string[] expected = {"NC=O", "CONN", "NC=O", "C=ON", "CR", "CR", "O=CN", "CR", "O=CN", "OR", "OR", "-O-",
                "HNCO", "HNCO", "HC", "HC", "HC", "HC", "HOR", "HO"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FUGWIN
        /// </summary>
        // @cdk.inchi InChI=1S/C10H13N5O3/c11-10-8-6(12-3-13-10)7(14-15-8)9-5(17)1-4(2-16)18-9/h3-5,9,16-17H,1-2H2,(H,14,15)(H2,11,12,13)/p+1/t4-,5+,9+/m0/s1
        [TestMethod()]
        public void TestFUGWIN()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[15], Single);
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[31], Single);
            container.AddBond(container.Atoms[1], container.Atoms[12], Single);
            container.AddBond(container.Atoms[2], container.Atoms[14], Double);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[30], Single);
            container.AddBond(container.Atoms[3], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Double);
            container.AddBond(container.Atoms[5], container.Atoms[28], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Double);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[29], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[27], Single);
            container.AddBond(container.Atoms[7], container.Atoms[26], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Double);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[14], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);
            container.AddBond(container.Atoms[12], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[15], container.Atoms[23], Single);
            container.AddBond(container.Atoms[16], container.Atoms[25], Single);
            container.AddBond(container.Atoms[16], container.Atoms[22], Single);
            container.AddBond(container.Atoms[17], container.Atoms[24], Single);
            container.AddBond(container.Atoms[17], container.Atoms[19], Single);

            string[] expected = {"OR", "OR", "N5A", "OR", "NPYD", "NPD+", "NPYL", "NC=C", "CB", "C5A", "C5B", "CR", "CR",
                "CB", "C5B", "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HNCC", "HNCC", "HPD+",
                "HPYL", "HOR", "HOR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FUHFAP
        /// </summary>
        // @cdk.inchi InChI=1S/C2H7NO2/c1-4-3-5-2/h3H,1-2H3
        [TestMethod()]
        public void TestFUHFAP()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);

            string[] expected = { "NR", "OR", "CR", "HC", "HC", "HC", "OR", "CR", "HC", "HC", "HC", "HNR" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FUHSEG
        /// </summary>
        // @cdk.inchi InChI=1S/C9H6N2O2/c10-7-9(11(12)13)6-8-4-2-1-3-5-8/h1-6H/b9-6+
        [TestMethod()]
        public void TestFUHSEG()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[4], Triple);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[12], container.Atoms[18], Single);

            string[] expected = {"O2N", "O2N", "NSP", "NO2", "CSP", "C=C", "C=C", "CB", "CB", "CB", "CB", "CB", "CB", "HC",
                "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FULRAF
        /// </summary>
        // @cdk.inchi InChI=1S/C8H14N6O4/c9-5(10)6-12-8(11)14(13-6)7-4(17)3(16)2(1-15)18-7/h2-4,7,15-17H,1H2,(H3,9,10)(H2,11,12,13)/p+1/t2-,3-,4-,7-/m1/s1
        [TestMethod()]
        public void TestFULRAF()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[21], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[23], Single);
            container.AddBond(container.Atoms[8], container.Atoms[22], Single);
            container.AddBond(container.Atoms[9], container.Atoms[24], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[25], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[26], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[27], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[29], Single);
            container.AddBond(container.Atoms[13], container.Atoms[28], Single);
            container.AddBond(container.Atoms[13], container.Atoms[17], Single);
            container.AddBond(container.Atoms[15], container.Atoms[30], Single);
            container.AddBond(container.Atoms[16], container.Atoms[31], Single);
            container.AddBond(container.Atoms[17], container.Atoms[32], Single);

            string[] expected = {"NPYL", "N5A", "C5B", "N5B", "C5A", "CNN+", "NCN+", "NCN+", "NC=N", "CR", "CR", "CR",
                "CR", "CR", "OR", "OR", "OR", "OR", "HNN+", "HNN+", "HNN+", "HNN+", "HNCN", "HNCN", "HC", "HC", "HC",
                "HC", "HC", "HC", "HOR", "HOR", "HOR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FUNSIQ
        /// </summary>
        // @cdk.inchi InChI=1S/C4H7NO7S/c1-2-12-4(6)3(5(7)8)13(9,10)11/h3H,2H2,1H3,(H,9,10,11)/p-1/t3-/m0/s1
        [TestMethod()]
        public void TestFUNSIQ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[0], container.Atoms[6], Double);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Double);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[14], Single);
            container.AddBond(container.Atoms[11], container.Atoms[15], Single);
            container.AddBond(container.Atoms[12], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);
            container.AddBond(container.Atoms[12], container.Atoms[18], Single);

            string[] expected = {"SO3", "O=CO", "OC=O", "O2N", "O2N", "O3S", "O3S", "O3S", "NO2", "COO", "CR", "CR", "CR",
                "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FUNXOB
        /// </summary>
        // @cdk.inchi InChI=1S/C12H10O3/c1-14-11-4-2-9(3-5-11)12(13)10-6-7-15-8-10/h2-8H,1H3
        [TestMethod()]
        public void TestFUNXOB()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[15], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[22], Single);
            container.AddBond(container.Atoms[14], container.Atoms[23], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);

            string[] expected = {"OFUR", "C5A", "C5B", "C5B", "C5A", "C=OR", "O=CR", "CB", "CB", "CB", "CB", "CB", "CB",
                "OC=C", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FUPJUV
        /// </summary>
        // @cdk.inchi InChI=1S/C11H13N3O3/c1-11(2,3)17-10(15)13-8-6-4-5-7-9(8)14(16)12-13/h4-7H,1-3H3
        [TestMethod()]
        public void TestFUPJUV()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[26], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[23], Single);
            container.AddBond(container.Atoms[15], container.Atoms[22], Single);
            container.AddBond(container.Atoms[15], container.Atoms[21], Single);
            container.AddBond(container.Atoms[15], container.Atoms[20], Single);
            container.AddBond(container.Atoms[25], container.Atoms[29], Single);
            container.AddBond(container.Atoms[25], container.Atoms[28], Single);
            container.AddBond(container.Atoms[25], container.Atoms[27], Single);

            string[] expected = {"N5BX", "OXN", "N5A", "NPYL", "C5A", "CB", "CB", "CB", "CB", "C5B", "C=ON", "O=CN",
                "OC=O", "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "CR", "HC", "HC", "HC",
                "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FUPKIK
        /// </summary>
        // @cdk.inchi InChI=1S/C7H7N3O3S/c1-14(11,12)13-10-7-5-3-2-4-6(7)8-9-10/h2-5H,1H3
        [TestMethod()]
        public void TestFUPKIK()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[12], Double);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[18], Single);
            container.AddBond(container.Atoms[13], container.Atoms[19], Single);
            container.AddBond(container.Atoms[13], container.Atoms[20], Single);

            string[] expected = {"N5B", "N5A", "NPYL", "CB", "CB", "CB", "CB", "C5B", "C5A", "OSO2", "SO3", "O2S", "O2S",
                "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FUPKOQ
        /// </summary>
        // @cdk.inchi InChI=1S/C12H10N6O3S/c1-21-15-10(7-6-22-12(13)14-7)11(19)17-8-4-2-3-5-9(8)18(20)16-17/h2-6H,1H3,(H2,13,14)/b15-10-
        [TestMethod()]
        public void TestFUPKOQ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[22], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[23], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[24], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[25], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[12], container.Atoms[19], Double);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[17], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[14], container.Atoms[26], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[16], container.Atoms[18], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Double);
            container.AddBond(container.Atoms[18], container.Atoms[28], Single);
            container.AddBond(container.Atoms[18], container.Atoms[27], Single);
            container.AddBond(container.Atoms[19], container.Atoms[20], Single);
            container.AddBond(container.Atoms[20], container.Atoms[21], Single);
            container.AddBond(container.Atoms[21], container.Atoms[31], Single);
            container.AddBond(container.Atoms[21], container.Atoms[30], Single);
            container.AddBond(container.Atoms[21], container.Atoms[29], Single);

            string[] expected = {"NPYL", "N5A", "N5BX", "C5B", "C5A", "CB", "CB", "CB", "CB", "OXN", "C=ON", "O=CN", "C=N",
                "C5B", "C5A", "STHI", "C5A", "N5B", "NC=N", "N=C", "OR", "CR", "HC", "HC", "HC", "HC", "HC", "HNCN",
                "HNCN", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FUPTOZ
        /// </summary>
        // @cdk.inchi InChI=1S/C6H2Cl8OS2/c7-1(8)2-16-3(5(9,10)11)15-4(17-2)6(12,13)14/h3-4H/t3-,4-/m1/s1
        [TestMethod()]
        public void TestFUPTOZ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[13], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);
            container.AddBond(container.Atoms[9], container.Atoms[12], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[17], Single);
            container.AddBond(container.Atoms[15], container.Atoms[18], Single);

            string[] expected = {"OR", "S", "S", "C=C", "C=C", "CL", "CL", "CR", "HC", "CR", "CL", "CL", "CL", "CR", "HC",
                "CR", "CL", "CL", "CL"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FUPZEV
        /// </summary>
        // @cdk.inchi InChI=1S/C12H18O3/c1-7-5-6-9-11(3,4)10(12(7,9)14)15-8(2)13/h5,9-10,14H,6H2,1-4H3/t9-,10+,12+/m0/s1
        [TestMethod()]
        public void TestFUPZEV()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[15], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[12], container.Atoms[26], Single);
            container.AddBond(container.Atoms[13], container.Atoms[27], Single);
            container.AddBond(container.Atoms[13], container.Atoms[28], Single);
            container.AddBond(container.Atoms[13], container.Atoms[29], Single);
            container.AddBond(container.Atoms[14], container.Atoms[30], Single);
            container.AddBond(container.Atoms[14], container.Atoms[31], Single);
            container.AddBond(container.Atoms[14], container.Atoms[32], Single);

            string[] expected = {"OR", "OC=O", "O=CO", "CR4R", "C=C", "C=C", "CR", "CR4R", "CR4R", "CR4R", "COO", "CR",
                "CR", "CR", "CR", "HOR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FUSPEO
        /// </summary>
        // @cdk.inchi InChI=1S/C3H4O2/c4-2-1-3-5/h1-4H/p-1/b2-1+
        [TestMethod()]
        public void TestFUSPEO()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);

            string[] expected = { "O=CR", "C=OR", "C=C", "C=C", "OM2", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FUTCEC
        /// </summary>
        // @cdk.inchi InChI=1S/C10H12N2O/c1-10(2)9(13)12(11-10)8-6-4-3-5-7-8/h3-7,11H,1-2H3
        [TestMethod()]
        public void TestFUTCEC()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Double);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[11], container.Atoms[24], Single);

            string[] expected = {"NC=O", "NR", "CR4R", "C=ON", "CR", "CR", "CB", "CB", "CB", "CB", "CB", "CB", "O=CN",
                "HNR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FUTZEZ
        /// </summary>
        // @cdk.inchi InChI=1S/CH6OSi/c1-2-3/h1,3H3
        [TestMethod()]
        public void TestFUTZEZ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Si", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);

            string[] expected = { "SI", "OR", "CR", "HSI", "HSI", "HC", "HC", "HSI", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FUVDOP
        /// </summary>
        // @cdk.inchi InChI=1S/C12H15N3O6/c1-4(16)19-10-7-11(20-5(2)17)9-12(21-6(3)18)8(10)14-13(7)15(9)14/h7-12H,1-3H3/t7-,8+,9-,10-,11+,12-,13+,14-,15+
        [TestMethod()]
        public void TestFUVDOP()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[15], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[16], Single);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[17], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Double);
            container.AddBond(container.Atoms[4], container.Atoms[16], Double);
            container.AddBond(container.Atoms[5], container.Atoms[17], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);
            container.AddBond(container.Atoms[14], container.Atoms[26], Single);
            container.AddBond(container.Atoms[15], container.Atoms[18], Single);
            container.AddBond(container.Atoms[16], container.Atoms[19], Single);
            container.AddBond(container.Atoms[17], container.Atoms[20], Single);
            container.AddBond(container.Atoms[18], container.Atoms[27], Single);
            container.AddBond(container.Atoms[18], container.Atoms[28], Single);
            container.AddBond(container.Atoms[18], container.Atoms[29], Single);
            container.AddBond(container.Atoms[19], container.Atoms[30], Single);
            container.AddBond(container.Atoms[19], container.Atoms[31], Single);
            container.AddBond(container.Atoms[19], container.Atoms[32], Single);
            container.AddBond(container.Atoms[20], container.Atoms[33], Single);
            container.AddBond(container.Atoms[20], container.Atoms[34], Single);
            container.AddBond(container.Atoms[20], container.Atoms[35], Single);

            string[] expected = {"OC=O", "OC=O", "OC=O", "O=CO", "O=CO", "O=CO", "NR", "NR", "NR", "CR", "CR", "CR", "CR",
                "CR", "CR", "COO", "COO", "COO", "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FUVMUE
        /// </summary>
        // @cdk.inchi InChI=1S/C9H18N2O2/c1-10(2)8(12)6-5-7-9(13)11(3)4/h5-7H2,1-4H3/p+2
        [TestMethod()]
        public void TestFUVMUE()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[17], Single);
            container.AddBond(container.Atoms[0], container.Atoms[16], Single);
            container.AddBond(container.Atoms[0], container.Atoms[15], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[20], Single);
            container.AddBond(container.Atoms[1], container.Atoms[19], Single);
            container.AddBond(container.Atoms[1], container.Atoms[18], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[22], Single);
            container.AddBond(container.Atoms[5], container.Atoms[21], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[24], Single);
            container.AddBond(container.Atoms[6], container.Atoms[23], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[26], Single);
            container.AddBond(container.Atoms[7], container.Atoms[25], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[29], Single);
            container.AddBond(container.Atoms[11], container.Atoms[28], Single);
            container.AddBond(container.Atoms[11], container.Atoms[27], Single);
            container.AddBond(container.Atoms[12], container.Atoms[32], Single);
            container.AddBond(container.Atoms[12], container.Atoms[31], Single);
            container.AddBond(container.Atoms[12], container.Atoms[30], Single);

            string[] expected = {"CR", "CR", "NC=O", "C=ON", "O=+", "CR", "CR", "CR", "C=ON", "O=+", "NC=O", "CR", "CR",
                "HO=+", "HO=+", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FUVNEP
        /// </summary>
        // @cdk.inchi InChI=1S/C17H20N2O/c1-18(2)15-9-5-13(6-10-15)17(20)14-7-11-16(12-8-14)19(3)4/h5-12H,1-4H3
        [TestMethod()]
        public void TestFUVNEP()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[11], Double);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[19], Single);
            container.AddBond(container.Atoms[2], container.Atoms[18], Single);
            container.AddBond(container.Atoms[2], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[25], Single);
            container.AddBond(container.Atoms[3], container.Atoms[24], Single);
            container.AddBond(container.Atoms[3], container.Atoms[23], Single);
            container.AddBond(container.Atoms[4], container.Atoms[22], Single);
            container.AddBond(container.Atoms[4], container.Atoms[21], Single);
            container.AddBond(container.Atoms[4], container.Atoms[20], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[32], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[33], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[34], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[35], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[13], container.Atoms[39], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[38], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[16], container.Atoms[37], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Double);
            container.AddBond(container.Atoms[17], container.Atoms[36], Single);
            container.AddBond(container.Atoms[18], container.Atoms[28], Single);
            container.AddBond(container.Atoms[18], container.Atoms[27], Single);
            container.AddBond(container.Atoms[18], container.Atoms[26], Single);
            container.AddBond(container.Atoms[19], container.Atoms[31], Single);
            container.AddBond(container.Atoms[19], container.Atoms[30], Single);
            container.AddBond(container.Atoms[19], container.Atoms[29], Single);

            string[] expected = {"O=CR", "NC=C", "NC=C", "CR", "CR", "CB", "CB", "CB", "CB", "CB", "CB", "C=OR", "CB",
                "CB", "CB", "CB", "CB", "CB", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FUVXOJ
        /// </summary>
        // @cdk.inchi InChI=1S/C8H9NO2/c1-11-8-4-2-7(3-5-8)6-9-10/h2-6,10H,1H3/p+1/b9-6-
        [TestMethod()]
        public void TestFUVXOJ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[20], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[19], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Double);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);

            string[] expected = {"OC=C", "-O-", "N+=C", "CR", "CB", "CB", "CB", "CB", "CB", "CB", "C=N", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HNC+", "HO"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FUWMOZ
        /// </summary>
        // @cdk.inchi InChI=1S/C9H10N2O4S/c12-9-11(6-7-15-9)16(13,14)10-8-4-2-1-3-5-8/h1-5,10H,6-7H2
        [TestMethod()]
        public void TestFUWMOZ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[22], Single);
            container.AddBond(container.Atoms[4], container.Atoms[23], Single);
            container.AddBond(container.Atoms[5], container.Atoms[24], Single);
            container.AddBond(container.Atoms[5], container.Atoms[25], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[8], Double);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[18], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[14], container.Atoms[19], Single);
            container.AddBond(container.Atoms[15], container.Atoms[20], Single);

            string[] expected = {"OC=O", "C=ON", "O=CN", "NSO2", "CR", "CR", "SO2N", "O2S", "O2S", "NSO2", "CB", "CB",
                "CB", "CB", "CB", "CB", "HC", "HC", "HC", "HC", "HC", "HNSO", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FUWTUM
        /// </summary>
        // @cdk.inchi InChI=1S/C5H9P3S3/c1-5-2-6-7(3-5)11-8(9,4-5)10-6/h2-4H2,1H3/t5-,6+,7-,8-
        [TestMethod()]
        public void TestFUWTUM()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", -1));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("P", 1));
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);

            string[] expected = {"S-P", "S", "S", "PTET", "P", "P", "CR", "CR", "CR", "CR", "CR", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FUXXAX
        /// </summary>
        // @cdk.inchi InChI=1S/C5H15N2O3PS/c6-2-1-3-7-4-5-12-11(8,9)10/h7H,1-6H2,(H2,8,9,10)
        [TestMethod()]
        public void TestFUXXAX()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[8], container.Atoms[22], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[23], Single);
            container.AddBond(container.Atoms[9], container.Atoms[24], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[25], Single);
            container.AddBond(container.Atoms[10], container.Atoms[26], Single);
            container.AddBond(container.Atoms[11], container.Atoms[14], Single);
            container.AddBond(container.Atoms[11], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);

            string[] expected = {"S", "PO3", "O3P", "O3P", "O3P", "CR", "CR", "NR+", "CR", "CR", "CR", "NR+", "HNR+",
                "HNR+", "HNR+", "HNR+", "HNR+", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FUXZED
        /// </summary>
        // @cdk.inchi InChI=1S/C8H8N2O4S/c1-13-5-7(3-9)15(11,12)8(4-10)6-14-2/h5-6H,1-2H3/b7-5+,8-6+
        [TestMethod()]
        public void TestFUXZED()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Triple);
            container.AddBond(container.Atoms[6], container.Atoms[13], Triple);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);
            container.AddBond(container.Atoms[12], container.Atoms[18], Single);
            container.AddBond(container.Atoms[12], container.Atoms[19], Single);
            container.AddBond(container.Atoms[14], container.Atoms[20], Single);
            container.AddBond(container.Atoms[14], container.Atoms[21], Single);
            container.AddBond(container.Atoms[14], container.Atoms[22], Single);

            string[] expected = {"SO2", "O2S", "O2S", "OC=C", "OC=C", "NSP", "NSP", "C=C", "C=C", "C=C", "C=C", "CSP",
                "CR", "CSP", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GADHEY
        /// </summary>
        // @cdk.inchi InChI=1S/C14H18N2/c1-15(2)12-9-5-7-11-8-6-10-13(14(11)12)16(3)4/h5-10H,1-4H3/p+1
        [TestMethod()]
        public void TestGADHEY()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[13], Single);
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[16], Single);
            container.AddBond(container.Atoms[1], container.Atoms[15], Single);
            container.AddBond(container.Atoms[1], container.Atoms[14], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[17], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[18], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);
            container.AddBond(container.Atoms[13], container.Atoms[28], Single);
            container.AddBond(container.Atoms[13], container.Atoms[27], Single);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);
            container.AddBond(container.Atoms[14], container.Atoms[31], Single);
            container.AddBond(container.Atoms[14], container.Atoms[30], Single);
            container.AddBond(container.Atoms[14], container.Atoms[29], Single);
            container.AddBond(container.Atoms[15], container.Atoms[34], Single);
            container.AddBond(container.Atoms[15], container.Atoms[33], Single);
            container.AddBond(container.Atoms[15], container.Atoms[32], Single);

            string[] expected = {"NC=C", "NR+", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CR", "CR",
                "CR", "CR", "HNR+", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GAFNUW
        /// </summary>
        // @cdk.inchi InChI=1S/C12H12N2O5/c1-6(15)19-11-3-7-2-9(11)8-4-12(14(17)18)13(16)5-10(7)8/h4-5,7,9,11H,2-3H2,1H3/t7-,9-,11+/m1/s1
        [TestMethod()]
        public void TestGAFNUW()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[19], Single);
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[20], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[22], Single);
            container.AddBond(container.Atoms[2], container.Atoms[21], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[23], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[24], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[25], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[10], container.Atoms[27], Single);
            container.AddBond(container.Atoms[10], container.Atoms[26], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[14], container.Atoms[30], Single);
            container.AddBond(container.Atoms[14], container.Atoms[29], Single);
            container.AddBond(container.Atoms[14], container.Atoms[28], Single);
            container.AddBond(container.Atoms[15], container.Atoms[17], Double);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);

            string[] expected = {"CR", "CR", "CR", "CR", "CB", "CB", "NPOX", "CB", "CB", "CB", "CR", "OC=O", "COO", "O=CO",
                "CR", "NO2", "O2N", "O2N", "OXN", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GAHPIO
        /// </summary>
        // @cdk.inchi InChI=1S/C6H11NO4/c1-3-5(6(9)10)7(11)4(2)8/h5,11H,3H2,1-2H3,(H,9,10)/t5-/m0/s1
        [TestMethod()]
        public void TestGAHPIO()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[20], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[21], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Double);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);

            string[] expected = {"O=CO", "OC=O", "-O-", "O=CN", "NC=O", "COO", "CR", "CR", "CR", "C=ON", "CR", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HOCO", "HO"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GAJTEQ
        /// </summary>
        // @cdk.inchi InChI=1S/C5H5NO3S/c7-10(8,9)6-4-2-1-3-5-6/h1-5H
        [TestMethod()]
        public void TestGAJTEQ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);

            string[] expected = {"SO3", "O3S", "O3S", "O3S", "NPD+", "CB", "CB", "CB", "CB", "CB", "HC", "HC", "HC", "HC",
                "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GAKGOO
        /// </summary>

        [TestMethod()]
        public void TestGAKGOO()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[14], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[9], container.Atoms[23], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[24], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Double);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);
            container.AddBond(container.Atoms[13], container.Atoms[27], Single);

            string[] expected = {"OC=O", "COO", "O=CO", "C=C", "CR", "C=C", "NC=C", "CR", "CR", "CR", "C=C", "C=C", "C=C",
                "CR", "C=C", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GAKNEL
        /// </summary>
        // @cdk.inchi InChI=1S/C6H2ClN3O3/c7-3-1-2-4(10(11)12)6-5(3)8-13-9-6/h1-2H
        [TestMethod()]
        public void TestGAKNEL()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Double);
            container.AddBond(container.Atoms[4], container.Atoms[7], Double);
            container.AddBond(container.Atoms[5], container.Atoms[12], Double);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[14], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);

            string[] expected = {"CL", "OFUR", "O2N", "O2N", "N5A", "N5A", "NO2", "C5B", "CB", "CB", "CB", "CB", "C5B",
                "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GAKNIP
        /// </summary>
        // @cdk.inchi InChI=1S/C6H10O2S2/c1-2-6-9(7)4-3-5-10(6)8/h2H,3-5H2,1H3/t9-,10-/m0/s1
        [TestMethod()]
        public void TestGAKNIP()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Double);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);

            string[] expected = {"S=O", "S=O", "O=S", "O=S", "C=C", "CR", "CR", "CR", "C=C", "CR", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GAKPEN
        /// </summary>
        // @cdk.inchi InChI=1S/C9H8O2S/c1-7-6-8-4-2-3-5-9(8)12(7,10)11/h2-6H,1H3
        [TestMethod()]
        public void TestGAKPEN()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[10], Double);
            container.AddBond(container.Atoms[0], container.Atoms[11], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);

            string[] expected = {"SO2", "C=C", "C=C", "CB", "CB", "CB", "CB", "CB", "CB", "CR", "O2S", "O2S", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GAKTAN
        /// </summary>
        // @cdk.inchi InChI=1S/C8H4S3/c1-5-6-2-10-4-8(6)11-7(5)3-9-1/h1-4H
        [TestMethod()]
        public void TestGAKTAN()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);
            container.AddBond(container.Atoms[10], container.Atoms[14], Single);

            string[] expected = {"STHI", "STHI", "STHI", "C5", "C5B", "C5B", "C5", "C5A", "C5A", "C5A", "C5A", "HC", "HC",
                "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GANHUY
        /// </summary>
        // @cdk.inchi InChI=1S/C4H2O3/c5-2-1-3(6)4(2)7/h1,5H
        [TestMethod()]
        public void TestGANHUY()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[1], container.Atoms[4], Double);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);

            string[] expected = { "O=CR", "O=CR", "OC=C", "C=OR", "C=OR", "CE4R", "CE4R", "HC", "HOCC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GAPMEP
        /// </summary>
        // @cdk.inchi InChI=1S/C8H5BrO2S/c9-8-5-6-3-1-2-4-7(6)12(8,10)11/h1-5H
        [TestMethod()]
        public void TestGAPMEP()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Br", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Double);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);

            string[] expected = {"BR", "SO2", "O2S", "O2S", "C=C", "C=C", "CB", "CB", "CB", "CB", "CB", "CB", "HC", "HC",
                "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GAVKOD
        /// </summary>
        // @cdk.inchi InChI=1S/C3H5N3O2/c1-2-3(4)6(7)8-5-2/h4H2,1H3
        [TestMethod()]
        public void TestGAVKOD()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Double);
            container.AddBond(container.Atoms[3], container.Atoms[6], Double);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);

            string[] expected = { "OFUR", "OXN", "N5A", "N5AX", "NC=N", "C5B", "C5B", "CR", "HNCN", "HNCN", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GAVMEV
        /// </summary>
        // @cdk.inchi InChI=1S/C10H9NOS/c1-7-11-10(12)9(13-7)8-5-3-2-4-6-8/h2-6,12H,1H3
        [TestMethod()]
        public void TestGAVMEV()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Double);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);

            string[] expected = {"C5A", "STHI", "C5A", "N5B", "C5B", "OC=C", "CR", "CB", "CB", "CB", "CB", "CB", "CB",
                "HOCC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GAWWOQ
        /// </summary>
        // @cdk.inchi InChI=1S/C11H14NO4P/c1-12-8-5-9-15-17(12,14)16-11(13)10-6-3-2-4-7-10/h2-4,6-7H,5,8-9H2,1H3/t17-/m0/s1
        [TestMethod()]
        public void TestGAWWOQ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[8], container.Atoms[22], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[26], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[27], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[28], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[14], container.Atoms[29], Single);
            container.AddBond(container.Atoms[15], container.Atoms[30], Single);
            container.AddBond(container.Atoms[16], container.Atoms[23], Single);
            container.AddBond(container.Atoms[16], container.Atoms[24], Single);
            container.AddBond(container.Atoms[16], container.Atoms[25], Single);

            string[] expected = {"PO3", "OPO2", "OP", "OPO2", "NR", "O=CO", "CR", "CR", "CR", "COO", "CB", "CB", "CB",
                "CB", "CB", "CB", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GEHBOK
        /// </summary>
        // @cdk.inchi InChI=1S/C12H13NO6S/c13-11(9(14)15)6-12(7-11,10(16)17)20(18,19)8-4-2-1-3-5-8/h1-5H,6-7,13H2,(H,14,15)(H,16,17)/p-1/t11-,12-
        [TestMethod()]
        public void TestGEHBOK()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[20], Single);
            container.AddBond(container.Atoms[1], container.Atoms[21], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[22], Single);
            container.AddBond(container.Atoms[3], container.Atoms[23], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[7], container.Atoms[24], Single);
            container.AddBond(container.Atoms[7], container.Atoms[25], Single);
            container.AddBond(container.Atoms[7], container.Atoms[26], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[13], Double);
            container.AddBond(container.Atoms[11], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[14], container.Atoms[19], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[27], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Double);
            container.AddBond(container.Atoms[16], container.Atoms[28], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Single);
            container.AddBond(container.Atoms[17], container.Atoms[29], Single);
            container.AddBond(container.Atoms[18], container.Atoms[19], Double);
            container.AddBond(container.Atoms[18], container.Atoms[30], Single);
            container.AddBond(container.Atoms[19], container.Atoms[31], Single);

            string[] expected = {"CR4R", "CR4R", "CR4R", "CR4R", "CO2M", "O2CM", "O2CM", "NR+", "CO2M", "O2CM", "O2CM",
                "SO2", "O2S", "O2S", "CB", "CB", "CB", "CB", "CB", "CB", "HC", "HC", "HC", "HC", "HNR+", "HNR+",
                "HNR+", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GEHPUE
        /// </summary>
        // @cdk.inchi InChI=1S/C4H6N4O4S3/c5-1(9)3(11)7-13-15-14-8-4(12)2(6)10/h(H2,5,9)(H2,6,10)(H,7,11)(H,8,12)
        [TestMethod()]
        public void TestGEHPUE()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Double);
            container.AddBond(container.Atoms[4], container.Atoms[12], Double);
            container.AddBond(container.Atoms[5], container.Atoms[13], Double);
            container.AddBond(container.Atoms[6], container.Atoms[14], Double);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);

            string[] expected = {"S", "S", "S", "O=CN", "O=CN", "O=CN", "O=CN", "NC=O", "NC=O", "NC=O", "NC=O", "C=ON",
                "C=ON", "C=ON", "C=ON", "HNCO", "HNCO", "HNCO", "HNCO", "HNCO", "HNCO"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GEHXEW
        /// </summary>
        // @cdk.inchi InChI=1S/C12H18Cl2N4O2/c1-3-19-9-15-11-7-5-6-8-12(11,17(9)13)16-10(18(11)14)20-4-2/h3-8H2,1-2H3/t11-,12-/m0/s1
        [TestMethod()]
        public void TestGEHXEW()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[6], container.Atoms[21], Single);
            container.AddBond(container.Atoms[7], container.Atoms[22], Single);
            container.AddBond(container.Atoms[7], container.Atoms[23], Single);
            container.AddBond(container.Atoms[7], container.Atoms[24], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[15], Double);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[15], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[33], Single);
            container.AddBond(container.Atoms[13], container.Atoms[34], Single);
            container.AddBond(container.Atoms[14], container.Atoms[35], Single);
            container.AddBond(container.Atoms[14], container.Atoms[36], Single);
            container.AddBond(container.Atoms[14], container.Atoms[37], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[16], container.Atoms[25], Single);
            container.AddBond(container.Atoms[16], container.Atoms[26], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Single);
            container.AddBond(container.Atoms[17], container.Atoms[27], Single);
            container.AddBond(container.Atoms[17], container.Atoms[28], Single);
            container.AddBond(container.Atoms[18], container.Atoms[19], Single);
            container.AddBond(container.Atoms[18], container.Atoms[29], Single);
            container.AddBond(container.Atoms[18], container.Atoms[30], Single);
            container.AddBond(container.Atoms[19], container.Atoms[31], Single);
            container.AddBond(container.Atoms[19], container.Atoms[32], Single);

            string[] expected = {"CL", "NC=N", "C=N", "OC=N", "N=C", "CR", "CR", "CR", "CR", "N=C", "NC=N", "CL", "OC=N",
                "CR", "CR", "C=N", "CR", "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GEJYOJ
        /// </summary>
        // @cdk.inchi InChI=1S/C4H6F4NP/c1-9(2)3(5)10-4(6,7)8/h1-2H3
        [TestMethod()]
        public void TestGEJYOJ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Double);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[8], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);

            string[] expected = {"-P=C", "F", "F", "F", "F", "NC=P", "CR", "C=P", "CR", "CR", "HC", "HC", "HC", "HC", "HC",
                "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GEKXEZ
        /// </summary>
        // @cdk.inchi InChI=1S/C4H12N2/c1-4(2,3)6-5/h6H,5H2,1-3H3
        [TestMethod()]
        public void TestGEKXEZ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[16], Single);
            container.AddBond(container.Atoms[3], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);

            string[] expected = {"CR", "CR", "CR", "CR", "NR", "NR", "HNR", "HNR", "HNR", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GEMCEG
        /// </summary>
        // @cdk.inchi InChI=1S/C7H8N2/c1-6(4-8)3-7(6,2)5-9/h3H2,1-2H3/t6-,7+
        [TestMethod()]
        public void TestGEMCEG()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Triple);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Triple);

            string[] expected = {"CR3R", "CR3R", "CR3R", "CSP", "CR", "CR", "CSP", "NSP", "NSP", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GEMCOQ
        /// </summary>
        // @cdk.inchi InChI=1S/C7H8N2O2/c1-10-6(4-8)3-7(6,5-9)11-2/h3H2,1-2H3/t6-,7+
        [TestMethod()]
        public void TestGEMCOQ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Triple);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Triple);

            string[] expected = {"CR3R", "CR3R", "CR3R", "CSP", "CR", "CR", "CSP", "NSP", "NSP", "OR", "OR", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GEMDAD
        /// </summary>
        // @cdk.inchi InChI=1S/C9H14N4/c1-12(2)8(6-10)5-9(8,7-11)13(3)4/h5H2,1-4H3/t8-,9-/m1/s1
        [TestMethod()]
        public void TestGEMDAD()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Triple);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Triple);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[12], container.Atoms[26], Single);

            string[] expected = {"CR3R", "CR3R", "CR3R", "CSP", "NSP", "NR", "CR", "CR", "CSP", "NSP", "NR", "CR", "CR",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GERCUB
        /// </summary>
        // @cdk.inchi InChI=1S/C7H6N2O3S/c10-13(11,12)7-8-5-3-1-2-4-6(5)9-7/h1-4H,(H,8,9)(H,10,11,12)
        [TestMethod()]
        public void TestGERCUB()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[12], Double);
            container.AddBond(container.Atoms[0], container.Atoms[11], Double);
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Double);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);

            string[] expected = {"SO3", "CIM+", "C5", "C5", "CB", "CB", "CB", "CB", "NIM+", "NIM+", "O3S", "O3S", "O3S",
                "HC", "HC", "HC", "HC", "HIM+", "HIM+"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GESCIQ
        /// </summary>
        // @cdk.inchi InChI=1S/C12H17N4OS/c1-8-11(3-4-17)18-7-16(8)6-10-5-14-9(2)15-12(10)13/h5,7,17H,3-4,6H2,1-2H3,(H2,13,14,15)/q+1
        [TestMethod()]
        public void TestGESCIQ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[18], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[21], Single);
            container.AddBond(container.Atoms[4], container.Atoms[20], Single);
            container.AddBond(container.Atoms[4], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[23], Single);
            container.AddBond(container.Atoms[6], container.Atoms[22], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[25], Single);
            container.AddBond(container.Atoms[7], container.Atoms[24], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[26], Single);
            container.AddBond(container.Atoms[9], container.Atoms[34], Single);
            container.AddBond(container.Atoms[9], container.Atoms[33], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[29], Single);
            container.AddBond(container.Atoms[12], container.Atoms[28], Single);
            container.AddBond(container.Atoms[12], container.Atoms[27], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[14], container.Atoms[16], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[15], container.Atoms[31], Single);
            container.AddBond(container.Atoms[15], container.Atoms[30], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Double);
            container.AddBond(container.Atoms[17], container.Atoms[32], Single);

            string[] expected = {"STHI", "C5A", "N5B+", "C5B", "CR", "C5A", "CR", "CR", "OR", "CR", "NPYD", "CB", "CR",
                "NPYD", "CB", "NC=N", "CB", "CB", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HOR", "HC", "HC",
                "HC", "HNCN", "HNCN", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GESNIB
        /// </summary>
        // @cdk.inchi InChI=1S/C7H6/c1-2-4-7-5-6(7)3-1/h1-4H,5H2
        [TestMethod()]
        public void TestGESNIB()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);

            string[] expected = { "CB", "CB", "CB", "CB", "CB", "CB", "CR3R", "HC", "HC", "HC", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GESSUS
        /// </summary>
        // @cdk.inchi InChI=1S/C9H13NO2S/c1-8-4-6-9(7-5-8)13(11,12)10(2)3/h4-7H,1-3H3
        [TestMethod()]
        public void TestGESSUS()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);

            string[] expected = {"SO2N", "O2S", "O2S", "NSO2", "CB", "CB", "CB", "CB", "CB", "CB", "CR", "CR", "CR", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GETFIU
        /// </summary>
        // @cdk.inchi InChI=1S/C6H2N4O5/c7-8-4-1-3(9(12)13)2-5(6(4)11)10(14)15/h1-2H
        [TestMethod()]
        public void TestGETFIU()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", -1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[10], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[12], Double);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Double);

            string[] expected = {"C=OR", "C=N", "C=C", "C=C", "C=C", "C=C", "=N=", "NAZT", "NO2", "NO2", "O=CR", "O2N",
                "O2N", "O2N", "O2N", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GETFOA
        /// </summary>
        // @cdk.inchi InChI=1S/C6HClN4O5/c7-4-3(10(13)14)1-2(9-8)6(12)5(4)11(15)16/h1H
        [TestMethod()]
        public void TestGETFOA()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[16], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Triple);
            container.AddBond(container.Atoms[8], container.Atoms[12], Double);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Double);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);

            string[] expected = {"CB", "CB", "CB", "CB", "CB", "CB", "NR%", "NSP", "NO2", "NO2", "OM2", "O2N", "O2N",
                "O2N", "O2N", "CL", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GETJOE
        /// </summary>
        // @cdk.inchi InChI=1S/C12H10P2S6/c15-13(17-11-7-3-1-4-8-11)19-14(16,20-13)18-12-9-5-2-6-10-12/h1-10H/t13-,14-
        [TestMethod()]
        public void TestGETJOE()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("P", 1));
            container.Atoms.Add(NewAtm("S", -1));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("P", 1));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", -1));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[15], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[16], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[17], Single);
            container.AddBond(container.Atoms[15], container.Atoms[18], Single);
            container.AddBond(container.Atoms[18], container.Atoms[19], Single);
            container.AddBond(container.Atoms[19], container.Atoms[20], Double);
            container.AddBond(container.Atoms[19], container.Atoms[21], Single);
            container.AddBond(container.Atoms[20], container.Atoms[22], Single);
            container.AddBond(container.Atoms[20], container.Atoms[23], Single);
            container.AddBond(container.Atoms[21], container.Atoms[24], Double);
            container.AddBond(container.Atoms[21], container.Atoms[25], Single);
            container.AddBond(container.Atoms[22], container.Atoms[26], Double);
            container.AddBond(container.Atoms[22], container.Atoms[27], Single);
            container.AddBond(container.Atoms[24], container.Atoms[26], Single);
            container.AddBond(container.Atoms[24], container.Atoms[28], Single);
            container.AddBond(container.Atoms[26], container.Atoms[29], Single);

            string[] expected = {"S", "PTET", "S-P", "S", "CB", "CB", "CB", "CB", "CB", "CB", "HC", "HC", "HC", "HC", "HC",
                "PTET", "S", "S-P", "S", "CB", "CB", "CB", "CB", "HC", "CB", "HC", "CB", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GEWTAD
        /// </summary>
        // @cdk.inchi InChI=1S/C10H9NO/c12-10-6-7-11(8-10)9-4-2-1-3-5-9/h1-7H,8H2
        [TestMethod()]
        public void TestGEWTAD()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[13], Single);
            container.AddBond(container.Atoms[1], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);

            string[] expected = {"NC=C", "CR", "C=OR", "O=CR", "C=C", "C=C", "CB", "CB", "CB", "CB", "CB", "CB", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GEXGIZ
        /// </summary>
        // @cdk.inchi InChI=1S/C7H8N2O4/c10-6(11)3-8-1-2-9(5-8)4-7(12)13/h1-2,5H,3-4H2,(H-,10,11,12,13)/p+1
        [TestMethod()]
        public void TestGEXGIZ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[10], Double);
            container.AddBond(container.Atoms[1], container.Atoms[13], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[21], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Double);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);

            string[] expected = {"O=CO", "OC=O", "OC=O", "O=CO", "NIM+", "NIM+", "CIM+", "C5", "C5", "CR", "COO", "CR",
                "COO", "HOCO", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HOCO"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GEYWOW
        /// </summary>
        // @cdk.inchi InChI=1S/C12H13N3O4/c1-8-11(12(17)13-6-7-16)15(19)10-5-3-2-4-9(10)14(8)18/h2-5,16H,6-7H2,1H3,(H,13,17)
        [TestMethod()]
        public void TestGEYWOW()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[15], Double);
            container.AddBond(container.Atoms[3], container.Atoms[19], Single);
            container.AddBond(container.Atoms[3], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Double);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Double);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Double);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);
            container.AddBond(container.Atoms[16], container.Atoms[26], Single);
            container.AddBond(container.Atoms[16], container.Atoms[25], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[17], container.Atoms[28], Single);
            container.AddBond(container.Atoms[17], container.Atoms[27], Single);
            container.AddBond(container.Atoms[18], container.Atoms[31], Single);
            container.AddBond(container.Atoms[18], container.Atoms[30], Single);
            container.AddBond(container.Atoms[18], container.Atoms[29], Single);

            string[] expected = {"OXN", "OXN", "O=CN", "OR", "NPOX", "NPOX", "NC=O", "CB", "CB", "CB", "CB", "CB", "CB",
                "CB", "CB", "C=ON", "CR", "CR", "CR", "HOR", "HNCO", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GICTIV01
        /// </summary>
        // @cdk.inchi InChI=1S/C4H2N10O4/c15-13(16)11-1-5-3(9-11)7-8-4-6-2-12(10-4)14(17)18/h1-2H/b8-7+
        [TestMethod()]
        public void TestGICTIV01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Double);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Double);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Double);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[17], Single);
            container.AddBond(container.Atoms[16], container.Atoms[18], Single);
            container.AddBond(container.Atoms[16], container.Atoms[19], Double);

            string[] expected = {"C5A", "C5B", "N5A", "NPYL", "N5B", "N=N", "NO2", "O2N", "O2N", "HC", "N=N", "C5B", "N5A",
                "N5B", "NPYL", "C5A", "NO2", "HC", "O2N", "O2N"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GIDJUY
        /// </summary>
        // @cdk.inchi InChI=1S/C10H10BrNO4/c1-15-7(13)9-2-3-10(11,5-12)6(4-9)16-8(9)14/h6H,2-4H2,1H3/t6-,9-,10+/m1/s1
        [TestMethod()]
        public void TestGIDJUY()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Br", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[16], Single);
            container.AddBond(container.Atoms[2], container.Atoms[17], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[18], Single);
            container.AddBond(container.Atoms[3], container.Atoms[19], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[20], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[13], container.Atoms[24], Single);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Triple);

            string[] expected = {"BR", "CR", "CR", "CR", "CR", "CR", "OC=O", "COO", "O=CO", "CR", "O=CO", "COO", "OC=O",
                "CR", "CSP", "NSP", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GIDMEL
        /// </summary>
        // @cdk.inchi InChI=1S/C8H7N7/c9-7-5-3-4(14-15-11)1-2-6(5)12-8(10)13-7/h1-3H,(H4,9,10,12,13)/p+1
        [TestMethod()]
        public void TestGIDMEL()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[15], Single);
            container.AddBond(container.Atoms[0], container.Atoms[14], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[17], Single);
            container.AddBond(container.Atoms[2], container.Atoms[16], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);

            string[] expected = {"NPD+", "CB", "NC=N", "NPYD", "CB", "NC=N", "CB", "CB", "CB", "N=N", "=N=", "NAZT", "CB",
                "CB", "CB", "HPD+", "HNCN", "HNCN", "HNCN", "HNCN", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GIDTIW
        /// </summary>
        // @cdk.inchi InChI=1S/C11H15N5O6/c12-9(19)15-10(20)13-7-1-2-16(11(21)14-7)8-3-5(18)6(4-17)22-8/h1-2,5-6,8,17-18H,3-4H2,(H4,12,13,14,15,19,20,21)/t5-,6+,8+/m0/s1
        [TestMethod()]
        public void TestGIDTIW()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[11], Double);
            container.AddBond(container.Atoms[1], container.Atoms[15], Double);
            container.AddBond(container.Atoms[2], container.Atoms[16], Double);
            container.AddBond(container.Atoms[3], container.Atoms[19], Single);
            container.AddBond(container.Atoms[3], container.Atoms[22], Single);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[20], Single);
            container.AddBond(container.Atoms[5], container.Atoms[21], Single);
            container.AddBond(container.Atoms[5], container.Atoms[23], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Double);
            container.AddBond(container.Atoms[8], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[24], Single);
            container.AddBond(container.Atoms[9], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[25], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[26], Single);
            container.AddBond(container.Atoms[10], container.Atoms[27], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[13], container.Atoms[28], Single);
            container.AddBond(container.Atoms[14], container.Atoms[29], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Single);
            container.AddBond(container.Atoms[17], container.Atoms[30], Single);
            container.AddBond(container.Atoms[18], container.Atoms[19], Single);
            container.AddBond(container.Atoms[18], container.Atoms[31], Single);
            container.AddBond(container.Atoms[18], container.Atoms[32], Single);
            container.AddBond(container.Atoms[19], container.Atoms[20], Single);
            container.AddBond(container.Atoms[19], container.Atoms[33], Single);
            container.AddBond(container.Atoms[20], container.Atoms[21], Single);
            container.AddBond(container.Atoms[20], container.Atoms[34], Single);
            container.AddBond(container.Atoms[21], container.Atoms[35], Single);
            container.AddBond(container.Atoms[21], container.Atoms[36], Single);

            string[] expected = {"O=CN", "O=CN", "O=CN", "OR", "OR", "OR", "NC=O", "N=C", "NC=O", "NC=O", "NC=O", "CONN",
                "C=N", "C=C", "C=C", "CONN", "CONN", "CR", "CR", "CR", "CR", "CR", "HOR", "HOR", "HNCO", "HNCO",
                "HNCO", "HNCO", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GIFRAO
        /// </summary>
        // @cdk.inchi InChI=1S/C12H13N4O2S/c1-8-7-9(2)15-12(14-8)16-19(17,18)11-5-3-10(13)4-6-11/h3-7H,13H2,1-2H3/q-1
        [TestMethod()]
        public void TestGIFRAO()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[19], Single);
            container.AddBond(container.Atoms[0], container.Atoms[20], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[21], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[22], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[23], Single);
            container.AddBond(container.Atoms[6], container.Atoms[24], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[9], Double);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Double);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[17], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[14], container.Atoms[25], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[18], Single);
            container.AddBond(container.Atoms[17], container.Atoms[26], Single);
            container.AddBond(container.Atoms[17], container.Atoms[27], Single);
            container.AddBond(container.Atoms[17], container.Atoms[28], Single);
            container.AddBond(container.Atoms[18], container.Atoms[29], Single);
            container.AddBond(container.Atoms[18], container.Atoms[30], Single);
            container.AddBond(container.Atoms[18], container.Atoms[31], Single);

            string[] expected = {"NC=C", "CB", "CB", "CB", "CB", "CB", "CB", "SO2N", "O2S", "O2S", "NM", "CB", "NPYD",
                "CB", "CB", "CB", "NPYD", "CR", "CR", "HNCC", "HNCC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GIGCEE
        /// </summary>
        // @cdk.inchi InChI=1S/C14H9N3/c1-4-11-12(15-7-1)5-6-13-14(11)17-8-2-3-10(17)9-16-13/h1-9H
        [TestMethod()]
        public void TestGIGCEE()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[17], Single);
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[18], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[19], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Double);
            container.AddBond(container.Atoms[3], container.Atoms[20], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[21], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[22], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[23], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[24], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[10], container.Atoms[25], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[13], container.Atoms[16], Double);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);

            string[] expected = {"C5A", "C5B", "C5B", "C=N", "N=C", "CB", "CB", "NPYD", "CB", "CB", "CB", "NPYL", "C5A",
                "CB", "CB", "CB", "CB", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GIGMUE
        /// </summary>
        // @cdk.inchi InChI=1S/C10H14S4/c1-2-10-8-13-6-4-11-3-5-12-7-9(1)14-10/h1-2H,3-8H2
        [TestMethod()]
        public void TestGIGMUE()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);
            container.AddBond(container.Atoms[13], container.Atoms[27], Single);

            string[] expected = {"STHI", "S", "S", "S", "C5A", "C5B", "C5B", "C5A", "CR", "CR", "CR", "CR", "CR", "CR",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GIHZEC
        /// </summary>
        // @cdk.inchi InChI=1S/C9H8O5/c1-13-6(11)8-4-3(10)5(8)9(4,8)7(12)14-2/h4-5H,1-2H3/t4-,5+,8-,9+
        [TestMethod()]
        public void TestGIHZEC()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[9], Double);
            container.AddBond(container.Atoms[1], container.Atoms[10], Double);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Double);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[13], container.Atoms[19], Single);
            container.AddBond(container.Atoms[13], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[21], Single);

            string[] expected = {"O=CR", "O=CO", "OC=O", "O=CO", "OC=O", "CR3R", "CR3R", "CR3R", "CR3R", "C=OR", "COO",
                "CR", "COO", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GIJMOB01
        /// </summary>
        // @cdk.inchi InChI=1S/C7H5NO4S/c9-4-2-1-3-5-6(4)7(10)8-13(5,11)12/h1-3H,(H2,8,9,10)/p-1
        [TestMethod()]
        public void TestGIJMOB01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[12], Double);
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);

            string[] expected = {"SO2N", "O2S", "NM", "C=ON", "O=CN", "CB", "CB", "OC=C", "CB", "CB", "CB", "CB", "O2S",
                "HOCC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GIKJIT
        /// </summary>
        // @cdk.inchi InChI=1S/C7H4BrNO/c8-5-3-6-1-2-7(10)9(6)4-5/h1-4H
        [TestMethod()]
        public void TestGIKJIT()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("Br", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);

            string[] expected = {"C=C", "C=C", "C=ON", "O=CN", "NPYL", "C5A", "C5B", "BR", "C5B", "C5A", "HC", "HC", "HC",
                "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GIKNOD
        /// </summary>
        // @cdk.inchi InChI=1S/C10H13NO2S/c1-7(11)9(10(12)13)14-8-5-3-2-4-6-8/h2-7,9H,11H2,1H3,(H,12,13)/t7-,9+/m1/s1
        [TestMethod()]
        public void TestGIKNOD()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[14], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[16], Single);
            container.AddBond(container.Atoms[3], container.Atoms[17], Single);
            container.AddBond(container.Atoms[3], container.Atoms[18], Single);
            container.AddBond(container.Atoms[4], container.Atoms[19], Single);
            container.AddBond(container.Atoms[4], container.Atoms[20], Single);
            container.AddBond(container.Atoms[4], container.Atoms[21], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[24], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);

            string[] expected = {"S", "CR", "CR", "NR+", "CR", "CO2M", "O2CM", "O2CM", "CB", "CB", "CB", "CB", "CB", "CB",
                "HC", "HC", "HNR+", "HNR+", "HNR+", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GIKTUP
        /// </summary>
        // @cdk.inchi InChI=1S/C8H6O5/c9-1-5-3-11-8-6(2-10)4-12-7(5)13-8/h1-4,7-8H/t7-,8-/m0/s1
        [TestMethod()]
        public void TestGIKTUP()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[0], container.Atoms[13], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[14], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Double);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Double);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);

            string[] expected = {"CR", "C=C", "C=C", "CR", "C=C", "C=C", "C=OR", "C=OR", "OC=C", "OC=C", "OR", "O=CR",
                "O=CR", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GIMJIV
        /// </summary>
        // @cdk.inchi InChI=1S/C11H11Cl4N/c12-8-10(14)6-4-1-2-5(3-4)7(6)11(8,15)16-9(10)13/h4-8H,1-3H2/t4-,5+,6+,7-,8+,10-,11-/m0/s1
        [TestMethod()]
        public void TestGIMJIV()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[15], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);
            container.AddBond(container.Atoms[15], container.Atoms[25], Single);
            container.AddBond(container.Atoms[15], container.Atoms[26], Single);

            string[] expected = {"CL", "CL", "CL", "CL", "N=C", "CR", "C=N", "CR", "CR", "CR", "CR", "CR", "CR", "CR",
                "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GINMUL
        /// </summary>
        // @cdk.inchi InChI=1S/C9H8N2O3S/c1-14-8(13)5-6-4-7(12)10-9-11(6)2-3-15-9/h2-4H,5H2,1H3
        [TestMethod()]
        public void TestGINMUL()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Double);
            container.AddBond(container.Atoms[2], container.Atoms[13], Double);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[18], Single);
            container.AddBond(container.Atoms[12], container.Atoms[19], Single);
            container.AddBond(container.Atoms[14], container.Atoms[20], Single);
            container.AddBond(container.Atoms[14], container.Atoms[21], Single);
            container.AddBond(container.Atoms[14], container.Atoms[22], Single);

            string[] expected = {"S", "O=CN", "O=CO", "OC=O", "N=C", "NC=N", "C=C", "C=C", "C=ON", "C=N", "C=C", "C=C",
                "CR", "COO", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GIPHES
        /// </summary>
        // @cdk.inchi InChI=1S/C10H10O4/c11-9(12)8(10(13)14)6-7-4-2-1-3-5-7/h1-5,8H,6H2,(H,11,12)(H,13,14)/p-1
        [TestMethod()]
        public void TestGIPHES()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Double);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Double);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[22], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[21], Single);

            string[] expected = {"O2CM", "O2CM", "O=CO", "OC=O", "CO2M", "CR", "COO", "CR", "CB", "CB", "CB", "CB", "CB",
                "CB", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HOCO"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GIRDOA01
        /// </summary>
        // @cdk.inchi InChI=1S/C10H20N2P2/c1-9-11(3)5-7-13(9)10(2)12(4)6-8-14(9)10/h5-8H2,1-4H3/t9-,10-,13+,14+
        [TestMethod()]
        public void TestGIRDOA01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[17], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[18], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Single);
            container.AddBond(container.Atoms[17], container.Atoms[19], Single);
            container.AddBond(container.Atoms[17], container.Atoms[20], Single);
            container.AddBond(container.Atoms[18], container.Atoms[21], Single);
            container.AddBond(container.Atoms[19], container.Atoms[22], Single);
            container.AddBond(container.Atoms[19], container.Atoms[23], Single);
            container.AddBond(container.Atoms[20], container.Atoms[24], Single);
            container.AddBond(container.Atoms[20], container.Atoms[25], Single);
            container.AddBond(container.Atoms[20], container.Atoms[26], Single);
            container.AddBond(container.Atoms[21], container.Atoms[22], Single);
            container.AddBond(container.Atoms[21], container.Atoms[27], Single);
            container.AddBond(container.Atoms[21], container.Atoms[28], Single);
            container.AddBond(container.Atoms[22], container.Atoms[29], Single);
            container.AddBond(container.Atoms[22], container.Atoms[30], Single);
            container.AddBond(container.Atoms[23], container.Atoms[31], Single);
            container.AddBond(container.Atoms[23], container.Atoms[32], Single);
            container.AddBond(container.Atoms[23], container.Atoms[33], Single);

            string[] expected = {"P", "NR", "CR4R", "CR", "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "CR4R", "P", "NR", "CR", "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GOHVUU
        /// </summary>
        // @cdk.inchi InChI=1S/C4H2N4O4/c9-1-5-2(10)8-4(12)6-3(11)7(1)8/h(H,5,9,10)(H,6,11,12)
        [TestMethod()]
        public void TestGOHVUU()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Double);

            string[] expected = {"NC=O", "CONN", "NC=O", "CONN", "NC=O", "CONN", "NC=O", "CONN", "O=CN", "O=CN", "O=CN",
                "O=CN", "HNCO", "HNCO"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GOJCIR
        /// </summary>
        // @cdk.inchi InChI=1S/C6H2Cl10OS2/c7-3(8,9)1-17-2(4(10,11)12)19-6(16,18-1)5(13,14)15/h1-2H/t1-,2-/m1/s1
        [TestMethod()]
        public void TestGOJCIR()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Single);
            container.AddBond(container.Atoms[13], container.Atoms[16], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Single);
            container.AddBond(container.Atoms[17], container.Atoms[19], Single);
            container.AddBond(container.Atoms[17], container.Atoms[20], Single);

            string[] expected = {"OR", "CR", "HC", "S", "CR", "S", "CR", "HC", "CR", "CL", "CL", "CL", "CL", "CR", "CL",
                "CL", "CL", "CR", "CL", "CL", "CL"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GOJKIZ
        /// </summary>
        // @cdk.inchi InChI=1S/C7H5N5O2S/c13-12(14)5-2-1-3-8-6(5)15-7-9-4-10-11-7/h1-4H,(H,9,10,11)
        [TestMethod()]
        public void TestGOJKIZ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Double);

            string[] expected = {"CB", "NPYD", "CB", "CB", "CB", "CB", "S", "C5B", "N5A", "NPYL", "C5A", "N5B", "NO2",
                "O2N", "O2N", "HC", "HC", "HC", "HPYL", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for GUANCH01
        /// </summary>
        // @cdk.inchi InChI=1S/C5H5N5O/c6-5-9-3-2(4(11)10-5)7-1-8-3/h1H,(H4,6,7,8,9,10,11)/p+1
        [TestMethod()]
        public void TestGUANCH01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[9], Double);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Double);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Double);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);

            string[] expected = {"O=CN", "NC=O", "N=C", "NIM+", "NIM+", "NC=N", "CGD", "C5", "C5", "C=ON", "CIM+", "HNCO",
                "HIM+", "HC", "HIM+", "HNCN", "HNCN"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for HYTPRD01
        /// </summary>
        // @cdk.inchi InChI=1S/C12H15NOS/c14-11-7-3-2-6-10(11)12(15)13-8-4-1-5-9-13/h2-3,6-7,14H,1,4-5,8-9H2
        [TestMethod()]
        public void TestHYTPRD01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);
            container.AddBond(container.Atoms[13], container.Atoms[27], Single);
            container.AddBond(container.Atoms[14], container.Atoms[28], Single);
            container.AddBond(container.Atoms[14], container.Atoms[29], Single);

            string[] expected = {"S=C", "C=SN", "CB", "CB", "OC=C", "CB", "CB", "CB", "CB", "NC=S", "CR", "CR", "CR", "CR",
                "CR", "HOCC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for ISTZCN10
        /// </summary>
        // @cdk.inchi InChI=1S/C4N2S6/c5-1-2-3-4(6-7-2)9-11-12-10-8-3
        [TestMethod()]
        public void TestISTZCN10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[11], Triple);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);

            string[] expected = { "S", "S", "S", "S", "S", "STHI", "N5A", "NSP", "C5B", "C5B", "C5A", "CSP" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JABGAU
        /// </summary>
        // @cdk.inchi InChI=1S/C12H13NS2/c1-8-5-4-6-11(10(8)3)13-9(2)7-15-12(13)14/h4-7H,1-3H3
        [TestMethod()]
        public void TestJABGAU()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[12], container.Atoms[26], Single);
            container.AddBond(container.Atoms[12], container.Atoms[27], Single);
            container.AddBond(container.Atoms[13], container.Atoms[19], Single);
            container.AddBond(container.Atoms[13], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[21], Single);
            container.AddBond(container.Atoms[14], container.Atoms[22], Single);
            container.AddBond(container.Atoms[14], container.Atoms[23], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);

            string[] expected = {"S", "S=C", "C=SN", "NC=S", "C=C", "C=C", "CB", "CB", "CB", "CB", "CB", "CB", "CR", "CR",
                "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JADLIJ
        /// </summary>
        // @cdk.inchi InChI=1S/C7H3ClS3/c8-4-1-2-5-6(3-4)10-11-7(5)9/h1-3H
        [TestMethod()]
        public void TestJADLIJ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);

            string[] expected = { "CL", "S", "S", "S=C", "CSS", "CB", "CB", "CB", "CB", "CB", "CB", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JADXER
        /// </summary>
        // @cdk.inchi InChI=1S/C12H19NO7/c1-11(2)16-5-6(18-11)7-8(20-12(3,4)19-7)9-10(17-9)13(14)15/h6-10H,5H2,1-4H3/t6-,7-,8+,9+,10-/m1/s1
        [TestMethod()]
        public void TestJADXER()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Double);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[36], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[37], Single);
            container.AddBond(container.Atoms[13], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[16], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[15], container.Atoms[38], Single);
            container.AddBond(container.Atoms[15], container.Atoms[26], Single);
            container.AddBond(container.Atoms[15], container.Atoms[25], Single);
            container.AddBond(container.Atoms[16], container.Atoms[29], Single);
            container.AddBond(container.Atoms[16], container.Atoms[28], Single);
            container.AddBond(container.Atoms[16], container.Atoms[27], Single);
            container.AddBond(container.Atoms[17], container.Atoms[19], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Single);
            container.AddBond(container.Atoms[18], container.Atoms[32], Single);
            container.AddBond(container.Atoms[18], container.Atoms[31], Single);
            container.AddBond(container.Atoms[18], container.Atoms[30], Single);
            container.AddBond(container.Atoms[19], container.Atoms[35], Single);
            container.AddBond(container.Atoms[19], container.Atoms[34], Single);
            container.AddBond(container.Atoms[19], container.Atoms[33], Single);

            string[] expected = {"OR", "O2N", "O2N", "OR", "OR", "OR", "OR", "NO2", "CR3R", "CR3R", "CR", "CR", "CR", "CR",
                "CR", "CR", "CR", "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JAHKOS
        /// </summary>
        // @cdk.inchi InChI=1S/C10H12O3S/c1-10(14(2,11)12)9(13-10)8-6-4-3-5-7-8/h3-7,9H,1-2H3/t9-,10-/m0/s1
        [TestMethod()]
        public void TestJAHKOS()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);

            string[] expected = {"SO2", "O2S", "O2S", "OR", "CR3R", "CR3R", "CR", "CR", "CB", "CB", "CB", "CB", "CB", "CB",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JAHTOB
        /// </summary>
        // @cdk.inchi InChI=1S/C12H13ClO/c1-12(2)10(11(12)14-3)8-4-6-9(13)7-5-8/h4-7H,1-3H3
        [TestMethod()]
        public void TestJAHTOB()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[18], Single);
            container.AddBond(container.Atoms[4], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[20], Single);
            container.AddBond(container.Atoms[5], container.Atoms[21], Single);
            container.AddBond(container.Atoms[5], container.Atoms[22], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[23], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[24], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[25], Single);
            container.AddBond(container.Atoms[11], container.Atoms[26], Single);

            string[] expected = {"C=C", "C=C", "CR3R", "CR", "CR", "CR", "CB", "CB", "CB", "CB", "CB", "CB", "OC=C", "CL",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JAHYEW
        /// </summary>
        // @cdk.inchi InChI=1S/C8H12Cl3N/c9-7-3-1-5-12(6-2-4-7)8(7,10)11/h1-6H2
        [TestMethod()]
        public void TestJAHYEW()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);

            string[] expected = {"CL", "CL", "CL", "NR", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JAKGUX
        /// </summary>
        // @cdk.inchi InChI=1S/C10H12P2/c1-2-4-10-9(3-1)11-5-7-12(10)8-6-11/h1-4H,5-8H2/t11-,12+
        [TestMethod()]
        public void TestJAKGUX()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);

            string[] expected = {"P", "P", "CB", "CB", "CB", "CB", "CB", "CB", "CR", "CR", "CR", "CR", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JAKJOU
        /// </summary>
        // @cdk.inchi InChI=1S/C8H10N2O/c1-6-3-4-7(9-2)8(5-6)10-11/h3-5,9H,1-2H3
        [TestMethod()]
        public void TestJAKJOU()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[18], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[19], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[20], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[14], Single);

            string[] expected = {"CB", "CB", "CB", "CB", "CB", "CB", "NC=C", "CR", "N=O", "O=N", "CR", "HC", "HC", "HC",
                "HC", "HC", "HC", "HNCC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JALSOE
        /// </summary>
        // @cdk.inchi InChI=1S/C10H15OS2/c11-13(12)10-4-7-1-8(5-10)3-9(2-7)6-10/h7-9H,1-6H2/t7-,8+,9-,10-
        [TestMethod()]
        public void TestJALSOE()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[25], Single);
            container.AddBond(container.Atoms[11], container.Atoms[24], Single);
            container.AddBond(container.Atoms[12], container.Atoms[27], Single);
            container.AddBond(container.Atoms[12], container.Atoms[26], Single);

            string[] expected = {"SSOM", "SSMO", "OSMS", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JAMREU
        /// </summary>
        // @cdk.inchi InChI=1S/C20H22N4O5/c1-24(2)17(25)12-28-18(26)11-13-3-9-16(10-4-13)29-19(27)14-5-7-15(8-6-14)23-20(21)22/h3-10H,11-12H2,1-2H3,(H4,21,22,23)/p+1
        [TestMethod()]
        public void TestJAMREU()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[30], Single);
            container.AddBond(container.Atoms[0], container.Atoms[29], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[32], Single);
            container.AddBond(container.Atoms[1], container.Atoms[31], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[33], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[34], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[35], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[36], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[37], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[18], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[14], container.Atoms[38], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[15], container.Atoms[39], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Double);
            container.AddBond(container.Atoms[16], container.Atoms[19], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[17], container.Atoms[40], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Double);
            container.AddBond(container.Atoms[18], container.Atoms[41], Single);
            container.AddBond(container.Atoms[19], container.Atoms[43], Single);
            container.AddBond(container.Atoms[19], container.Atoms[42], Single);
            container.AddBond(container.Atoms[19], container.Atoms[20], Single);
            container.AddBond(container.Atoms[20], container.Atoms[22], Single);
            container.AddBond(container.Atoms[20], container.Atoms[21], Double);
            container.AddBond(container.Atoms[22], container.Atoms[23], Single);
            container.AddBond(container.Atoms[23], container.Atoms[45], Single);
            container.AddBond(container.Atoms[23], container.Atoms[44], Single);
            container.AddBond(container.Atoms[23], container.Atoms[24], Single);
            container.AddBond(container.Atoms[24], container.Atoms[26], Single);
            container.AddBond(container.Atoms[24], container.Atoms[25], Double);
            container.AddBond(container.Atoms[26], container.Atoms[28], Single);
            container.AddBond(container.Atoms[26], container.Atoms[27], Single);
            container.AddBond(container.Atoms[27], container.Atoms[48], Single);
            container.AddBond(container.Atoms[27], container.Atoms[47], Single);
            container.AddBond(container.Atoms[27], container.Atoms[46], Single);
            container.AddBond(container.Atoms[28], container.Atoms[51], Single);
            container.AddBond(container.Atoms[28], container.Atoms[50], Single);
            container.AddBond(container.Atoms[28], container.Atoms[49], Single);

            string[] expected = {"NGD+", "NGD+", "CGD+", "NGD+", "CB", "CB", "CB", "CB", "CB", "CB", "COO", "O=CO", "OC=O",
                "CB", "CB", "CB", "CB", "CB", "CB", "CR", "COO", "O=CO", "OC=O", "CR", "C=ON", "O=CN", "NC=O", "CR",
                "CR", "HGD+", "HGD+", "HGD+", "HGD+", "HGD+", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JANDOR
        /// </summary>
        // @cdk.inchi InChI=1S/C21H20N4O7S/c1-11(26)14-15-17(31-2)18(33-21-22-8-3-9-23-21)16(24(15)19(14)27)20(28)32-10-12-4-6-13(7-5-12)25(29)30/h3-9,11,14-15,17,26H,10H2,1-2H3/t11-,14-,15+,17-/m1/s1
        [TestMethod()]
        public void TestJANDOR()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[0], container.Atoms[33], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[12], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[19], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[34], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[35], Single);
            container.AddBond(container.Atoms[6], container.Atoms[32], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[36], Single);
            container.AddBond(container.Atoms[8], container.Atoms[37], Single);
            container.AddBond(container.Atoms[8], container.Atoms[38], Single);
            container.AddBond(container.Atoms[8], container.Atoms[39], Single);
            container.AddBond(container.Atoms[9], container.Atoms[49], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[50], Single);
            container.AddBond(container.Atoms[11], container.Atoms[51], Single);
            container.AddBond(container.Atoms[11], container.Atoms[52], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[13], container.Atoms[18], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Double);
            container.AddBond(container.Atoms[15], container.Atoms[40], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[16], container.Atoms[41], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Double);
            container.AddBond(container.Atoms[17], container.Atoms[42], Single);
            container.AddBond(container.Atoms[19], container.Atoms[20], Double);
            container.AddBond(container.Atoms[19], container.Atoms[21], Single);
            container.AddBond(container.Atoms[21], container.Atoms[22], Single);
            container.AddBond(container.Atoms[22], container.Atoms[23], Single);
            container.AddBond(container.Atoms[22], container.Atoms[43], Single);
            container.AddBond(container.Atoms[22], container.Atoms[44], Single);
            container.AddBond(container.Atoms[23], container.Atoms[24], Double);
            container.AddBond(container.Atoms[23], container.Atoms[28], Single);
            container.AddBond(container.Atoms[24], container.Atoms[25], Single);
            container.AddBond(container.Atoms[24], container.Atoms[45], Single);
            container.AddBond(container.Atoms[25], container.Atoms[26], Double);
            container.AddBond(container.Atoms[25], container.Atoms[46], Single);
            container.AddBond(container.Atoms[26], container.Atoms[27], Single);
            container.AddBond(container.Atoms[26], container.Atoms[29], Single);
            container.AddBond(container.Atoms[27], container.Atoms[28], Double);
            container.AddBond(container.Atoms[27], container.Atoms[47], Single);
            container.AddBond(container.Atoms[28], container.Atoms[48], Single);
            container.AddBond(container.Atoms[29], container.Atoms[30], Single);
            container.AddBond(container.Atoms[29], container.Atoms[31], Double);

            string[] expected = {"CR", "C=C", "C=C", "NC=O", "CR4R", "CR4R", "C=ON", "CR", "CR", "OR", "OR", "CR", "S",
                "CB", "NPYD", "CB", "CB", "CB", "NPYD", "COO", "O=CO", "OC=O", "CR", "CB", "CB", "CB", "CB", "CB",
                "CB", "NO2", "O2N", "O2N", "O=CN", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HOR", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JANMAM
        /// </summary>
        // @cdk.inchi InChI=1S/C8H10NO4P/c1-13-14(11,12)8(9-10)7-5-3-2-4-6-7/h2-6,10H,1H3,(H,11,12)/p-1/b9-8+
        [TestMethod()]
        public void TestJANMAM()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[22], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[6], container.Atoms[21], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);
            container.AddBond(container.Atoms[13], container.Atoms[18], Single);

            string[] expected = {"PO3", "OPO2", "O2P", "O2P", "-O-", "N=C", "CR", "C=N", "CB", "CB", "CB", "CB", "CB",
                "CB", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HO"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JAPFAH
        /// </summary>
        // @cdk.inchi InChI=1S/C12H9N3O3S/c16-11-10(13-12-14(11)4-5-19-12)7-8-2-1-3-9(6-8)15(17)18/h1-3,6-7H,4-5H2/b10-7-
        [TestMethod()]
        public void TestJAPFAH()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[19], Single);
            container.AddBond(container.Atoms[1], container.Atoms[20], Single);
            container.AddBond(container.Atoms[2], container.Atoms[21], Single);
            container.AddBond(container.Atoms[2], container.Atoms[22], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[23], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Double);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[24], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[16], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Double);
            container.AddBond(container.Atoms[16], container.Atoms[17], Double);
            container.AddBond(container.Atoms[16], container.Atoms[25], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Single);
            container.AddBond(container.Atoms[17], container.Atoms[26], Single);
            container.AddBond(container.Atoms[18], container.Atoms[27], Single);

            string[] expected = {"S", "CR", "CR", "C=N", "N=C", "NC=O", "C=ON", "O=CN", "C=C", "C=C", "CB", "CB", "CB",
                "NO2", "O2N", "O2N", "CB", "CB", "CB", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JATBIP
        /// </summary>
        // @cdk.inchi InChI=1S/C6H12N2O4/c1-9-5(10-2)7-8-6(11-3)12-4/h1-4H3
        [TestMethod()]
        public void TestJATBIP()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[17], Single);
            container.AddBond(container.Atoms[16], container.Atoms[18], Single);
            container.AddBond(container.Atoms[16], container.Atoms[19], Single);
            container.AddBond(container.Atoms[16], container.Atoms[20], Single);
            container.AddBond(container.Atoms[17], container.Atoms[21], Single);
            container.AddBond(container.Atoms[17], container.Atoms[22], Single);
            container.AddBond(container.Atoms[17], container.Atoms[23], Single);

            string[] expected = {"N=C", "C=N", "OC=N", "CR", "OC=N", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "N=C",
                "C=N", "OC=N", "OC=N", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JATCOW
        /// </summary>
        // @cdk.inchi InChI=1S/C5H3ClN4S/c6-5-10-4-2(11-5)3(7)8-1-9-4/h1H,(H2,7,8,9)
        [TestMethod()]
        public void TestJATCOW()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);

            string[] expected = {"STHI", "C5A", "N5B", "NPYD", "CB", "NPYD", "CB", "C5A", "C5B", "CL", "NC=N", "HC",
                "HNCN", "HNCN"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JATLOF
        /// </summary>
        // @cdk.inchi InChI=1S/C8H15N7O2S3/c9-6(15-20(12,16)17)1-2-18-3-5-4-19-8(13-5)14-7(10)11/h4H,1-3H2,(H2,9,15)(H2,12,16,17)(H4,10,11,13,14)/p+1
        [TestMethod()]
        public void TestJATLOF()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[20], Single);
            container.AddBond(container.Atoms[5], container.Atoms[21], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[23], Single);
            container.AddBond(container.Atoms[7], container.Atoms[22], Single);
            container.AddBond(container.Atoms[8], container.Atoms[25], Single);
            container.AddBond(container.Atoms[8], container.Atoms[24], Single);
            container.AddBond(container.Atoms[9], container.Atoms[27], Single);
            container.AddBond(container.Atoms[9], container.Atoms[26], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[29], Single);
            container.AddBond(container.Atoms[11], container.Atoms[28], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[31], Single);
            container.AddBond(container.Atoms[12], container.Atoms[30], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Double);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[33], Single);
            container.AddBond(container.Atoms[14], container.Atoms[32], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[16], container.Atoms[19], Double);
            container.AddBond(container.Atoms[16], container.Atoms[18], Double);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[17], container.Atoms[35], Single);
            container.AddBond(container.Atoms[17], container.Atoms[34], Single);

            string[] expected = {"STHI", "C5A", "N5B", "C5B", "C5A", "NGD+", "CGD+", "NGD+", "NGD+", "CR", "S", "CR", "CR",
                "C=N", "NC=N", "N=C", "SO2N", "NSO2", "O2S", "O2S", "HC", "HGD+", "HGD+", "HGD+", "HGD+", "HGD+", "HC",
                "HC", "HC", "HC", "HC", "HC", "HNCN", "HNCN", "HNSO", "HNSO"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JATMEW
        /// </summary>
        // @cdk.inchi InChI=1S/C9H18N6O2S3/c1-15(2)13-9-12-7(6-19-9)5-18-4-3-8(10)14-20(11,16)17/h6H,3-5H2,1-2H3,(H2,10,14)(H,12,13)(H2,11,16,17)
        [TestMethod()]
        public void TestJATMEW()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[20], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[21], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[22], Single);
            container.AddBond(container.Atoms[7], container.Atoms[23], Single);
            container.AddBond(container.Atoms[7], container.Atoms[24], Single);
            container.AddBond(container.Atoms[8], container.Atoms[25], Single);
            container.AddBond(container.Atoms[8], container.Atoms[26], Single);
            container.AddBond(container.Atoms[8], container.Atoms[27], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[28], Single);
            container.AddBond(container.Atoms[9], container.Atoms[29], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[30], Single);
            container.AddBond(container.Atoms[11], container.Atoms[31], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[32], Single);
            container.AddBond(container.Atoms[12], container.Atoms[33], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Double);
            container.AddBond(container.Atoms[14], container.Atoms[34], Single);
            container.AddBond(container.Atoms[14], container.Atoms[35], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[16], container.Atoms[18], Double);
            container.AddBond(container.Atoms[16], container.Atoms[19], Double);
            container.AddBond(container.Atoms[17], container.Atoms[36], Single);
            container.AddBond(container.Atoms[17], container.Atoms[37], Single);

            string[] expected = {"STHI", "C5A", "N5B", "C5B", "C5A", "NC=N", "NR", "CR", "CR", "CR", "S", "CR", "CR",
                "C=N", "NC=N", "N=C", "SO2N", "NSO2", "O2S", "O2S", "HC", "HNCN", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HNCN", "HNCN", "HNSO", "HNSO"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JAVGAO
        /// </summary>
        // @cdk.inchi InChI=1S/C8H10N2O2S/c1-9(2)13-8-6-4-3-5-7(8)10(11)12/h3-6H,1-2H3
        [TestMethod()]
        public void TestJAVGAO()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[19], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[19], container.Atoms[20], Single);
            container.AddBond(container.Atoms[19], container.Atoms[21], Single);
            container.AddBond(container.Atoms[19], container.Atoms[22], Single);

            string[] expected = {"S", "O2N", "O2N", "NR", "NO2", "CB", "CB", "CB", "CB", "CB", "CB", "CR", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "CR", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JAWJIA
        /// </summary>
        // @cdk.inchi InChI=1S/C11H15N5O6/c1-15-4-7(13-10(12)14-8(4)20)16(11(15)21)9-6(19)5(18)3(2-17)22-9/h3,5-6,9,17-19H,2H2,1H3,(H3,12,13,14,20)/t3-,5-,6-,9-/m1/s1
        [TestMethod()]
        public void TestJAWJIA()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[22], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Double);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[23], Single);
            container.AddBond(container.Atoms[9], container.Atoms[24], Single);
            container.AddBond(container.Atoms[11], container.Atoms[25], Single);
            container.AddBond(container.Atoms[11], container.Atoms[26], Single);
            container.AddBond(container.Atoms[11], container.Atoms[27], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[28], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[18], Single);
            container.AddBond(container.Atoms[14], container.Atoms[29], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[19], Single);
            container.AddBond(container.Atoms[15], container.Atoms[30], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[16], container.Atoms[20], Single);
            container.AddBond(container.Atoms[16], container.Atoms[31], Single);
            container.AddBond(container.Atoms[17], container.Atoms[21], Single);
            container.AddBond(container.Atoms[17], container.Atoms[32], Single);
            container.AddBond(container.Atoms[17], container.Atoms[33], Single);
            container.AddBond(container.Atoms[18], container.Atoms[34], Single);
            container.AddBond(container.Atoms[19], container.Atoms[35], Single);
            container.AddBond(container.Atoms[21], container.Atoms[36], Single);

            string[] expected = {"NC=O", "CGD", "N=C", "C=C", "C=C", "C=ON", "NC=O", "CONN", "NC=O", "NC=N", "O=CN", "CR",
                "O=CN", "CR", "CR", "CR", "CR", "CR", "OR", "OR", "OR", "OR", "HNCO", "HNCN", "HNCN", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HOR", "HOR", "HOR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JAWMAV
        /// </summary>
        // @cdk.inchi InChI=1S/C3H7NO/c5-3-1-4-2-3/h3-5H,1-2H2
        [TestMethod()]
        public void TestJAWMAV()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);

            string[] expected = { "OR", "NR", "CR4R", "CR4R", "HC", "HC", "HC", "HNR", "HOR", "CR4R", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JAWVEI
        /// </summary>
        // @cdk.inchi InChI=1S/C11H14O3/c1-6(2)3-4-7-5-8(12)10-11(14-10)9(7)13/h3,8-13H,1,5H2,2H3/t4-,8+,9-,10-,11+/m0/s1
        [TestMethod()]
        public void TestJAWVEI()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[14], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);
            container.AddBond(container.Atoms[13], container.Atoms[27], Single);

            string[] expected = {"OR", "OR", "OR", "C=C", "CR", "CR3R", "CR3R", "CR", "CR", "=C=", "C=C", "C=C", "C=C",
                "CR", "HOR", "HOR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JAWZEM
        /// </summary>
        // @cdk.inchi InChI=1S/C6H7N4O2P/c11-13(12,5-7-1-2-8-5)6-9-3-4-10-6/h1-4H,(H,7,8)(H,9,10)(H,11,12)/p-1
        [TestMethod()]
        public void TestJAWZEM()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Double);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Double);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);

            string[] expected = {"PO2", "O2P", "O2P", "NPYL", "N5B", "NPYL", "N5B", "C5A", "C5A", "C5B", "C5A", "C5B",
                "C5A", "HC", "HC", "HPYL", "HC", "HC", "HPYL"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JAZGOG
        /// </summary>
        // @cdk.inchi InChI=1S/C10H13NO5S/c1-8(2)6-3-4-9(8)5-17(13,14)11-10(9,16-11)7(12)15-6/h6H,3-5H2,1-2H3/t6-,9-,10-,11+/m0/s1
        [TestMethod()]
        public void TestJAZGOG()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[16], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Double);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[22], Single);
            container.AddBond(container.Atoms[14], container.Atoms[23], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);
            container.AddBond(container.Atoms[15], container.Atoms[25], Single);
            container.AddBond(container.Atoms[15], container.Atoms[26], Single);
            container.AddBond(container.Atoms[15], container.Atoms[27], Single);
            container.AddBond(container.Atoms[16], container.Atoms[28], Single);
            container.AddBond(container.Atoms[16], container.Atoms[29], Single);

            string[] expected = {"SO2N", "O2S", "O2S", "OR", "O=CO", "OC=O", "NSO2", "COO", "CR3R", "CR", "CR", "CR", "CR",
                "CR", "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JAZVIP10
        /// </summary>
        // @cdk.inchi InChI=1S/C8H13N5O6S2/c9-6(20)7-11-2-13(12-7)8-5(15)4(14)3(19-8)1-18-21(10,16)17/h2-5,8,14-15H,1H2,(H2,9,20)(H2,10,16,17)/t3-,4-,5-,8-/m1/s1
        [TestMethod()]
        public void TestJAZVIP10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[21], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[22], Single);
            container.AddBond(container.Atoms[7], container.Atoms[23], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[24], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[25], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[26], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[27], Single);
            container.AddBond(container.Atoms[12], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[28], Single);
            container.AddBond(container.Atoms[12], container.Atoms[29], Single);
            container.AddBond(container.Atoms[13], container.Atoms[30], Single);
            container.AddBond(container.Atoms[14], container.Atoms[31], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Double);
            container.AddBond(container.Atoms[17], container.Atoms[19], Double);
            container.AddBond(container.Atoms[17], container.Atoms[20], Single);
            container.AddBond(container.Atoms[20], container.Atoms[32], Single);
            container.AddBond(container.Atoms[20], container.Atoms[33], Single);

            string[] expected = {"NPYL", "N5A", "C5B", "N5B", "C5A", "C=SN", "S=C", "NC=S", "CR", "CR", "CR", "CR", "CR",
                "OR", "OR", "OR", "OSO2", "SO3", "O2S", "O2S", "NSO3", "HC", "HNCS", "HNCS", "HC", "HC", "HC", "HC",
                "HC", "HC", "HOR", "HOR", "HNSO", "HNSO"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JAZZOZ10
        /// </summary>
        // @cdk.inchi InChI=1S/C10H14N6O6S/c11-10-14-7-4(8(15-10)23(12,20)21)13-2-16(7)9-6(19)5(18)3(1-17)22-9/h2-3,5-6,9,17-19H,1H2,(H2,11,14,15)(H2,12,20,21)/t3-,5-,6-,9-/m1/s1
        [TestMethod()]
        public void TestJAZZOZ10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[23], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[25], Single);
            container.AddBond(container.Atoms[9], container.Atoms[24], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Double);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[13], container.Atoms[27], Single);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);
            container.AddBond(container.Atoms[14], container.Atoms[28], Single);
            container.AddBond(container.Atoms[14], container.Atoms[21], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[15], container.Atoms[29], Single);
            container.AddBond(container.Atoms[15], container.Atoms[19], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[16], container.Atoms[30], Single);
            container.AddBond(container.Atoms[16], container.Atoms[20], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[17], container.Atoms[31], Single);
            container.AddBond(container.Atoms[17], container.Atoms[21], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Single);
            container.AddBond(container.Atoms[18], container.Atoms[33], Single);
            container.AddBond(container.Atoms[18], container.Atoms[32], Single);
            container.AddBond(container.Atoms[18], container.Atoms[22], Single);
            container.AddBond(container.Atoms[19], container.Atoms[34], Single);
            container.AddBond(container.Atoms[20], container.Atoms[35], Single);
            container.AddBond(container.Atoms[22], container.Atoms[36], Single);

            string[] expected = {"NPYD", "CB", "NPYD", "C5A", "C5B", "CB", "N5B", "C5A", "NPYL", "NC=N", "SO2N", "O2S",
                "O2S", "NSO2", "CR", "CR", "CR", "CR", "CR", "OR", "OR", "OR", "OR", "HC", "HNCN", "HNCN", "HNSO",
                "HNSO", "HC", "HC", "HC", "HC", "HC", "HC", "HOR", "HOR", "HOR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JEBFEB01
        /// </summary>
        // @cdk.inchi InChI=1S/C12H11N2OP/c15-16(10-6-2-1-3-7-10)13-11-8-4-5-9-12(11)14-16/h1-9H,(H2,13,14,15)
        [TestMethod()]
        public void TestJEBFEB01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[20], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Double);
            container.AddBond(container.Atoms[20], container.Atoms[21], Single);
            container.AddBond(container.Atoms[20], container.Atoms[23], Single);
            container.AddBond(container.Atoms[21], container.Atoms[24], Double);
            container.AddBond(container.Atoms[22], container.Atoms[24], Single);
            container.AddBond(container.Atoms[22], container.Atoms[25], Single);
            container.AddBond(container.Atoms[24], container.Atoms[26], Single);

            string[] expected = {"PO", "OP", "NC=C", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "HNCC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "NC=C", "CB", "CB", "HNCC", "CB", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JECVES
        /// </summary>
        // @cdk.inchi InChI=1S/C9H14N4O3/c1-7-4-12(7)6-8(14)5-11-3-2-10-9(11)13(15)16/h2-3,7-8,14H,4-6H2,1H3/t7-,8-,12+/m0/s1
        [TestMethod()]
        public void TestJECVES()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Double);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[24], Single);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[26], Single);
            container.AddBond(container.Atoms[15], container.Atoms[27], Single);
            container.AddBond(container.Atoms[15], container.Atoms[28], Single);
            container.AddBond(container.Atoms[15], container.Atoms[29], Single);

            string[] expected = {"NPYL", "C5A", "N5B", "C5B", "C5A", "NO2", "O2N", "O2N", "CR", "CR", "OR", "CR", "NR",
                "CR3R", "CR3R", "CR", "HC", "HC", "HC", "HC", "HC", "HOR", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JECVUI
        /// </summary>
        // @cdk.inchi InChI=1S/C6H11N3O4/c1-4(10)9(5(11)7-2)13-6(12)8-3/h1-3H3,(H,7,11)(H,8,12)
        [TestMethod()]
        public void TestJECVUI()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[13], Single);
            container.AddBond(container.Atoms[0], container.Atoms[14], Single);
            container.AddBond(container.Atoms[0], container.Atoms[15], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);

            string[] expected = {"CR", "C=ON", "O=CN", "NC=O", "OC=O", "C=ON", "O=CN", "NC=O", "CR", "CONN", "O=CN",
                "NC=O", "CR", "HC", "HC", "HC", "HNCO", "HC", "HC", "HC", "HNCO", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JECYIZ
        /// </summary>
        // @cdk.inchi InChI=1S/C11H22N5OP/c1-4-11(13-14-12)18(17)15(2)9-7-5-6-8-10(9)16(18)3/h9-11H,4-8H2,1-3H3/t9-,10-,11-/m1/s1
        [TestMethod()]
        public void TestJECYIZ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[15], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[2], container.Atoms[14], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[24], Single);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[26], Single);
            container.AddBond(container.Atoms[11], container.Atoms[25], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[27], Single);
            container.AddBond(container.Atoms[13], container.Atoms[30], Single);
            container.AddBond(container.Atoms[13], container.Atoms[29], Single);
            container.AddBond(container.Atoms[13], container.Atoms[28], Single);
            container.AddBond(container.Atoms[14], container.Atoms[33], Single);
            container.AddBond(container.Atoms[14], container.Atoms[32], Single);
            container.AddBond(container.Atoms[14], container.Atoms[31], Single);
            container.AddBond(container.Atoms[15], container.Atoms[34], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[16], container.Atoms[36], Single);
            container.AddBond(container.Atoms[16], container.Atoms[35], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[17], container.Atoms[39], Single);
            container.AddBond(container.Atoms[17], container.Atoms[38], Single);
            container.AddBond(container.Atoms[17], container.Atoms[37], Single);

            string[] expected = {"PO", "OP", "NR", "NR", "N=N", "=N=", "NAZT", "CR", "CR", "CR", "CR", "CR", "CR", "CR",
                "CR", "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JEFRAN
        /// </summary>
        // @cdk.inchi InChI=1S/C10H18N6S2/c1-14(2)8(17)11-7-12-9(15(3)4)18-10(13-7)16(5)6/h1-6H3
        [TestMethod()]
        public void TestJEFRAN()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Double);
            container.AddBond(container.Atoms[2], container.Atoms[8], Double);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Double);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Double);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[12], container.Atoms[18], Single);
            container.AddBond(container.Atoms[12], container.Atoms[19], Single);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[21], Single);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[25], Single);
            container.AddBond(container.Atoms[14], container.Atoms[26], Single);
            container.AddBond(container.Atoms[15], container.Atoms[27], Single);
            container.AddBond(container.Atoms[15], container.Atoms[28], Single);
            container.AddBond(container.Atoms[15], container.Atoms[29], Single);
            container.AddBond(container.Atoms[16], container.Atoms[30], Single);
            container.AddBond(container.Atoms[16], container.Atoms[31], Single);
            container.AddBond(container.Atoms[16], container.Atoms[32], Single);
            container.AddBond(container.Atoms[17], container.Atoms[33], Single);
            container.AddBond(container.Atoms[17], container.Atoms[34], Single);
            container.AddBond(container.Atoms[17], container.Atoms[35], Single);

            string[] expected = {"S", "S=C", "N=C", "N=C", "N=C", "NC=S", "NC=N", "NC=N", "C=N", "C=N", "C=N", "C=SN",
                "CR", "CR", "CR", "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JEHCUU01
        /// </summary>
        // @cdk.inchi InChI=1S/C7H9N5O/c1-12-3-9-4-5(12)10-7(8)11-6(4)13-2/h3H,1-2H3,(H2,8,10,11)
        [TestMethod()]
        public void TestJEHCUU01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[15], Single);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[19], Single);
            container.AddBond(container.Atoms[12], container.Atoms[18], Single);

            string[] expected = {"NPYD", "CB", "NPYD", "C5A", "C5B", "CB", "N5B", "C5A", "NPYL", "NC=N", "OC=N", "CR",
                "CR", "HNCN", "HNCN", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JEHXOJ
        /// </summary>
        // @cdk.inchi InChI=1S/C6H8N2O2S/c7-8-11(9,10)6-4-2-1-3-5-6/h1-5,8H,7H2/p+1
        [TestMethod()]
        public void TestJEHXOJ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);

            string[] expected = {"SO2N", "O2S", "O2S", "NSO2", "NR+", "CB", "CB", "CB", "CB", "CB", "CB", "HNSO", "HNR+",
                "HNR+", "HNR+", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JELKUG
        /// </summary>
        // @cdk.inchi InChI=1S/C6H11Cl2O2P/c7-11(8,10)6(9)4-2-1-3-5-6/h9H,1-5H2
        [TestMethod()]
        public void TestJELKUG()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("P", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);

            string[] expected = {"CL", "CL", "PO", "OP", "OR", "CR", "CR", "CR", "CR", "CR", "CR", "HOR", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JELREX
        /// </summary>
        // @cdk.inchi InChI=1S/C12H7N3O2/c16-11-8-4-1-2-5-9(8)15(17)10(11)12-13-6-3-7-14-12/h1-7H
        [TestMethod()]
        public void TestJELREX()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[14], container.Atoms[21], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[15], container.Atoms[22], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Double);
            container.AddBond(container.Atoms[16], container.Atoms[23], Single);

            string[] expected = {"OXN", "N2OX", "C=N", "C=OR", "O=CR", "CB", "CB", "CB", "CB", "CB", "CB", "NPYD", "CB",
                "NPYD", "CB", "CB", "CB", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JELRIB
        /// </summary>
        // @cdk.inchi InChI=1S/C10H7NO4/c1-15-10(13)8-9(12)6-4-2-3-5-7(6)11(8)14/h2-5H,1H3
        [TestMethod()]
        public void TestJELRIB()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[21], Single);
            container.AddBond(container.Atoms[14], container.Atoms[20], Single);
            container.AddBond(container.Atoms[14], container.Atoms[19], Single);

            string[] expected = {"N2OX", "OXN", "C=N", "C=OR", "O=CR", "CB", "CB", "CB", "CB", "CB", "CB", "COO", "O=CO",
                "OC=O", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JEMHIS
        /// </summary>
        // @cdk.inchi InChI=1S/C2H6F2NO3P/c3-2(4,1-5)9(6,7)8/h1,5H2,(H2,6,7,8)
        [TestMethod()]
        public void TestJEMHIS()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);

            string[] expected = {"PO3", "OPO2", "O2P", "O2P", "F", "CR", "F", "NR+", "CR", "HOP", "HNR+", "HNR+", "HNR+",
                "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JEMWUT
        /// </summary>
        // @cdk.inchi InChI=1S/C8H4F10O2/c9-5(10,8(16,17)18)4-3(6(11,12)13)7(14,15)20-2-1-19-4/h1-2H2
        [TestMethod()]
        public void TestJEMWUT()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[21], Single);
            container.AddBond(container.Atoms[1], container.Atoms[20], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[23], Single);
            container.AddBond(container.Atoms[2], container.Atoms[22], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[15], Single);

            string[] expected = {"OR", "CR", "CR", "OC=C", "C=C", "C=C", "CR", "CR", "CR", "CR", "F", "F", "F", "F", "F",
                "F", "F", "F", "F", "F", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JESFES
        /// </summary>
        // @cdk.inchi InChI=1S/C4H16N4Si/c1-5-9(6-2,7-3)8-4/h5-8H,1-4H3
        [TestMethod()]
        public void TestJESFES()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Si", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[13], container.Atoms[19], Single);
            container.AddBond(container.Atoms[13], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[21], Single);
            container.AddBond(container.Atoms[15], container.Atoms[22], Single);
            container.AddBond(container.Atoms[15], container.Atoms[23], Single);
            container.AddBond(container.Atoms[15], container.Atoms[24], Single);

            string[] expected = {"SI", "NR", "HNR", "CR", "HC", "HC", "HC", "NR", "NR", "NR", "HNR", "CR", "HNR", "CR",
                "HNR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JETJUN
        /// </summary>
        // @cdk.inchi InChI=1S/C2H8O7P2/c1-2(3,10(4,5)6)11(7,8)9/h3H,1H3,(H2,4,5,6)(H2,7,8,9)/p-1
        [TestMethod()]
        public void TestJETJUN()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Double);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Double);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);

            string[] expected = {"PO3", "PO3", "CR", "CR", "OR", "OPO2", "OP", "OPO2", "O2P", "OPO2", "O2P", "HC", "HC",
                "HC", "HOP", "HOP", "HOP", "HOR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JEVXIR
        /// </summary>
        // @cdk.inchi InChI=1S/C9H13NO3/c1-9(2)3-7(11)6(5-10-13)8(12)4-9/h5,10,13H,3-4H2,1-2H3
        [TestMethod()]
        public void TestJEVXIR()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[19], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Double);
            container.AddBond(container.Atoms[2], container.Atoms[9], Double);
            container.AddBond(container.Atoms[3], container.Atoms[25], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Double);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[12], container.Atoms[18], Single);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);

            string[] expected = {"-O-", "O=CR", "O=CR", "NC=C", "C=C", "C=OR", "CR", "CR", "CR", "C=OR", "C=C", "CR", "CR",
                "HC", "HC", "HC", "HC", "HC", "HC", "HO", "HC", "HC", "HC", "HC", "HC", "HNCC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JEWFAS
        /// </summary>
        // @cdk.inchi InChI=1S/C12H18Cl2N3O2P/c13-4-7-17(8-5-14)20(18)16-12(3-9-19-20)11-2-1-6-15-10-11/h1-2,6,10,12H,3-5,7-9H2,(H,16,18)/t12-,20-/m1/s1
        [TestMethod()]
        public void TestJEWFAS()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Double);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[12], Single);
            container.AddBond(container.Atoms[2], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[20], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Double);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[9], container.Atoms[23], Single);
            container.AddBond(container.Atoms[10], container.Atoms[24], Single);
            container.AddBond(container.Atoms[10], container.Atoms[25], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[26], Single);
            container.AddBond(container.Atoms[11], container.Atoms[27], Single);
            container.AddBond(container.Atoms[12], container.Atoms[28], Single);
            container.AddBond(container.Atoms[12], container.Atoms[29], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[30], Single);
            container.AddBond(container.Atoms[13], container.Atoms[31], Single);
            container.AddBond(container.Atoms[14], container.Atoms[32], Single);
            container.AddBond(container.Atoms[14], container.Atoms[33], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[34], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Double);
            container.AddBond(container.Atoms[17], container.Atoms[18], Single);
            container.AddBond(container.Atoms[17], container.Atoms[35], Single);
            container.AddBond(container.Atoms[18], container.Atoms[19], Double);
            container.AddBond(container.Atoms[18], container.Atoms[36], Single);
            container.AddBond(container.Atoms[19], container.Atoms[37], Single);

            string[] expected = {"PO2", "CL", "CL", "OPO", "OP", "NR", "NR", "NPYD", "CR", "CR", "CR", "CR", "CR", "CR",
                "CR", "CB", "CB", "CB", "CB", "CB", "HNR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JEWPIK
        /// </summary>
        // @cdk.inchi InChI=1S/C8H4Cl2N2O2S/c9-5-3-1-15-2-4-6(10)8(14)12(7(5)13)11(3)4/h1-2H2
        [TestMethod()]
        public void TestJEWPIK()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Double);
            container.AddBond(container.Atoms[12], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[15], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[18], Single);
            container.AddBond(container.Atoms[13], container.Atoms[17], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);

            string[] expected = {"NC=O", "C=ON", "C=C", "C=C", "NC=C", "C=C", "C=C", "C=ON", "O=CN", "O=CN", "CL", "CL",
                "CR", "CR", "S", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JEXREJ
        /// </summary>
        // @cdk.inchi InChI=1S/C10H16N2O4S2/c1-11(2)9-5-7-10(8-6-9)12(17(3,13)14)18(4,15)16/h5-8H,1-4H3
        [TestMethod()]
        public void TestJEXREJ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[16], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Double);
            container.AddBond(container.Atoms[1], container.Atoms[5], Double);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Double);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[21], Single);
            container.AddBond(container.Atoms[14], container.Atoms[22], Single);
            container.AddBond(container.Atoms[14], container.Atoms[23], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);
            container.AddBond(container.Atoms[15], container.Atoms[25], Single);
            container.AddBond(container.Atoms[15], container.Atoms[26], Single);
            container.AddBond(container.Atoms[15], container.Atoms[27], Single);
            container.AddBond(container.Atoms[16], container.Atoms[28], Single);
            container.AddBond(container.Atoms[16], container.Atoms[29], Single);
            container.AddBond(container.Atoms[16], container.Atoms[30], Single);
            container.AddBond(container.Atoms[17], container.Atoms[31], Single);
            container.AddBond(container.Atoms[17], container.Atoms[32], Single);
            container.AddBond(container.Atoms[17], container.Atoms[33], Single);

            string[] expected = {"SO2N", "SO2N", "O2S", "O2S", "O2S", "O2S", "NC=C", "NSO2", "CB", "CB", "CB", "CB", "CB",
                "CB", "CR", "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JEYBUK
        /// </summary>
        // @cdk.inchi InChI=1S/C10H9NO3/c12-7-1-2-9-8(4-7)6(5-11-9)3-10(13)14/h1-2,4-5,11-12H,3H2,(H,13,14)
        [TestMethod()]
        public void TestJEYBUK()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[14], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[15], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[16], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);

            string[] expected = {"NPYL", "C5A", "C5B", "CB", "CB", "OC=C", "CB", "CB", "C5A", "C5B", "CR", "COO", "O=CO",
                "OC=O", "HPYL", "HC", "HC", "HOCC", "HC", "HC", "HC", "HC", "HOCO"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JIDHIN
        /// </summary>
        // @cdk.inchi InChI=1S/C11H15NO4S/c1-8-2-4-9(5-3-8)17(15,16)12-10(6-13)11(12)7-14/h2-5,10-11,13-14H,6-7H2,1H3/t10-,11+,12+
        [TestMethod()]
        public void TestJIDHIN()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[0], container.Atoms[13], Double);
            container.AddBond(container.Atoms[0], container.Atoms[14], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[17], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[18], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[7], container.Atoms[21], Single);
            container.AddBond(container.Atoms[7], container.Atoms[22], Single);
            container.AddBond(container.Atoms[7], container.Atoms[23], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[24], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);
            container.AddBond(container.Atoms[9], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[25], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[26], Single);
            container.AddBond(container.Atoms[10], container.Atoms[27], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[28], Single);
            container.AddBond(container.Atoms[11], container.Atoms[29], Single);
            container.AddBond(container.Atoms[15], container.Atoms[30], Single);
            container.AddBond(container.Atoms[16], container.Atoms[31], Single);

            string[] expected = {"SO2N", "CB", "CB", "CB", "CB", "CB", "CB", "CR", "CR3R", "CR3R", "CR", "CR", "NSO2",
                "O2S", "O2S", "OR", "OR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HOR", "HOR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JIFYUS
        /// </summary>
        // @cdk.inchi InChI=1S/C8H9N3O2S/c9-5-8-10-6-3-1-2-4-7(6)14(12,13)11-8/h1-4H,5,9H2,(H,10,11)/p+1
        [TestMethod()]
        public void TestJIFYUS()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[21], Double);
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[2], container.Atoms[20], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[23], Single);
            container.AddBond(container.Atoms[3], container.Atoms[19], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[18], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);

            string[] expected = {"SO2N", "O2S", "NCN+", "NR", "NCN+", "CNN+", "CB", "CB", "CB", "CB", "CB", "CB", "CR",
                "HC", "HC", "HC", "HC", "HC", "HNN+", "HNR", "HNN+", "O2S", "HC", "HNR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JIGCIL
        /// </summary>
        // @cdk.inchi InChI=1S/C5H5N3OS/c1-2-3-4(6)10-8-5(3)9-7-2/h6H2,1H3
        [TestMethod()]
        public void TestJIGCIL()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Double);
            container.AddBond(container.Atoms[3], container.Atoms[8], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);

            string[] expected = {"STHI", "OFUR", "N5A", "N5A", "NC=C", "C5A", "C5", "C5B", "C5B", "CR", "HNCC", "HNCC",
                "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JIGRAS
        /// </summary>
        // @cdk.inchi InChI=1S/C11H5Cl3O3/c1-5(4-12)2-3-6-7(13)10(16)11(17)8(14)9(6)15/h4,17H,1H3/b5-4+
        [TestMethod()]
        public void TestJIGRAS()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Double);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Triple);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[14], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[18], Single);
            container.AddBond(container.Atoms[16], container.Atoms[19], Single);
            container.AddBond(container.Atoms[16], container.Atoms[20], Single);
            container.AddBond(container.Atoms[16], container.Atoms[21], Single);

            string[] expected = {"CL", "CL", "CL", "O=CR", "OC=C", "O=CR", "C=C", "C=OR", "C=C", "C=C", "C=OR", "C=C",
                "CSP", "CSP", "C=C", "C=C", "CR", "HOCC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JIHVEB
        /// </summary>
        // @cdk.inchi InChI=1S/C2H4N2O3/c1-2(3-5)4(6)7/h5H,1H3/b3-2+
        [TestMethod()]
        public void TestJIHVEB()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);

            string[] expected = { "O2N", "NO2", "O2N", "C=N", "N=C", "CR", "-O-", "HC", "HC", "HC", "HO" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JIKHUG
        /// </summary>
        // @cdk.inchi InChI=1S/C9H11IN2O5/c10-4-2-12(9(16)11-8(4)15)7-1-5(13)6(14)3-17-7/h2,5-7,13-14H,1,3H2,(H,11,15,16)/t5-,6+,7+/m0/s1
        [TestMethod()]
        public void TestJIKHUG()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("I", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Single);
            container.AddBond(container.Atoms[13], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[25], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[26], Single);
            container.AddBond(container.Atoms[15], container.Atoms[27], Single);

            string[] expected = {"NC=O", "CONN", "O=CN", "NC=O", "C=ON", "O=CN", "C=C", "I", "C=C", "CR", "CR", "CR", "OR",
                "CR", "OR", "CR", "OR", "HNCO", "HC", "HC", "HC", "HC", "HC", "HOR", "HC", "HOR", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JILWUW
        /// </summary>
        // @cdk.inchi InChI=1S/C7H3N4O4/c12-10(13)4-1-2-6-5(3-4)7(9-8-6)11(14)15/h1-3H/q-1
        [TestMethod()]
        public void TestJILWUW()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", -1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[9], container.Atoms[11], Double);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Double);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);

            string[] expected = {"N5M", "N5M", "C5", "CB", "CB", "CB", "CB", "C5", "C5", "NO2", "O2N", "O2N", "NO2", "O2N",
                "O2N", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JINDAL
        /// </summary>
        // @cdk.inchi InChI=1S/C7H9NO3S/c1-12(10,11)8(9)7-5-3-2-4-6-7/h2-6,9H,1H3
        [TestMethod()]
        public void TestJINDAL()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);

            string[] expected = {"SO2N", "-O-", "O2S", "O2S", "NSO2", "CB", "CB", "CB", "CB", "CB", "CB", "CR", "HC", "HC",
                "HC", "HC", "HC", "HO", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JINDOZ
        /// </summary>
        // @cdk.inchi InChI=1S/C12H14N2O4S/c1-14(2)6-5-8-7-13-9-3-4-10(12(14)11(8)9)18-19(15,16)17/h3-4,7,13H,5-6H2,1-2H3
        [TestMethod()]
        public void TestJINDOZ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Double);
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Double);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[15], container.Atoms[24], Single);
            container.AddBond(container.Atoms[15], container.Atoms[23], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[16], container.Atoms[26], Single);
            container.AddBond(container.Atoms[16], container.Atoms[25], Single);
            container.AddBond(container.Atoms[17], container.Atoms[29], Single);
            container.AddBond(container.Atoms[17], container.Atoms[28], Single);
            container.AddBond(container.Atoms[17], container.Atoms[27], Single);
            container.AddBond(container.Atoms[18], container.Atoms[32], Single);
            container.AddBond(container.Atoms[18], container.Atoms[31], Single);
            container.AddBond(container.Atoms[18], container.Atoms[30], Single);

            string[] expected = {"SO4", "OSO3", "O3S", "O3S", "O3S", "NPYL", "NR+", "C5A", "C5B", "C5B", "CB", "CB", "CB",
                "CB", "C5A", "CR", "CR", "CR", "CR", "HPYL", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JIRJID
        /// </summary>
        // @cdk.inchi InChI=1S/C4H5NO2S/c1-8(6,7)4-2-3-5/h2,4H,1H3/b4-2+
        [TestMethod()]
        public void TestJIRJID()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Triple);

            string[] expected = { "SO2", "O2S", "O2S", "CR", "C=C", "C=C", "CSP", "NSP", "HC", "HC", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JISZAM
        /// </summary>
        // @cdk.inchi InChI=1S/C12H18NO2/c1-8-9-6-5-7-10(15-4)11(9)12(14)13(8,2)3/h5-8,12,14H,1-4H3/q+1/t8-,12-/m1/s1
        [TestMethod()]
        public void TestJISZAM()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[15], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[12], container.Atoms[26], Single);
            container.AddBond(container.Atoms[13], container.Atoms[27], Single);
            container.AddBond(container.Atoms[13], container.Atoms[28], Single);
            container.AddBond(container.Atoms[13], container.Atoms[29], Single);
            container.AddBond(container.Atoms[14], container.Atoms[30], Single);
            container.AddBond(container.Atoms[14], container.Atoms[31], Single);
            container.AddBond(container.Atoms[14], container.Atoms[32], Single);

            string[] expected = {"OC=C", "OR", "NR+", "CB", "CB", "CB", "CB", "CB", "CB", "CR", "CR", "CR", "CR", "CR",
                "CR", "HOR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JITMII
        /// </summary>
        // @cdk.inchi InChI=1S/C10H14F3NO3S/c1-9(10(11,12)13)8(7-18(15,16)17-9)14-5-3-2-4-6-14/h7H,2-6H2,1H3/t9-/m1/s1
        [TestMethod()]
        public void TestJITMII()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Double);
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[25], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[15], container.Atoms[27], Single);
            container.AddBond(container.Atoms[15], container.Atoms[26], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[16], container.Atoms[29], Single);
            container.AddBond(container.Atoms[16], container.Atoms[28], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[17], container.Atoms[31], Single);
            container.AddBond(container.Atoms[17], container.Atoms[30], Single);

            string[] expected = {"SO3", "OSO2", "CR", "C=C", "C=C", "O2S", "O2S", "CR", "F", "F", "F", "CR", "NC=C", "CR",
                "CR", "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JIWKOP
        /// </summary>
        // @cdk.inchi InChI=1S/C10H8N2O6/c13-5-1-3-11(17)7(9(5)15)8-10(16)6(14)2-4-12(8)18/h1-4,13-16H
        [TestMethod()]
        public void TestJIWKOP()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[8], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[12], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Double);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[17], Double);
            container.AddBond(container.Atoms[14], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[19], Single);
            container.AddBond(container.Atoms[15], container.Atoms[18], Single);
            container.AddBond(container.Atoms[17], container.Atoms[21], Single);
            container.AddBond(container.Atoms[17], container.Atoms[20], Single);
            container.AddBond(container.Atoms[18], container.Atoms[22], Single);
            container.AddBond(container.Atoms[19], container.Atoms[23], Single);
            container.AddBond(container.Atoms[19], container.Atoms[20], Double);
            container.AddBond(container.Atoms[20], container.Atoms[24], Single);
            container.AddBond(container.Atoms[23], container.Atoms[25], Single);

            string[] expected = {"NPOX", "OXN", "CB", "CB", "OC=C", "CB", "OC=C", "CB", "CB", "HOCC", "HOCC", "HC", "HC",
                "CB", "NPOX", "CB", "OXN", "CB", "OC=C", "CB", "CB", "HC", "HOCC", "OC=C", "HC", "HOCC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JIXBAT
        /// </summary>
        // @cdk.inchi InChI=1S/C11H11N3O2/c1-16-11(13)10(6-12)14-7-8-2-4-9(15)5-3-8/h2-5,7,15H,13H2,1H3/b11-10+,14-7+
        [TestMethod()]
        public void TestJIXBAT()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[8], Double);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Double);
            container.AddBond(container.Atoms[1], container.Atoms[16], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Triple);
            container.AddBond(container.Atoms[10], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[12], container.Atoms[26], Single);
            container.AddBond(container.Atoms[15], container.Atoms[24], Single);

            string[] expected = {"C=C", "C=N", "CB", "CB", "CB", "CB", "CB", "CB", "C=C", "CSP", "CR", "N=C", "NC=C",
                "NSP", "OC=C", "OC=C", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HOCC", "HNCC", "HNCC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JIYJAC
        /// </summary>
        // @cdk.inchi InChI=1S/C10H4F4O3/c1-16-10-8(14)7(13)6(12)5(11)3-2-4(15)17-9(3)10/h2H,1H3
        [TestMethod()]
        public void TestJIYJAC()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[15], Single);
            container.AddBond(container.Atoms[1], container.Atoms[15], Double);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[16], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[14], Double);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[20], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[16], container.Atoms[18], Single);
            container.AddBond(container.Atoms[16], container.Atoms[19], Single);

            string[] expected = {"OC=O", "O=CO", "OC=C", "F", "F", "F", "F", "C=C", "C=C", "C=C", "C=C", "C=C", "C=C",
                "C=C", "C=C", "COO", "CR", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JIYREO
        /// </summary>
        // @cdk.inchi InChI=1S/C5H7N3O2/c1-2-7-4-6-3-5(7)8(9)10/h3-4H,2H2,1H3/p+1
        [TestMethod()]
        public void TestJIYREO()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);

            string[] expected = {"NIM+", "CIM+", "NIM+", "C5", "C5", "CR", "CR", "NO2", "O2N", "O2N", "HC", "HIM+", "HC",
                "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JIYTOA
        /// </summary>
        // @cdk.inchi InChI=1S/C5H5NO/c7-5-3-1-2-4-6-5/h1-4H,(H,6,7)/p-1
        [TestMethod()]
        public void TestJIYTOA()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);

            string[] expected = { "NPYD", "CB", "OM2", "CB", "CB", "CB", "CB", "HC", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JIZWUK
        /// </summary>
        // @cdk.inchi InChI=1S/C8H18Cl6N2SSi2/c1-7(2,3)15(18(9,10)11)17-16(8(4,5)6)19(12,13)14/h1-6H3
        [TestMethod()]
        public void TestJIZWUK()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("Si", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("Si", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[16], Single);
            container.AddBond(container.Atoms[1], container.Atoms[16], Single);
            container.AddBond(container.Atoms[2], container.Atoms[16], Single);
            container.AddBond(container.Atoms[3], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[14], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[17], Single);
            container.AddBond(container.Atoms[15], container.Atoms[18], Single);
            container.AddBond(container.Atoms[19], container.Atoms[20], Single);
            container.AddBond(container.Atoms[19], container.Atoms[21], Single);
            container.AddBond(container.Atoms[20], container.Atoms[22], Single);
            container.AddBond(container.Atoms[20], container.Atoms[23], Single);
            container.AddBond(container.Atoms[20], container.Atoms[24], Single);
            container.AddBond(container.Atoms[21], container.Atoms[25], Single);
            container.AddBond(container.Atoms[21], container.Atoms[26], Single);
            container.AddBond(container.Atoms[21], container.Atoms[27], Single);
            container.AddBond(container.Atoms[25], container.Atoms[28], Single);
            container.AddBond(container.Atoms[25], container.Atoms[29], Single);
            container.AddBond(container.Atoms[25], container.Atoms[30], Single);
            container.AddBond(container.Atoms[26], container.Atoms[31], Single);
            container.AddBond(container.Atoms[26], container.Atoms[32], Single);
            container.AddBond(container.Atoms[26], container.Atoms[33], Single);
            container.AddBond(container.Atoms[27], container.Atoms[34], Single);
            container.AddBond(container.Atoms[27], container.Atoms[35], Single);
            container.AddBond(container.Atoms[27], container.Atoms[36], Single);

            string[] expected = {"HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "S", "NR", "SI", "CL", "CL", "CL",
                "CR", "CR", "CR", "CR", "NR", "SI", "CR", "CL", "CL", "CL", "CR", "CR", "CR", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for JOFDUD
        /// </summary>
        // @cdk.inchi InChI=1S/C4H8ClNOSi/c1-8(2,3-5)6-4-7/h3H2,1-2H3
        [TestMethod()]
        public void TestJOFDUD()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Si", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);

            string[] expected = {"SI", "CL", "CR", "CR", "CR", "N=C", "=C=", "O=C", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KAFXIY
        /// </summary>
        // @cdk.inchi InChI=1S/C10H12Cl2O/c1-8(6-2-3-6)9(4-5-9)7(13)10(8,11)12/h6H,2-5H2,1H3/t8-/m1/s1
        [TestMethod()]
        public void TestKAFXIY()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);

            string[] expected = {"CL", "CL", "O=CR", "CR3R", "CR3R", "CR3R", "C=OR", "CR4R", "CR4R", "CR3R", "CR3R",
                "CR3R", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KAGBOJ
        /// </summary>
        // @cdk.inchi InChI=1S/C17H14O4/c1-19-14-8-5-9-15(20-2)17(14)16-10-12(18)11-6-3-4-7-13(11)21-16/h3-10H,1-2H3
        [TestMethod()]
        public void TestKAGBOJ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[21], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Double);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[22], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[23], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[24], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[25], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[31], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[14], container.Atoms[30], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[15], container.Atoms[29], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Double);
            container.AddBond(container.Atoms[16], container.Atoms[19], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Single);
            container.AddBond(container.Atoms[18], container.Atoms[34], Single);
            container.AddBond(container.Atoms[18], container.Atoms[33], Single);
            container.AddBond(container.Atoms[18], container.Atoms[32], Single);
            container.AddBond(container.Atoms[19], container.Atoms[20], Single);
            container.AddBond(container.Atoms[20], container.Atoms[28], Single);
            container.AddBond(container.Atoms[20], container.Atoms[27], Single);
            container.AddBond(container.Atoms[20], container.Atoms[26], Single);

            string[] expected = {"OC=C", "C=C", "C=C", "C=OR", "CB", "CB", "CB", "CB", "CB", "CB", "O=CR", "CB", "CB",
                "CB", "CB", "CB", "CB", "OC=C", "CR", "OC=C", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KAKGOS
        /// </summary>
        // @cdk.inchi InChI=1S/C12H13NOS/c1-11(2)10(14)13-8-6-4-5-7-9(8)15-12(11,13)3/h4-7H,1-3H3/t12-/m1/s1
        [TestMethod()]
        public void TestKAKGOS()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);
            container.AddBond(container.Atoms[10], container.Atoms[14], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[19], Single);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[13], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[25], Single);
            container.AddBond(container.Atoms[14], container.Atoms[26], Single);
            container.AddBond(container.Atoms[14], container.Atoms[27], Single);

            string[] expected = {"S", "NC=O", "O=CN", "CB", "CB", "CB", "CB", "CB", "CB", "C=ON", "CR4R", "CR4R", "CR",
                "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KAMCUW
        /// </summary>
        // @cdk.inchi InChI=1S/C12H14Br2N2O5/c13-12(14)2-6(12)5-3-16(11(20)15-10(5)19)9-1-7(18)8(4-17)21-9/h3,6-9,17-18H,1-2,4H2,(H,15,19,20)/t6-,7-,8+,9+/m0/s1
        [TestMethod()]
        public void TestKAMCUW()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Br", 0));
            container.Atoms.Add(NewAtm("Br", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[21], Single);
            container.AddBond(container.Atoms[3], container.Atoms[22], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[23], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[26], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[24], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Single);
            container.AddBond(container.Atoms[13], container.Atoms[32], Single);
            container.AddBond(container.Atoms[13], container.Atoms[33], Single);
            container.AddBond(container.Atoms[14], container.Atoms[34], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[17], Single);
            container.AddBond(container.Atoms[15], container.Atoms[27], Single);
            container.AddBond(container.Atoms[16], container.Atoms[20], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Single);
            container.AddBond(container.Atoms[17], container.Atoms[19], Single);
            container.AddBond(container.Atoms[17], container.Atoms[28], Single);
            container.AddBond(container.Atoms[18], container.Atoms[29], Single);
            container.AddBond(container.Atoms[19], container.Atoms[20], Single);
            container.AddBond(container.Atoms[19], container.Atoms[30], Single);
            container.AddBond(container.Atoms[19], container.Atoms[31], Single);
            container.AddBond(container.Atoms[20], container.Atoms[25], Single);

            string[] expected = {"BR", "BR", "CR3R", "CR3R", "CR3R", "C=C", "C=C", "C=ON", "O=CN", "NC=O", "CONN", "O=CN",
                "NC=O", "CR", "OR", "CR", "OR", "CR", "OR", "CR", "CR", "HC", "HC", "HC", "HNCO", "HC", "HC", "HC",
                "HC", "HOR", "HC", "HC", "HC", "HC", "HOR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KAMJAJ
        /// </summary>
        // @cdk.inchi InChI=1S/C11H11ClN4O/c1-15(17)11(6-16-8-13-7-14-16)9-2-4-10(12)5-3-9/h2-5,7-8H,6H2,1H3/b15-11+
        [TestMethod()]
        public void TestKAMJAJ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[17], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[18], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[22], Single);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[23], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Double);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);
            container.AddBond(container.Atoms[10], container.Atoms[24], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Double);
            container.AddBond(container.Atoms[10], container.Atoms[14], Single);
            container.AddBond(container.Atoms[11], container.Atoms[27], Single);
            container.AddBond(container.Atoms[11], container.Atoms[26], Single);
            container.AddBond(container.Atoms[11], container.Atoms[25], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[16], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Single);

            string[] expected = {"CL", "CB", "CB", "CB", "CB", "CB", "CB", "C=N", "CR", "C5A", "C5B", "CR", "N2OX", "NPYL",
                "N5B", "N5A", "OXN", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KANWEB
        /// </summary>
        // @cdk.inchi InChI=1S/C12H2N6S/c13-3-7(4-14)9-1-2-10(8(5-15)6-16)12-11(9)17-19-18-12/h1-2H
        [TestMethod()]
        public void TestKANWEB()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Double);
            container.AddBond(container.Atoms[2], container.Atoms[8], Double);
            container.AddBond(container.Atoms[3], container.Atoms[15], Triple);
            container.AddBond(container.Atoms[4], container.Atoms[16], Triple);
            container.AddBond(container.Atoms[5], container.Atoms[17], Triple);
            container.AddBond(container.Atoms[6], container.Atoms[18], Triple);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Double);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[10], container.Atoms[14], Double);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Single);
            container.AddBond(container.Atoms[13], container.Atoms[17], Single);
            container.AddBond(container.Atoms[14], container.Atoms[16], Single);
            container.AddBond(container.Atoms[14], container.Atoms[18], Single);

            string[] expected = {"STHI", "N5A", "N5A", "NSP", "NSP", "NSP", "NSP", "C5B", "C5B", "C=C", "C=C", "C=C",
                "C=C", "C=C", "C=C", "CSP", "CSP", "CSP", "CSP", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KANZOO
        /// </summary>
        // @cdk.inchi InChI=1S/C14H14Cl3N5O4/c1-14(2)25-7-4(3-23)24-11(8(7)26-14)21-10-6-5(18-13(17)22-10)9(15)20-12(16)19-6/h4,7-8,11,23H,3H2,1-2H3,(H,18,21,22)/t4-,7-,8-,11-/m1/s1
        [TestMethod()]
        public void TestKANZOO()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[27], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[22], Single);
            container.AddBond(container.Atoms[15], container.Atoms[28], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[16], container.Atoms[23], Single);
            container.AddBond(container.Atoms[16], container.Atoms[29], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Single);
            container.AddBond(container.Atoms[17], container.Atoms[24], Single);
            container.AddBond(container.Atoms[17], container.Atoms[30], Single);
            container.AddBond(container.Atoms[18], container.Atoms[25], Single);
            container.AddBond(container.Atoms[18], container.Atoms[31], Single);
            container.AddBond(container.Atoms[18], container.Atoms[32], Single);
            container.AddBond(container.Atoms[19], container.Atoms[20], Single);
            container.AddBond(container.Atoms[19], container.Atoms[21], Single);
            container.AddBond(container.Atoms[19], container.Atoms[22], Single);
            container.AddBond(container.Atoms[19], container.Atoms[23], Single);
            container.AddBond(container.Atoms[20], container.Atoms[33], Single);
            container.AddBond(container.Atoms[20], container.Atoms[34], Single);
            container.AddBond(container.Atoms[20], container.Atoms[35], Single);
            container.AddBond(container.Atoms[21], container.Atoms[36], Single);
            container.AddBond(container.Atoms[21], container.Atoms[37], Single);
            container.AddBond(container.Atoms[21], container.Atoms[38], Single);
            container.AddBond(container.Atoms[25], container.Atoms[39], Single);

            string[] expected = {"CL", "CL", "CL", "NPYD", "CB", "NPYD", "CB", "NPYD", "CB", "NPYD", "CB", "CB", "CB",
                "NC=N", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "OR", "OR", "OR", "OR", "HNCN", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HOR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KAPCUZ
        /// </summary>
        // @cdk.inchi InChI=1S/C6H8N2S2/c1-7-3-4-8(2)5(7)6(9)10/h3-4H,1-2H3
        [TestMethod()]
        public void TestKAPCUZ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", -1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Double);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Double);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[15], Single);

            string[] expected = {"S2CM", "S2CM", "NIM+", "NIM+", "CS2M", "C5", "C5", "CIM+", "CR", "CR", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KARYAD
        /// </summary>
        // @cdk.inchi InChI=1S/C11H15NO2S/c1-10(2)8-3-7-4-9(8)11(5-7,6-12)15(10,13)14/h7-9H,3-5H2,1-2H3/t7-,8+,9-,11+/m1/s1
        [TestMethod()]
        public void TestKARYAD()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Triple);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[13], container.Atoms[24], Single);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);
            container.AddBond(container.Atoms[14], container.Atoms[27], Single);
            container.AddBond(container.Atoms[14], container.Atoms[28], Single);
            container.AddBond(container.Atoms[14], container.Atoms[29], Single);

            string[] expected = {"SO2", "O2S", "O2S", "NSP", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "CSP", "CR",
                "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KASBAH
        /// </summary>
        // @cdk.inchi InChI=1S/C8H7N3O2/c9-7-10(11(12)13)6-8-4-2-1-3-5-8/h1-5H,6H2
        [TestMethod()]
        public void TestKASBAH()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[12], Double);
            container.AddBond(container.Atoms[9], container.Atoms[10], Triple);

            string[] expected = {"CB", "CB", "CB", "CB", "CB", "CB", "CR", "NC%N", "NO2", "CSP", "NSP", "O2N", "O2N", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KASBOV
        /// </summary>
        // @cdk.inchi InChI=1S/C11H10O4/c1-14-9-5-3-8(4-6-11(12)13)7-10(9)15-2/h3,5,7H,1-2H3,(H,12,13)
        [TestMethod()]
        public void TestKASBOV()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[15], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Triple);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[12], Double);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);
            container.AddBond(container.Atoms[10], container.Atoms[24], Single);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[14], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);

            string[] expected = {"CB", "CB", "CB", "CB", "CB", "CB", "CSP", "CSP", "COO", "CR", "CR", "OC=O", "O=CO",
                "OC=C", "OC=C", "HC", "HC", "HC", "HOCO", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KATNAU
        /// </summary>
        // @cdk.inchi InChI=1S/C12H12N4O2S/c1-8-10-11(16(2)14-8)15-19(17,18)12(13-10)9-6-4-3-5-7-9/h3-7,14H,1-2H3
        [TestMethod()]
        public void TestKATNAU()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Double);
            container.AddBond(container.Atoms[4], container.Atoms[7], Double);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Double);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[18], Double);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[14], container.Atoms[26], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[27], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Double);
            container.AddBond(container.Atoms[16], container.Atoms[28], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Single);
            container.AddBond(container.Atoms[17], container.Atoms[29], Single);
            container.AddBond(container.Atoms[18], container.Atoms[30], Single);

            string[] expected = {"SO2N", "O2S", "O2S", "N=C", "N=C", "NC=C", "NC=N", "C=N", "C=C", "C=N", "C=C", "CR",
                "CR", "CB", "CB", "CB", "CB", "CB", "CB", "HNCC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KAVFUI
        /// </summary>
        // @cdk.inchi InChI=1S/C3H2N4O4/c8-6(9)3-1-5(2-4-3)7(10)11/h1-2H
        [TestMethod()]
        public void TestKAVFUI()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Double);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Double);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);

            string[] expected = { "NPYL", "NO2", "O2N", "O2N", "C5A", "HC", "N5B", "C5B", "NO2", "O2N", "O2N", "C5A", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KAVTEG
        /// </summary>
        // @cdk.inchi InChI=1S/C9H13NO5/c1-6(11)13-4-8-2-7-3-9(12)15-10(7)5-14-8/h7-8H,2-5H2,1H3/t7-,8+/m1/s1
        [TestMethod()]
        public void TestKAVTEG()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[15], Single);
            container.AddBond(container.Atoms[1], container.Atoms[16], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[18], Single);
            container.AddBond(container.Atoms[4], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[20], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[21], Single);
            container.AddBond(container.Atoms[6], container.Atoms[22], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[10], container.Atoms[24], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[25], Single);
            container.AddBond(container.Atoms[14], container.Atoms[26], Single);
            container.AddBond(container.Atoms[14], container.Atoms[27], Single);

            string[] expected = {"NR", "CR", "OR", "CR", "CR", "CR", "CR", "COO", "O=CO", "OC=O", "CR", "OC=O", "COO",
                "O=CO", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KECSIU
        /// </summary>
        // @cdk.inchi InChI=1S/C12H8F8S2/c1-5-2-6(4-7(21)11(17,18)9(13)14)22-8(3-5)12(19,20)10(15)16/h2-4,9-10H,1H3/b6-4-
        [TestMethod()]
        public void TestKECSIU()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[0], container.Atoms[14], Single);
            container.AddBond(container.Atoms[1], container.Atoms[17], Double);
            container.AddBond(container.Atoms[2], container.Atoms[18], Single);
            container.AddBond(container.Atoms[3], container.Atoms[18], Single);
            container.AddBond(container.Atoms[4], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Double);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[15], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[14], container.Atoms[20], Single);
            container.AddBond(container.Atoms[15], container.Atoms[24], Single);
            container.AddBond(container.Atoms[15], container.Atoms[25], Single);
            container.AddBond(container.Atoms[15], container.Atoms[26], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[16], container.Atoms[27], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Single);
            container.AddBond(container.Atoms[18], container.Atoms[19], Single);
            container.AddBond(container.Atoms[19], container.Atoms[28], Single);
            container.AddBond(container.Atoms[20], container.Atoms[21], Single);
            container.AddBond(container.Atoms[21], container.Atoms[29], Single);

            string[] expected = {"S", "S=C", "F", "F", "F", "F", "F", "F", "F", "F", "C=C", "C=C", "C=C", "C=C", "C=C",
                "CR", "C=C", "C=S", "CR", "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KECSUG
        /// </summary>
        // @cdk.inchi InChI=1S/C5Cl9N3/c6-2-15-1(3(7,8)9)16-17(2)5(13,14)4(10,11)12
        [TestMethod()]
        public void TestKECSUG()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);

            string[] expected = {"NPYL", "N5A", "C5B", "N5B", "C5A", "CR", "CR", "CR", "CL", "CL", "CL", "CL", "CL", "CL",
                "CL", "CL", "CL"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KEDYAT
        /// </summary>
        // @cdk.inchi InChI=1S/C10H10O2S2/c1-11-7-3-9(13-5-7)10-4-8(12-2)6-14-10/h3-6H,1-2H3
        [TestMethod()]
        public void TestKEDYAT()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Double);
            container.AddBond(container.Atoms[13], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[16], Single);
            container.AddBond(container.Atoms[14], container.Atoms[17], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Double);
            container.AddBond(container.Atoms[15], container.Atoms[18], Single);
            container.AddBond(container.Atoms[16], container.Atoms[19], Single);
            container.AddBond(container.Atoms[19], container.Atoms[20], Single);
            container.AddBond(container.Atoms[20], container.Atoms[21], Single);
            container.AddBond(container.Atoms[20], container.Atoms[22], Single);
            container.AddBond(container.Atoms[20], container.Atoms[23], Single);

            string[] expected = {"STHI", "C5A", "C5B", "C5B", "C5A", "OC=C", "CR", "HC", "HC", "HC", "HC", "HC", "C5A",
                "STHI", "C5B", "C5A", "C5B", "HC", "HC", "OC=C", "CR", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KEFJEK
        /// </summary>
        // @cdk.inchi InChI=1S/C11H9N3O2/c1-15-10-9(7-12)14-11(16-10)13-8-5-3-2-4-6-8/h2-6H,1H3,(H,13,14)
        [TestMethod()]
        public void TestKEFJEK()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[19], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Double);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Triple);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Double);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Double);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);
            container.AddBond(container.Atoms[13], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);

            string[] expected = {"OC=C", "OFUR", "NC=N", "N5B", "NSP", "CR", "C5A", "C5A", "CB", "CB", "CB", "CB", "CB",
                "CB", "C5B", "CSP", "HC", "HC", "HC", "HNCN", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KEJFOU
        /// </summary>
        // @cdk.inchi InChI=1S/C6H10NO4P/c1-6(2)4(5(7)8)3-12(9,10)11-6/h3H,1-2H3,(H2,7,8)(H,9,10)/p-1
        [TestMethod()]
        public void TestKEJFOU()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Double);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[15], Single);

            string[] expected = {"PO3", "O2P", "O2P", "OPO2", "O=CN", "NC=O", "C=C", "C=C", "CR", "C=ON", "CR", "CR", "HC",
                "HC", "HC", "HC", "HC", "HC", "HNCO", "HNCO", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KEMFAJ
        /// </summary>
        // @cdk.inchi InChI=1S/C10H11N4O2S2/c1-2-9-12-13-10(17-9)14-18(15,16)8-5-3-7(11)4-6-8/h3-6H,2,11H2,1H3/q-1
        [TestMethod()]
        public void TestKEMFAJ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", -1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[4], container.Atoms[8], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Double);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[23], Single);
            container.AddBond(container.Atoms[7], container.Atoms[22], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[19], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[20], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[15], container.Atoms[21], Single);
            container.AddBond(container.Atoms[16], container.Atoms[25], Single);
            container.AddBond(container.Atoms[16], container.Atoms[24], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[17], container.Atoms[28], Single);
            container.AddBond(container.Atoms[17], container.Atoms[27], Single);
            container.AddBond(container.Atoms[17], container.Atoms[26], Single);

            string[] expected = {"STHI", "SO2N", "O2S", "O2S", "N5B", "N5B", "NM", "NC=C", "C5A", "C5A", "CB", "CB", "CB",
                "CB", "CB", "CB", "CR", "CR", "HC", "HC", "HC", "HC", "HNCC", "HNCC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KENHOA
        /// </summary>
        // @cdk.inchi InChI=1S/C8H8ClNO3S/c9-14(11,12)10-8-7-5-2-1-4(13-8)3-6(5)7/h1-2,4-7H,3H2/b10-8-/t4-,5+,6-,7+/m0/s1
        [TestMethod()]
        public void TestKENHOA()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[2], container.Atoms[7], Double);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[12], container.Atoms[19], Single);
            container.AddBond(container.Atoms[13], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[21], Single);

            string[] expected = {"SO2N", "CL", "N=C", "O2S", "CR3R", "O2S", "CR3R", "C=N", "OC=N", "CR", "C=C", "C=C",
                "CR3R", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KEPKIZ
        /// </summary>
        // @cdk.inchi InChI=1S/C5H2N6O2/c12-11-3-1-2-4-6-8-9-10(4)5(3)7-13-11/h1-2H
        [TestMethod()]
        public void TestKEPKIZ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Double);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);

            string[] expected = {"C5B", "C5B", "C=C", "C=C", "C5A", "N5A", "N5AX", "NPYL", "N5A", "N5B", "N5B", "OFUR",
                "OXN", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KESNEB
        /// </summary>
        // @cdk.inchi InChI=1S/C11H13N3O5/c1-11(2,3)12(15)7-8-4-5-9(13(16)17)6-10(8)14(18)19/h4-7H,1-3H3/b12-7-
        [TestMethod()]
        public void TestKESNEB()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Double);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Double);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[14], Double);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[13], container.Atoms[21], Single);
            container.AddBond(container.Atoms[14], container.Atoms[22], Single);
            container.AddBond(container.Atoms[15], container.Atoms[18], Single);
            container.AddBond(container.Atoms[15], container.Atoms[17], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[16], container.Atoms[25], Single);
            container.AddBond(container.Atoms[16], container.Atoms[24], Single);
            container.AddBond(container.Atoms[16], container.Atoms[23], Single);
            container.AddBond(container.Atoms[17], container.Atoms[28], Single);
            container.AddBond(container.Atoms[17], container.Atoms[27], Single);
            container.AddBond(container.Atoms[17], container.Atoms[26], Single);
            container.AddBond(container.Atoms[18], container.Atoms[31], Single);
            container.AddBond(container.Atoms[18], container.Atoms[30], Single);
            container.AddBond(container.Atoms[18], container.Atoms[29], Single);

            string[] expected = {"O2N", "O2N", "O2N", "O2N", "OXN", "NO2", "NO2", "N2OX", "CB", "CB", "CB", "CB", "CB",
                "CB", "C=N", "CR", "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KEWJIF
        /// </summary>
        // @cdk.inchi InChI=1S/C2H2N6S/c3-1-2(5-8-4)7-9-6-1/h(H2,3,6)
        [TestMethod()]
        public void TestKEWJIF()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", -1));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);

            string[] expected = { "STHI", "N5A", "C5B", "C5B", "N5A", "NC=N", "N=N", "=N=", "NAZT", "HNCN", "HNCN" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KHDFRM11
        /// </summary>
        // @cdk.inchi InChI=1S/CH2O2/c2-1-3/h1H,(H,2,3)
        [TestMethod()]
        public void TestKHDFRM11()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);

            string[] expected = { "OC=O", "O=CO", "COO", "HC", "HOCO" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KIBDII
        /// </summary>
        // @cdk.inchi InChI=1S/C7H13N5O2S/c1-15-7(11-4-2-3-5-11)9-6(8)10-12(13)14/h2-5H2,1H3,(H2,8,10)/b9-7-
        [TestMethod()]
        public void TestKIBDII()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[23], Single);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[25], Single);
            container.AddBond(container.Atoms[10], container.Atoms[24], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[27], Single);
            container.AddBond(container.Atoms[11], container.Atoms[26], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Double);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);

            string[] expected = {"N=C", "C=N", "N=C", "C=N", "S", "CR", "NC=N", "NC=N", "CR", "CR", "CR", "CR", "NO2",
                "O2N", "O2N", "HC", "HC", "HC", "HNCN", "HNCN", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KIBFAC
        /// </summary>
        // @cdk.inchi InChI=1S/C10H9N3O/c1-8-7-10(12-13(14)11-8)9-5-3-2-4-6-9/h2-7H,1H3
        [TestMethod()]
        public void TestKIBFAC()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[13], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);

            string[] expected = {"NPYD", "NPOX", "NPYD", "CB", "CB", "CB", "CR", "CB", "CB", "CB", "CB", "CB", "CB", "OXN",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KICCUU
        /// </summary>
        // @cdk.inchi InChI=1S/C3H4F2NOP/c4-8(5)7-3-1-2-6/h1,3H2
        [TestMethod()]
        public void TestKICCUU()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Triple);

            string[] expected = { "P", "F", "F", "-OP", "CR", "HC", "HC", "CR", "HC", "HC", "CSP", "NSP" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KICGAE
        /// </summary>
        // @cdk.inchi InChI=1S/C10H6Cl6/c11-5-3-1-2-4(5)9(15)7(13)6(12)8(3,14)10(2,9)16/h2-5H,1H2/t2-,3+,4-,5-,8-,9+,10-/m0/s1
        [TestMethod()]
        public void TestKICGAE()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[16], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[17], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[18], Single);
            container.AddBond(container.Atoms[2], container.Atoms[19], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[20], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);

            string[] expected = {"CR4R", "CR4R", "CR", "CR", "CR", "C=C", "C=C", "CR4R", "CR4R", "CR", "CL", "CL", "CL",
                "CL", "CL", "CL", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KICLAJ
        /// </summary>
        // @cdk.inchi InChI=1S/C6H11O6P/c1-9-6-5-4(7)3(2-10-6)11-13(8)12-5/h3-7,13H,2H2,1H3/t3-,4-,5-,6-/m0/s1
        [TestMethod()]
        public void TestKICLAJ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[17], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);

            string[] expected = {"PO3", "OP", "OPO2", "OR", "OPO2", "OR", "OR", "CR", "CR", "CR", "CR", "CR", "CR", "HC",
                "HC", "HC", "HOR", "HP", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KIGKIU
        /// </summary>
        // @cdk.inchi InChI=1S/C6H5ClNPS/c7-9-8-5-3-1-2-4-6(5)10-9/h1-4,8H/t9-/m1/s1
        [TestMethod()]
        public void TestKIGKIU()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);

            string[] expected = { "S", "P", "CL", "NC=C", "CB", "CB", "CB", "CB", "CB", "CB", "HNCC", "HC", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KIKVUV
        /// </summary>
        // @cdk.inchi InChI=1S/C10F8N4O2/c11-1-5(2(12)8(16)19-7(1)15)21(23)22(24)6-3(13)9(17)20-10(18)4(6)14/b22-21+
        [TestMethod()]
        public void TestKIKVUV()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[16], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Double);
            container.AddBond(container.Atoms[15], container.Atoms[18], Single);
            container.AddBond(container.Atoms[15], container.Atoms[17], Single);
            container.AddBond(container.Atoms[16], container.Atoms[20], Single);
            container.AddBond(container.Atoms[16], container.Atoms[19], Double);
            container.AddBond(container.Atoms[17], container.Atoms[22], Single);
            container.AddBond(container.Atoms[17], container.Atoms[21], Double);
            container.AddBond(container.Atoms[19], container.Atoms[23], Single);
            container.AddBond(container.Atoms[19], container.Atoms[21], Single);

            string[] expected = {"CB", "CB", "CB", "NPYD", "CB", "CB", "N2OX", "OXN", "F", "F", "F", "F", "N2OX", "CB",
                "OXN", "CB", "CB", "CB", "F", "CB", "F", "NPYD", "F", "F"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KIMLEX01
        /// </summary>
        // @cdk.inchi InChI=1S/CF3O/c2-1(3,4)5/q-1
        [TestMethod()]
        public void TestKIMLEX01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);

            string[] expected = { "CR", "OM", "F", "F", "F" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KINKUN
        /// </summary>
        // @cdk.inchi InChI=1S/C11H16N2OS/c1-11(2,3)15-10(8-12)9-13-6-4-5-7-14-13/h4-5,9H,6-7H2,1-3H3/b10-9-
        [TestMethod()]
        public void TestKINKUN()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[15], Single);
            container.AddBond(container.Atoms[2], container.Atoms[16], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[20], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[21], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Triple);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[14], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);
            container.AddBond(container.Atoms[13], container.Atoms[27], Single);
            container.AddBond(container.Atoms[14], container.Atoms[28], Single);
            container.AddBond(container.Atoms[14], container.Atoms[29], Single);
            container.AddBond(container.Atoms[14], container.Atoms[30], Single);

            string[] expected = {"OR", "NC=C", "CR", "C=C", "C=C", "CR", "C=C", "C=C", "CSP", "NSP", "S", "CR", "CR", "CR",
                "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KINTUW
        /// </summary>
        // @cdk.inchi InChI=1S/C12H18N4/c1-13-7-4-10-16(11-5-8-14-2)12-6-9-15-3/h4-12H2/q+3
        [TestMethod()]
        public void TestKINTUW()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.AddBond(container.Atoms[0], container.Atoms[13], Single);
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Triple);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[12], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[15], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[19], Single);
            container.AddBond(container.Atoms[13], container.Atoms[18], Single);
            container.AddBond(container.Atoms[13], container.Atoms[17], Single);
            container.AddBond(container.Atoms[14], container.Atoms[22], Single);
            container.AddBond(container.Atoms[14], container.Atoms[21], Single);
            container.AddBond(container.Atoms[14], container.Atoms[20], Single);
            container.AddBond(container.Atoms[17], container.Atoms[25], Single);
            container.AddBond(container.Atoms[17], container.Atoms[24], Single);
            container.AddBond(container.Atoms[17], container.Atoms[23], Single);
            container.AddBond(container.Atoms[20], container.Atoms[28], Single);
            container.AddBond(container.Atoms[20], container.Atoms[27], Single);
            container.AddBond(container.Atoms[20], container.Atoms[26], Single);
            container.AddBond(container.Atoms[23], container.Atoms[31], Single);
            container.AddBond(container.Atoms[23], container.Atoms[30], Single);
            container.AddBond(container.Atoms[23], container.Atoms[29], Single);
            container.AddBond(container.Atoms[26], container.Atoms[32], Triple);
            container.AddBond(container.Atoms[29], container.Atoms[33], Triple);

            string[] expected = {"NR", "NR%", "CR", "CR", "CR", "C%", "HC", "HC", "HC", "HC", "HC", "HC", "CR", "CR", "CR",
                "HC", "HC", "CR", "HC", "HC", "CR", "HC", "HC", "CR", "HC", "HC", "NR%", "HC", "HC", "NR%", "HC", "HC",
                "C%", "C%"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KINWEJ
        /// </summary>
        // @cdk.inchi InChI=1S/C17H18N2O2/c1-2-21-17-15-11-7-10(14(15)16(20)18-19-17)12-8-5-3-4-6-9(8)13(11)12/h3-6,10-15H,2,7H2,1H3,(H,18,20)/t10-,11+,12-,13+,14+,15-/m0/s1
        [TestMethod()]
        public void TestKINWEJ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[21], Single);
            container.AddBond(container.Atoms[0], container.Atoms[17], Single);
            container.AddBond(container.Atoms[0], container.Atoms[16], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[22], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[23], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[24], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[25], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[26], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[27], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[28], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[29], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[13], container.Atoms[30], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[15], container.Atoms[18], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[16], container.Atoms[31], Single);
            container.AddBond(container.Atoms[17], container.Atoms[33], Single);
            container.AddBond(container.Atoms[17], container.Atoms[32], Single);
            container.AddBond(container.Atoms[18], container.Atoms[19], Single);
            container.AddBond(container.Atoms[19], container.Atoms[35], Single);
            container.AddBond(container.Atoms[19], container.Atoms[34], Single);
            container.AddBond(container.Atoms[19], container.Atoms[20], Single);
            container.AddBond(container.Atoms[20], container.Atoms[38], Single);
            container.AddBond(container.Atoms[20], container.Atoms[37], Single);
            container.AddBond(container.Atoms[20], container.Atoms[36], Single);

            string[] expected = {"CR", "CR4R", "CB", "CB", "CB", "CB", "CB", "CB", "CR4R", "CR", "CR", "C=ON", "O=CN",
                "NC=O", "N=C", "C=N", "CR", "CR", "OC=N", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HNCO", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KINWIN
        /// </summary>
        // @cdk.inchi InChI=1S/C5H8FNO4/c6-2(4(8)9)1-3(7)5(10)11/h2-3H,1,7H2,(H,8,9)(H,10,11)/t2-,3+/m0/s1
        [TestMethod()]
        public void TestKINWIN()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);

            string[] expected = {"COO", "O=CO", "OC=O", "CR", "NR+", "CR", "CR", "F", "CO2M", "O2CM", "O2CM", "HOCO", "HC",
                "HNR+", "HNR+", "HNR+", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KIRCAP
        /// </summary>
        // @cdk.inchi InChI=1S/C11H7N5O12/c1-26-10(17)9-8-5-2-4(12(18)19)3-6(13(20)21)7(5)11(14(22)23,15(24)25)16(27-8)28-9/h2-3,8-9H,1H3/t8-,9-/m0/s1
        [TestMethod()]
        public void TestKIRCAP()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[12], Double);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Double);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Double);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Double);
            container.AddBond(container.Atoms[8], container.Atoms[26], Double);
            container.AddBond(container.Atoms[9], container.Atoms[26], Single);
            container.AddBond(container.Atoms[9], container.Atoms[27], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[24], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[25], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[13], container.Atoms[19], Single);
            container.AddBond(container.Atoms[14], container.Atoms[17], Single);
            container.AddBond(container.Atoms[15], container.Atoms[17], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Single);
            container.AddBond(container.Atoms[18], container.Atoms[19], Single);
            container.AddBond(container.Atoms[18], container.Atoms[23], Double);
            container.AddBond(container.Atoms[19], container.Atoms[20], Double);
            container.AddBond(container.Atoms[20], container.Atoms[21], Single);
            container.AddBond(container.Atoms[20], container.Atoms[28], Single);
            container.AddBond(container.Atoms[21], container.Atoms[22], Double);
            container.AddBond(container.Atoms[22], container.Atoms[23], Single);
            container.AddBond(container.Atoms[22], container.Atoms[29], Single);
            container.AddBond(container.Atoms[23], container.Atoms[24], Single);
            container.AddBond(container.Atoms[24], container.Atoms[25], Single);
            container.AddBond(container.Atoms[24], container.Atoms[30], Single);
            container.AddBond(container.Atoms[25], container.Atoms[26], Single);
            container.AddBond(container.Atoms[25], container.Atoms[31], Single);
            container.AddBond(container.Atoms[27], container.Atoms[32], Single);
            container.AddBond(container.Atoms[27], container.Atoms[33], Single);
            container.AddBond(container.Atoms[27], container.Atoms[34], Single);

            string[] expected = {"O2N", "O2N", "O2N", "O2N", "O2N", "O2N", "O2N", "O2N", "O=CO", "OC=O", "OR", "OR", "NO2",
                "NO2", "NO2", "NO2", "NR", "CR", "CB", "CB", "CB", "CB", "CB", "CB", "CR", "CR", "COO", "CR", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KIRCOD
        /// </summary>
        // @cdk.inchi InChI=1S/C6H9ClN2O3/c1-8-4(10)6(3-9(6)7)5(11)12-2/h3H2,1-2H3,(H,8,10)/t6-,9-/m1/s1
        [TestMethod()]
        public void TestKIRCOD()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);

            string[] expected = {"CL", "NR", "CR3R", "CR3R", "COO", "O=CO", "OC=O", "CR", "C=ON", "O=CN", "NC=O", "CR",
                "HC", "HC", "HC", "HC", "HC", "HNCO", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KITREK
        /// </summary>
        // @cdk.inchi InChI=1S/C8H12N5O4P/c9-7-6-8(11-3-10-7)13(4-12-6)1-2-17-5-18(14,15)16/h3-4H,1-2,5H2,(H2,9,10,11)(H2,14,15,16)
        [TestMethod()]
        public void TestKITREK()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[18], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[19], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[21], Single);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[22], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[24], Single);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[26], Single);
            container.AddBond(container.Atoms[11], container.Atoms[25], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[28], Single);
            container.AddBond(container.Atoms[13], container.Atoms[27], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[17], Single);
            container.AddBond(container.Atoms[14], container.Atoms[16], Double);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[17], container.Atoms[29], Single);

            string[] expected = {"NPD+", "CB", "NPYD", "C5A", "C5B", "CB", "NC=N", "N5B", "C5A", "NPYL", "CR", "CR", "OR",
                "CR", "PO3", "O2P", "O2P", "OPO2", "HPD+", "HC", "HNCN", "HNCN", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HOP"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KIYGAA
        /// </summary>
        // @cdk.inchi InChI=1S/C5H4F6N2S3/c6-4(7,8)3(5(9,10)11)16-15-2(13)1(12)14/h3,13H,(H2,12,14)/b13-2-
        [TestMethod()]
        public void TestKIYGAA()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[16], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Double);
            container.AddBond(container.Atoms[14], container.Atoms[18], Single);
            container.AddBond(container.Atoms[14], container.Atoms[19], Single);

            string[] expected = {"CR", "CR", "F", "F", "F", "CR", "F", "F", "F", "S", "S", "C=N", "N=C", "C=SN", "NC=S",
                "S=C", "HC", "HN=C", "HNCS", "HNCS"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KOBXOO
        /// </summary>
        // @cdk.inchi InChI=1S/C3H4N4O3/c4-2-1(7(9)10)3(8)6-5-2/h(H4,4,5,6,8)
        [TestMethod()]
        public void TestKOBXOO()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[9], Double);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Double);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);

            string[] expected = {"O=CN", "O2N", "O2N", "NC=O", "NC=C", "NC=C", "NO2", "C=C", "C=C", "C=ON", "HNCO", "HNCC",
                "HNCC", "HNCC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KOBYOP
        /// </summary>
        // @cdk.inchi InChI=1S/C4H4N6/c1-5-4(9-6-1)10-2-7-8-3-10/h1-3H,(H,5,6,9)
        [TestMethod()]
        public void TestKOBYOP()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);

            string[] expected = {"NPYL", "N5A", "C5B", "N5B", "C5A", "N5B", "N5B", "C5A", "NPYL", "C5A", "HPYL", "HC",
                "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KOBZEG
        /// </summary>
        // @cdk.inchi InChI=1S/C19H9Cl2N7O2/c20-13-14(21)17(30)15(10(9-22)16(13)29)27-28-18(11-5-1-3-7-23-11)25-26-19(28)12-6-2-4-8-24-12/h1-8,27H
        [TestMethod()]
        public void TestKOBZEG()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);
            container.AddBond(container.Atoms[10], container.Atoms[38], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Triple);
            container.AddBond(container.Atoms[13], container.Atoms[16], Single);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[16], Double);
            container.AddBond(container.Atoms[15], container.Atoms[23], Double);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Double);
            container.AddBond(container.Atoms[17], container.Atoms[22], Single);
            container.AddBond(container.Atoms[18], container.Atoms[19], Single);
            container.AddBond(container.Atoms[19], container.Atoms[20], Double);
            container.AddBond(container.Atoms[19], container.Atoms[30], Single);
            container.AddBond(container.Atoms[20], container.Atoms[21], Single);
            container.AddBond(container.Atoms[20], container.Atoms[31], Single);
            container.AddBond(container.Atoms[21], container.Atoms[22], Double);
            container.AddBond(container.Atoms[21], container.Atoms[32], Single);
            container.AddBond(container.Atoms[22], container.Atoms[33], Single);
            container.AddBond(container.Atoms[23], container.Atoms[24], Single);
            container.AddBond(container.Atoms[24], container.Atoms[25], Double);
            container.AddBond(container.Atoms[24], container.Atoms[29], Single);
            container.AddBond(container.Atoms[25], container.Atoms[26], Single);
            container.AddBond(container.Atoms[26], container.Atoms[27], Double);
            container.AddBond(container.Atoms[26], container.Atoms[34], Single);
            container.AddBond(container.Atoms[27], container.Atoms[28], Single);
            container.AddBond(container.Atoms[27], container.Atoms[35], Single);
            container.AddBond(container.Atoms[28], container.Atoms[29], Double);
            container.AddBond(container.Atoms[28], container.Atoms[36], Single);
            container.AddBond(container.Atoms[29], container.Atoms[37], Single);

            string[] expected = {"CL", "CL", "C=C", "C=C", "C=OR", "O=CR", "C=C", "C=C", "C=OR", "O=CR", "NC=C", "CSP",
                "NSP", "NPYL", "N5B", "N5B", "C5A", "CB", "NPYD", "CB", "CB", "CB", "CB", "C5A", "CB", "NPYD", "CB",
                "CB", "CB", "CB", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HNCC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KOCWUU
        /// </summary>
        // @cdk.inchi InChI=1S/C10H6N2OS/c11-6-8-3-5-14-10(8)12-4-1-2-9(12)7-13/h1-5,7H
        [TestMethod()]
        public void TestKOCWUU()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Triple);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[13], container.Atoms[16], Single);

            string[] expected = {"STHI", "C5A", "C5B", "C5B", "C5A", "NPYL", "C5A", "C5B", "C5B", "C5A", "CSP", "NSP",
                "O=CR", "C=OR", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KODFUE
        /// </summary>
        // @cdk.inchi InChI=1S/C10H18INO/c1-4-9(11)10(13)12-7(2)5-6-8(12)3/h7-9H,4-6H2,1-3H3/t7-,8-,9+/m0/s1
        [TestMethod()]
        public void TestKODFUE()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("I", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[14], Single);
            container.AddBond(container.Atoms[2], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[16], Single);
            container.AddBond(container.Atoms[3], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[20], Single);
            container.AddBond(container.Atoms[5], container.Atoms[21], Single);
            container.AddBond(container.Atoms[6], container.Atoms[22], Single);
            container.AddBond(container.Atoms[6], container.Atoms[23], Single);
            container.AddBond(container.Atoms[6], container.Atoms[24], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[25], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[26], Single);
            container.AddBond(container.Atoms[10], container.Atoms[27], Single);
            container.AddBond(container.Atoms[11], container.Atoms[28], Single);
            container.AddBond(container.Atoms[11], container.Atoms[29], Single);
            container.AddBond(container.Atoms[11], container.Atoms[30], Single);

            string[] expected = {"NC=O", "CR", "CR", "CR", "CR", "CR", "CR", "C=ON", "O=CN", "CR", "CR", "CR", "I", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KOFKIZ
        /// </summary>
        // @cdk.inchi InChI=1S/C4H8N6O5/c11-5-6-3-7(9(12)13)1-2-8(4-6)10(14)15/h1-4H2
        [TestMethod()]
        public void TestKOFKIZ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[16], Single);
            container.AddBond(container.Atoms[0], container.Atoms[15], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[18], Single);
            container.AddBond(container.Atoms[1], container.Atoms[17], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[20], Single);
            container.AddBond(container.Atoms[2], container.Atoms[19], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[22], Single);
            container.AddBond(container.Atoms[3], container.Atoms[21], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[12], container.Atoms[14], Double);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);

            string[] expected = {"CR", "CR", "CR", "CR", "NR", "NR", "NR", "NO2", "O2N", "O2N", "N=O", "O=N", "NO2", "O2N",
                "O2N", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KOFMEX
        /// </summary>
        // @cdk.inchi InChI=1S/C12H12N2O3/c1-2-16-12(15)14-11-13-8-10(17-11)9-6-4-3-5-7-9/h3-8H,2H2,1H3,(H,13,14,15)
        [TestMethod()]
        public void TestKOFMEX()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Double);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);
            container.AddBond(container.Atoms[14], container.Atoms[16], Double);
            container.AddBond(container.Atoms[14], container.Atoms[26], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[27], Single);
            container.AddBond(container.Atoms[16], container.Atoms[28], Single);

            string[] expected = {"OFUR", "C5A", "N5B", "C5B", "C5A", "NC=O", "C=ON", "O=CN", "OC=O", "CR", "CR", "CB",
                "CB", "CB", "CB", "CB", "CB", "HC", "HNCO", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KOFNIC
        /// </summary>
        // @cdk.inchi InChI=1S/C10H12N4O5S/c1-10(5-13-3-2-11-12-13)8(9(16)17)14-6(15)4-7(14)20(10,18)19/h2-3,7-8H,4-5H2,1H3,(H,16,17)/t7-,8+,10+/m1/s1
        [TestMethod()]
        public void TestKOFNIC()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[27], Double);
            container.AddBond(container.Atoms[0], container.Atoms[26], Double);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[15], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[22], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[4], container.Atoms[22], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[9], container.Atoms[28], Double);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[30], Single);
            container.AddBond(container.Atoms[10], container.Atoms[29], Double);
            container.AddBond(container.Atoms[11], container.Atoms[14], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[15], container.Atoms[23], Single);
            container.AddBond(container.Atoms[15], container.Atoms[17], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[18], container.Atoms[25], Single);
            container.AddBond(container.Atoms[18], container.Atoms[20], Double);
            container.AddBond(container.Atoms[18], container.Atoms[19], Single);
            container.AddBond(container.Atoms[20], container.Atoms[23], Single);
            container.AddBond(container.Atoms[20], container.Atoms[21], Single);
            container.AddBond(container.Atoms[23], container.Atoms[24], Single);
            container.AddBond(container.Atoms[24], container.Atoms[25], Double);
            container.AddBond(container.Atoms[30], container.Atoms[31], Single);

            string[] expected = {"SO2", "CR", "CR", "HC", "CR4R", "HC", "CR4R", "HC", "HC", "C=ON", "COO", "CR", "HC",
                "HC", "HC", "CR", "HC", "HC", "C5B", "HC", "C5A", "HC", "NC=O", "NPYL", "N5A", "N5B", "O2S", "O2S",
                "O=CN", "O=CO", "OC=O", "HOCO"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KOHVEI
        /// </summary>
        // @cdk.inchi InChI=1S/C10H10O3S/c1-3-8-13-14(11,12)10-6-4-9(2)5-7-10/h4-7H,1-2H3
        [TestMethod()]
        public void TestKOHVEI()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Triple);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[21], Single);
            container.AddBond(container.Atoms[7], container.Atoms[22], Single);
            container.AddBond(container.Atoms[7], container.Atoms[23], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[19], Single);
            container.AddBond(container.Atoms[13], container.Atoms[20], Single);

            string[] expected = {"SO3", "OSO2", "O2S", "O2S", "CR", "CSP", "CSP", "CR", "CB", "CB", "CB", "CB", "CB", "CB",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KOHVIM
        /// </summary>
        // @cdk.inchi InChI=1S/C9H6O2/c1-2-11-9(10)8-6-4-3-5-7-8/h1,3-7H
        [TestMethod()]
        public void TestKOHVIM()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Triple);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);

            string[] expected = {"OC=O", "O=CO", "CSP", "CSP", "COO", "CB", "CB", "CB", "CB", "CB", "CB", "HC", "HC", "HC",
                "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KOJGOF
        /// </summary>
        // @cdk.inchi InChI=1S/C11H14N4S/c1-7-5-9(3)14(12-7)11(16)15-10(4)6-8(2)13-15/h5-6H,1-4H3
        [TestMethod()]
        public void TestKOJGOF()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[16], container.Atoms[18], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[17], container.Atoms[19], Double);
            container.AddBond(container.Atoms[18], container.Atoms[21], Single);
            container.AddBond(container.Atoms[18], container.Atoms[20], Double);
            container.AddBond(container.Atoms[19], container.Atoms[22], Single);
            container.AddBond(container.Atoms[19], container.Atoms[20], Single);
            container.AddBond(container.Atoms[20], container.Atoms[23], Single);
            container.AddBond(container.Atoms[21], container.Atoms[26], Single);
            container.AddBond(container.Atoms[21], container.Atoms[25], Single);
            container.AddBond(container.Atoms[21], container.Atoms[24], Single);
            container.AddBond(container.Atoms[22], container.Atoms[29], Single);
            container.AddBond(container.Atoms[22], container.Atoms[28], Single);
            container.AddBond(container.Atoms[22], container.Atoms[27], Single);

            string[] expected = {"S=C", "NPYL", "N5A", "C=SN", "C5B", "C5B", "C5A", "CR", "CR", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "NPYL", "N5A", "C5A", "C5B", "C5B", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KOJKID
        /// </summary>
        // @cdk.inchi InChI=1S/C10H14N2/c1-11-7-3-5-9-12(2)10-6-4-8-11/h7-10H2,1-2H3
        [TestMethod()]
        public void TestKOJKID()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Triple);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Single);
            container.AddBond(container.Atoms[13], container.Atoms[16], Single);
            container.AddBond(container.Atoms[13], container.Atoms[17], Single);
            container.AddBond(container.Atoms[14], container.Atoms[18], Triple);
            container.AddBond(container.Atoms[15], container.Atoms[19], Single);
            container.AddBond(container.Atoms[15], container.Atoms[20], Single);
            container.AddBond(container.Atoms[18], container.Atoms[19], Single);
            container.AddBond(container.Atoms[19], container.Atoms[21], Single);
            container.AddBond(container.Atoms[19], container.Atoms[22], Single);
            container.AddBond(container.Atoms[20], container.Atoms[23], Single);
            container.AddBond(container.Atoms[20], container.Atoms[24], Single);
            container.AddBond(container.Atoms[20], container.Atoms[25], Single);

            string[] expected = {"NR", "CR", "CSP", "CSP", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "CR",
                "CSP", "NR", "HC", "HC", "CSP", "CR", "CR", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KOJZOY
        /// </summary>
        // @cdk.inchi InChI=1S/C6H8N4O3/c1-9-4(7)3(8-13)5(11)10(2)6(9)12/h7H2,1-2H3
        [TestMethod()]
        public void TestKOJZOY()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[19], Single);
            container.AddBond(container.Atoms[1], container.Atoms[14], Single);
            container.AddBond(container.Atoms[1], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[20], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[8], container.Atoms[11], Double);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[18], Single);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);

            string[] expected = {"NC=O", "CR", "CONN", "O=CN", "NC=O", "CR", "C=ON", "O=CN", "C=C", "N=O", "O=N", "C=C",
                "NC=C", "HC", "HC", "HC", "HC", "HNCC", "HNCC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KOKMIG
        /// </summary>
        // @cdk.inchi InChI=1S/C8H15N4O2P/c1-5-14-15(13)8(2,3)12(4)7(11-15)10-6-9/h5H2,1-4H3,(H,10,11,13)/t15-/m1/s1
        [TestMethod()]
        public void TestKOKMIG()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Double);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Triple);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[10], container.Atoms[24], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);
            container.AddBond(container.Atoms[14], container.Atoms[27], Single);
            container.AddBond(container.Atoms[14], container.Atoms[28], Single);
            container.AddBond(container.Atoms[14], container.Atoms[29], Single);

            string[] expected = {"PO2", "OP", "OPO", "NC=N", "N=C", "NSP", "NC=N", "CR", "CR", "CR", "CR", "CGD", "CSP",
                "CR", "CR", "HNCN", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KOLCUJ
        /// </summary>
        // @cdk.inchi InChI=1S/C10H5Cl9N2S3/c11-8(12,13)22-20-7(6-4-2-1-3-5-6)21(23-9(14,15)16)24-10(17,18)19/h1-5H/b20-7-
        [TestMethod()]
        public void TestKOLCUJ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[0], container.Atoms[15], Single);
            container.AddBond(container.Atoms[1], container.Atoms[13], Single);
            container.AddBond(container.Atoms[1], container.Atoms[16], Single);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[17], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Double);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[18], Single);
            container.AddBond(container.Atoms[18], container.Atoms[19], Double);
            container.AddBond(container.Atoms[18], container.Atoms[23], Single);
            container.AddBond(container.Atoms[19], container.Atoms[20], Single);
            container.AddBond(container.Atoms[19], container.Atoms[24], Single);
            container.AddBond(container.Atoms[20], container.Atoms[21], Double);
            container.AddBond(container.Atoms[20], container.Atoms[25], Single);
            container.AddBond(container.Atoms[21], container.Atoms[22], Single);
            container.AddBond(container.Atoms[21], container.Atoms[26], Single);
            container.AddBond(container.Atoms[22], container.Atoms[23], Double);
            container.AddBond(container.Atoms[22], container.Atoms[27], Single);
            container.AddBond(container.Atoms[23], container.Atoms[28], Single);

            string[] expected = {"S", "S", "S", "CL", "CL", "CL", "CL", "CL", "CL", "CL", "CL", "CL", "N=C", "NC=N", "C=N",
                "CR", "CR", "CR", "CB", "CB", "CB", "CB", "CB", "CB", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for MAPMIP03
        /// </summary>
        // @cdk.inchi InChI=1S/C9H17N2/c1-10(2)8-6-5-7-9-11(3)4/h5-9H,1-4H3/q+1
        [TestMethod()]
        public void TestMAPMIP03()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Double);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[24], Single);
            container.AddBond(container.Atoms[9], container.Atoms[23], Single);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[27], Single);
            container.AddBond(container.Atoms[10], container.Atoms[26], Single);
            container.AddBond(container.Atoms[10], container.Atoms[25], Single);

            string[] expected = {"NC=C", "N+=C", "C=C", "C=C", "C=C", "C=C", "C=N", "CR", "CR", "CR", "CR", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for MENBZS01
        /// </summary>
        // @cdk.inchi InChI=1S/C7H7NO3S/c1-11-12-7-5-3-2-4-6(7)8(9)10/h2-5H,1H3
        [TestMethod()]
        public void TestMENBZS01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);

            string[] expected = {"S", "O2N", "O2N", "-OS", "NO2", "CB", "CB", "CB", "CB", "CB", "CB", "CR", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for METBZC10
        /// </summary>
        // @cdk.inchi InChI=1S/C9H10O3S/c1-12-9(10)7-5-3-4-6-8(7)13(2)11/h3-6H,1-2H3/t13-/m1/s1
        [TestMethod()]
        public void TestMETBZC10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Double);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);

            string[] expected = {"S=O", "O=S", "O=CO", "OC=O", "CB", "CB", "CB", "CB", "CB", "CB", "COO", "CR", "CR", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for NAESCB01
        /// </summary>
        // @cdk.inchi InChI=1S/C5H11NS2/c1-3-6(4-2)5(7)8/h3-4H2,1-2H3,(H,7,8)/p-1
        [TestMethod()]
        public void TestNAESCB01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);

            string[] expected = {"S2CM", "S2CM", "CS2M", "NC=S", "CR", "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for NHOXAL06
        /// </summary>
        // @cdk.inchi InChI=1S/C2H2O4/c3-1(4)2(5)6/h(H,3,4)(H,5,6)/p-1
        [TestMethod()]
        public void TestNHOXAL06()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Double);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);

            string[] expected = { "COO", "CO2M", "O=CO", "OC=O", "O2CM", "O2CM", "HOCO" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for PHOSLA10
        /// </summary>
        // @cdk.inchi InChI=1S/C6H8N3O3P/c1-5-6(2)12-13(10,11-5)9-4-7-3-8-9/h3-4H,1-2H3
        [TestMethod()]
        public void TestPHOSLA10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[15], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Double);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Double);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Single);
            container.AddBond(container.Atoms[17], container.Atoms[19], Single);
            container.AddBond(container.Atoms[17], container.Atoms[20], Single);

            string[] expected = {"PO3", "OPO2", "OP", "NPYL", "N5A", "N5B", "C=C", "CR", "C5B", "C5A", "HC", "HC", "HC",
                "HC", "HC", "OPO2", "C=C", "CR", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for PHOSLB10
        /// </summary>
        // @cdk.inchi InChI=1S/C9H18N3O3P/c1-7-8(2)15-16(13,14-7)10-9(11(3)4)12(5)6/h1-6H3
        [TestMethod()]
        public void TestPHOSLB10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Double);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[12], container.Atoms[33], Single);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[29], Single);
            container.AddBond(container.Atoms[14], container.Atoms[28], Single);
            container.AddBond(container.Atoms[14], container.Atoms[27], Single);
            container.AddBond(container.Atoms[15], container.Atoms[32], Single);
            container.AddBond(container.Atoms[15], container.Atoms[31], Single);
            container.AddBond(container.Atoms[15], container.Atoms[30], Single);

            string[] expected = {"PO3", "OPO2", "OPO2", "OP", "N=C", "NC=N", "NC=N", "C=C", "C=C", "CR", "CR", "CGD", "CR",
                "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for PIMTAZ01
        /// </summary>
        // @cdk.inchi InChI=1S/C11H12N2S/c1-2-4-9(5-3-1)10-8-13-6-7-14-11(13)12-10/h1-5,10H,6-8H2/t10-/m1/s1
        [TestMethod()]
        public void TestPIMTAZ01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);

            string[] expected = {"S", "NC=N", "N=C", "CR", "CR", "CR", "CR", "C=N", "CB", "CB", "CB", "CB", "CB", "CB",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for QUICNA01
        /// </summary>
        // @cdk.inchi InChI=1S/C7H5NO4/c9-6(10)4-2-1-3-8-5(4)7(11)12/h1-3H,(H,9,10)(H,11,12)/p-1
        [TestMethod()]
        public void TestQUICNA01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Double);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Double);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Double);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);

            string[] expected = {"CB", "CB", "CB", "CB", "CB", "CO2M", "CO2M", "HC", "HC", "HC", "HPD+", "NPD+", "O2CM",
                "O2CM", "O2CM", "O2CM"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SABNOY
        /// </summary>
        // @cdk.inchi InChI=1S/C9H12N4O5/c1-3-18-8(13-9(16)17-2)11-5-4-10-7(15)12-6(5)14/h4H,3H2,1-2H3,(H,11,13,16)(H2,10,12,14,15)
        [TestMethod()]
        public void TestSABNOY()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[18], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[16], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[19], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[20], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[21], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[12], Double);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[11], container.Atoms[24], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[17], Single);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);
            container.AddBond(container.Atoms[14], container.Atoms[27], Single);
            container.AddBond(container.Atoms[14], container.Atoms[28], Single);
            container.AddBond(container.Atoms[14], container.Atoms[29], Single);

            string[] expected = {"NC=O", "CONN", "NC=O", "C=ON", "C=C", "C=C", "NC=N", "C=N", "N=C", "C=ON", "OC=O", "CR",
                "O=CN", "CR", "CR", "O=CN", "O=CN", "OC=N", "HNCO", "HNCO", "HC", "HNCN", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SACXAV
        /// </summary>
        // @cdk.inchi InChI=1S/C12H18N4S/c1-2-3-4-5-6-7-17-12-10-11(14-8-13-10)15-9-16-12/h8-9H,2-7H2,1H3,(H,13,14,15,16)
        [TestMethod()]
        public void TestSACXAV()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Double);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Double);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Double);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);
            container.AddBond(container.Atoms[13], container.Atoms[27], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[28], Single);
            container.AddBond(container.Atoms[14], container.Atoms[29], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[30], Single);
            container.AddBond(container.Atoms[15], container.Atoms[31], Single);
            container.AddBond(container.Atoms[16], container.Atoms[32], Single);
            container.AddBond(container.Atoms[16], container.Atoms[33], Single);
            container.AddBond(container.Atoms[16], container.Atoms[34], Single);

            string[] expected = {"S", "NPYD", "NPYD", "N5B", "NPYL", "CB", "C5A", "C5B", "CB", "C5A", "CR", "CR", "CR",
                "CR", "CR", "CR", "CR", "HC", "HC", "HPYL", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SADXAW
        /// </summary>
        // @cdk.inchi InChI=1S/C8H8N4O3/c1-10-5(13)3-4-12-6(10)9-7(14)11(2)8(12)15/h3-4H,1-2H3
        [TestMethod()]
        public void TestSADXAW()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[10], Double);
            container.AddBond(container.Atoms[1], container.Atoms[12], Double);
            container.AddBond(container.Atoms[2], container.Atoms[9], Double);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Double);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Double);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[20], Single);
            container.AddBond(container.Atoms[14], container.Atoms[21], Single);
            container.AddBond(container.Atoms[14], container.Atoms[22], Single);

            string[] expected = {"O=CN", "O=CN", "O=CN", "NC=O", "N=C", "NC=O", "NC=O", "CGD", "C=C", "CONN", "C=ON", "CR",
                "CONN", "C=C", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SAFFOU
        /// </summary>
        // @cdk.inchi InChI=1S/C6H4N2S2/c1-5(7-3-9-1)6-2-10-4-8-6/h1-4H
        [TestMethod()]
        public void TestSAFFOU()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);

            string[] expected = {"STHI", "N5B", "C5B", "C5A", "C5A", "C5B", "N5B", "C5A", "C5A", "STHI", "HC", "HC", "HC",
                "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SAFFUA
        /// </summary>
        // @cdk.inchi InChI=1S/C6H4N2S2/c1-3-9-5(7-1)6-8-2-4-10-6/h1-4H
        [TestMethod()]
        public void TestSAFFUA()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Double);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Double);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);

            string[] expected = {"STHI", "STHI", "N5B", "N5B", "C5A", "C5A", "C5B", "C5A", "C5A", "C5B", "HC", "HC", "HC",
                "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SAFKAL
        /// </summary>
        // @cdk.inchi InChI=1S/C2HN3O4/c3-4-1(2(6)7)5(8)9/h(H,6,7)
        [TestMethod()]
        public void TestSAFKAL()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", -1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Double);
            container.AddBond(container.Atoms[2], container.Atoms[6], Double);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);

            string[] expected = { "C=N", "COO", "NO2", "=N=", "NAZT", "O2N", "O2N", "O=CO", "OC=O", "HOCO" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SAHSOJ
        /// </summary>
        // @cdk.inchi InChI=1S/C12H17N3O4S/c1-6(16)9-7-4-8(20-3-2-14-5-13)10(12(18)19)15(7)11(9)17/h5-7,9,16H,2-4H2,1H3,(H2,13,14)(H,18,19)/p-1/t6-,7-,9-/m1/s1
        [TestMethod()]
        public void TestSAHSOJ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[20], Single);
            container.AddBond(container.Atoms[3], container.Atoms[21], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[22], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[23], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[24], Single);
            container.AddBond(container.Atoms[8], container.Atoms[25], Single);
            container.AddBond(container.Atoms[8], container.Atoms[26], Single);
            container.AddBond(container.Atoms[8], container.Atoms[27], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Double);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[28], Single);
            container.AddBond(container.Atoms[10], container.Atoms[29], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[30], Single);
            container.AddBond(container.Atoms[11], container.Atoms[31], Single);
            container.AddBond(container.Atoms[12], container.Atoms[18], Single);
            container.AddBond(container.Atoms[12], container.Atoms[19], Double);
            container.AddBond(container.Atoms[12], container.Atoms[32], Single);
            container.AddBond(container.Atoms[14], container.Atoms[33], Single);
            container.AddBond(container.Atoms[18], container.Atoms[34], Single);
            container.AddBond(container.Atoms[19], container.Atoms[35], Single);

            string[] expected = {"NC=O", "C=C", "C=C", "CR", "CR4R", "CR4R", "C=ON", "CR", "CR", "CO2M", "CR", "CR", "C=N",
                "O=CN", "OR", "S", "O2CM", "O2CM", "NC=N", "N=C", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HOR", "HNCN", "HN=C"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SAHSUP
        /// </summary>
        // @cdk.inchi InChI=1S/C10H12N2O2S/c11-7-12-5-6-15-9-4-2-1-3-8(9)10(13)14/h1-4,7H,5-6H2,(H2,11,12)(H,13,14)
        [TestMethod()]
        public void TestSAHSUP()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[15], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[16], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[13], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[26], Single);
            container.AddBond(container.Atoms[14], container.Atoms[25], Single);

            string[] expected = {"CB", "CB", "CB", "CB", "CB", "CB", "CO2M", "O2CM", "O2CM", "S", "CR", "CR", "CNN+",
                "NCN+", "NCN+", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HNN+", "HNN+", "HNN+"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SAKGUG
        /// </summary>
        // @cdk.inchi InChI=1S/C21H8Cl2N2O2/c22-15-16(23)18(27)20(10-25)19(9-24,17(15)26)21(20)13-7-3-1-5-11(13)12-6-2-4-8-14(12)21/h1-8H/t19-,20+
        [TestMethod()]
        public void TestSAKGUG()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[21], Single);
            container.AddBond(container.Atoms[1], container.Atoms[22], Single);
            container.AddBond(container.Atoms[2], container.Atoms[20], Double);
            container.AddBond(container.Atoms[3], container.Atoms[23], Double);
            container.AddBond(container.Atoms[4], container.Atoms[26], Triple);
            container.AddBond(container.Atoms[5], container.Atoms[25], Triple);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[24], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[27], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[28], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[29], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[30], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[13], container.Atoms[18], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[31], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Double);
            container.AddBond(container.Atoms[15], container.Atoms[32], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[16], container.Atoms[33], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Double);
            container.AddBond(container.Atoms[17], container.Atoms[34], Single);
            container.AddBond(container.Atoms[19], container.Atoms[20], Single);
            container.AddBond(container.Atoms[19], container.Atoms[24], Single);
            container.AddBond(container.Atoms[19], container.Atoms[25], Single);
            container.AddBond(container.Atoms[20], container.Atoms[21], Single);
            container.AddBond(container.Atoms[21], container.Atoms[22], Double);
            container.AddBond(container.Atoms[22], container.Atoms[23], Single);
            container.AddBond(container.Atoms[23], container.Atoms[24], Single);
            container.AddBond(container.Atoms[24], container.Atoms[26], Single);

            string[] expected = {"CL", "CL", "O=CR", "O=CR", "NSP", "NSP", "CR3R", "CB", "CB", "CB", "CB", "CB", "CB",
                "CB", "CB", "CB", "CB", "CB", "CB", "CR3R", "C=OR", "C=C", "C=C", "C=OR", "CR3R", "CSP", "CSP", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SALVEG
        /// </summary>
        // @cdk.inchi InChI=1S/C9H14N2O3S/c1-4(2)6-5-7(15(14)10-6)9(13)11(3)8(5)12/h4-7,10H,1-3H3/t5-,6+,7+,15+/m0/s1
        [TestMethod()]
        public void TestSALVEG()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Double);
            container.AddBond(container.Atoms[3], container.Atoms[10], Double);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[13], container.Atoms[24], Single);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);
            container.AddBond(container.Atoms[14], container.Atoms[26], Single);
            container.AddBond(container.Atoms[14], container.Atoms[27], Single);
            container.AddBond(container.Atoms[14], container.Atoms[28], Single);

            string[] expected = {"S=O", "O=S", "O=CN", "O=CN", "NR", "NC=O", "C=ON", "CR", "CR", "CR", "C=ON", "CR", "CR",
                "CR", "CR", "HNR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SAMFUH
        /// </summary>
        // @cdk.inchi InChI=1S/C7H7NO2S3/c9-13(10,8-7(11)12)6-4-2-1-3-5-6/h1-5H,(H2,8,11,12)/p-2
        [TestMethod()]
        public void TestSAMFUH()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", -1));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Double);
            container.AddBond(container.Atoms[2], container.Atoms[5], Double);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);

            string[] expected = {"S2CM", "S2CM", "SO2N", "CS2M", "NM", "O2S", "O2S", "CB", "CB", "CB", "CB", "CB", "CB",
                "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SAMXUZ
        /// </summary>
        // @cdk.inchi InChI=1S/C9H18N3PS2/c1-6-12(7-2)13(15)8(3)10(4)9(14)11(13)5/h3,6-7H2,1-2,4-5H3/t13-/m0/s1
        [TestMethod()]
        public void TestSAMXUZ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[2], container.Atoms[6], Double);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Double);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[24], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[27], Single);
            container.AddBond(container.Atoms[12], container.Atoms[26], Single);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[29], Single);
            container.AddBond(container.Atoms[13], container.Atoms[28], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[32], Single);
            container.AddBond(container.Atoms[14], container.Atoms[31], Single);
            container.AddBond(container.Atoms[14], container.Atoms[30], Single);

            string[] expected = {"PTET", "S-P", "S=C", "NC=S", "NC=S", "NR", "C=SN", "C=C", "CR", "CR", "C=C", "CR", "CR",
                "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SANKEX10
        /// </summary>
        // @cdk.inchi InChI=1S/C11H13N3O4/c15-5-9-8(17)3-10(18-9)14-11-6(4-13-14)7(16)1-2-12-11/h1-2,4,8-10,15,17H,3,5H2,(H,12,16)/t8-,9+,10+/m0/s1
        [TestMethod()]
        public void TestSANKEX10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[18], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[20], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[21], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[11], container.Atoms[24], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[15], Single);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[16], Single);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);
            container.AddBond(container.Atoms[14], container.Atoms[17], Single);
            container.AddBond(container.Atoms[14], container.Atoms[27], Single);
            container.AddBond(container.Atoms[14], container.Atoms[28], Single);
            container.AddBond(container.Atoms[15], container.Atoms[29], Single);
            container.AddBond(container.Atoms[17], container.Atoms[30], Single);

            string[] expected = {"NPYL", "N5A", "C5B", "C=OR", "C=C", "C=C", "NC=C", "C5A", "C5B", "O=CR", "CR", "CR",
                "CR", "CR", "CR", "OR", "OR", "OR", "HC", "HC", "HC", "HNCC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HOR", "HOR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SAVDOI
        /// </summary>
        // @cdk.inchi InChI=1S/C12H24O3S/c1-8-9(11(2,3)4)14-16(13)15-10(8)12(5,6)7/h8-10H,1-7H3/t8-,9-,10+,16-
        [TestMethod()]
        public void TestSAVDOI()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[23], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[2], container.Atoms[24], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[25], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[22], Single);
            container.AddBond(container.Atoms[7], container.Atoms[21], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[23], container.Atoms[24], Single);
            container.AddBond(container.Atoms[24], container.Atoms[27], Single);
            container.AddBond(container.Atoms[24], container.Atoms[26], Single);
            container.AddBond(container.Atoms[26], container.Atoms[30], Single);
            container.AddBond(container.Atoms[26], container.Atoms[29], Single);
            container.AddBond(container.Atoms[26], container.Atoms[28], Single);
            container.AddBond(container.Atoms[28], container.Atoms[33], Single);
            container.AddBond(container.Atoms[28], container.Atoms[32], Single);
            container.AddBond(container.Atoms[28], container.Atoms[31], Single);
            container.AddBond(container.Atoms[29], container.Atoms[36], Single);
            container.AddBond(container.Atoms[29], container.Atoms[35], Single);
            container.AddBond(container.Atoms[29], container.Atoms[34], Single);
            container.AddBond(container.Atoms[30], container.Atoms[39], Single);
            container.AddBond(container.Atoms[30], container.Atoms[38], Single);
            container.AddBond(container.Atoms[30], container.Atoms[37], Single);

            string[] expected = {"S=O", "O=S", "CR", "OS=O", "CR", "CR", "CR", "CR", "CR", "CR", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "OS=O", "CR", "HC", "CR", "HC", "CR", "CR", "CR",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SAWKEG10
        /// </summary>
        // @cdk.inchi InChI=1S/C9H9N3/c10-12-7-6-9(11-12)8-4-2-1-3-5-8/h1-7H,10H2
        [TestMethod()]
        public void TestSAWKEG10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);

            string[] expected = {"NPYL", "N5A", "C5B", "C5B", "C5A", "NR", "CB", "CB", "CB", "CB", "CB", "CB", "HC", "HC",
                "HNR", "HNR", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SEBPEU01
        /// </summary>
        // @cdk.inchi InChI=1S/C10H12N2/c1-2-4-9(5-3-1)8-10-11-6-7-12-10/h1-5H,6-8H2,(H,11,12)/p+1
        [TestMethod()]
        public void TestSEBPEU01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[24], Single);

            string[] expected = {"NCN+", "CNN+", "NCN+", "CR", "CR", "CR", "CB", "CB", "CB", "CB", "CB", "CB", "HNN+",
                "HNN+", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SECDAF
        /// </summary>
        // @cdk.inchi InChI=1S/C15H13N3O4S/c1-18-13(15(20)17-12-8-4-5-9-16-12)14(19)10-6-2-3-7-11(10)23(18,21)22/h2-9,19H,1H3,(H,16,17,20)/p-1
        [TestMethod()]
        public void TestSECDAF()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[23], Single);
            container.AddBond(container.Atoms[4], container.Atoms[24], Single);
            container.AddBond(container.Atoms[4], container.Atoms[25], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Double);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[26], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[27], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[28], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[29], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[14], container.Atoms[16], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[16], container.Atoms[30], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Double);
            container.AddBond(container.Atoms[17], container.Atoms[22], Single);
            container.AddBond(container.Atoms[18], container.Atoms[19], Single);
            container.AddBond(container.Atoms[19], container.Atoms[20], Double);
            container.AddBond(container.Atoms[19], container.Atoms[31], Single);
            container.AddBond(container.Atoms[20], container.Atoms[21], Single);
            container.AddBond(container.Atoms[20], container.Atoms[32], Single);
            container.AddBond(container.Atoms[21], container.Atoms[22], Double);
            container.AddBond(container.Atoms[21], container.Atoms[33], Single);
            container.AddBond(container.Atoms[22], container.Atoms[34], Single);

            string[] expected = {"SO2N", "O2S", "O2S", "NSO2", "CR", "C=C", "C=C", "CB", "OM2", "CB", "CB", "CB", "CB",
                "CB", "C=ON", "O=CN", "NC=O", "CB", "NPYD", "CB", "CB", "CB", "CB", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HNCO", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SEFRAW
        /// </summary>
        // @cdk.inchi InChI=1S/C10H10N2OS/c13-9-8-6-3-1-2-4-7(6)14-10(8)12-5-11-9/h5H,1-4H2,(H,11,12,13)
        [TestMethod()]
        public void TestSEFRAW()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);

            string[] expected = {"STHI", "C5A", "N=C", "C=N", "NC=O", "C=ON", "C5B", "C5B", "CR", "CR", "CR", "CR", "C5A",
                "O=CN", "HC", "HNCO", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SEFYIL
        /// </summary>
        // @cdk.inchi InChI=1S/C8H18NO2PS2/c1-6(2)10-12(14,9-8(5)13)11-7(3)4/h6-7H,1-5H3,(H,9,13,14)
        [TestMethod()]
        public void TestSEFYIL()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[6], Double);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[24], Single);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[25], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[28], Single);
            container.AddBond(container.Atoms[12], container.Atoms[27], Single);
            container.AddBond(container.Atoms[12], container.Atoms[26], Single);
            container.AddBond(container.Atoms[13], container.Atoms[31], Single);
            container.AddBond(container.Atoms[13], container.Atoms[30], Single);
            container.AddBond(container.Atoms[13], container.Atoms[29], Single);

            string[] expected = {"S-P", "S=C", "PO2", "OPO", "OPO", "NC=S", "C=SN", "CR", "CR", "CR", "CR", "CR", "CR",
                "CR", "HNCS", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SEGFIT
        /// </summary>
        // @cdk.inchi InChI=1S/C9H9N3O2S/c10-9(15)12-11-7(8(13)14)6-4-2-1-3-5-6/h1-5H,(H,13,14)(H3,10,12,15)/p-1/b11-7+
        [TestMethod()]
        public void TestSEGFIT()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Double);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Double);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[13], container.Atoms[21], Single);
            container.AddBond(container.Atoms[14], container.Atoms[22], Single);

            string[] expected = {"S=C", "O2CM", "O2CM", "N=C", "NC=S", "NC=S", "C=SN", "C=N", "CO2M", "CB", "CB", "CB",
                "CB", "CB", "CB", "HNCS", "HNCS", "HNCS", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SEGJAP
        /// </summary>
        // @cdk.inchi InChI=1S/C12H8Cl4O4Si2/c13-21(14)17-9-5-1-2-6-10(9)18-22(15,16)20-12-8-4-3-7-11(12)19-21/h1-8H
        [TestMethod()]
        public void TestSEGJAP()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Si", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("Si", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[15], Double);
            container.AddBond(container.Atoms[10], container.Atoms[16], Double);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);
            container.AddBond(container.Atoms[15], container.Atoms[18], Single);
            container.AddBond(container.Atoms[16], container.Atoms[19], Single);
            container.AddBond(container.Atoms[16], container.Atoms[20], Single);
            container.AddBond(container.Atoms[17], container.Atoms[21], Double);
            container.AddBond(container.Atoms[17], container.Atoms[22], Single);
            container.AddBond(container.Atoms[18], container.Atoms[23], Single);
            container.AddBond(container.Atoms[19], container.Atoms[23], Single);
            container.AddBond(container.Atoms[20], container.Atoms[24], Double);
            container.AddBond(container.Atoms[20], container.Atoms[25], Single);
            container.AddBond(container.Atoms[21], container.Atoms[24], Single);
            container.AddBond(container.Atoms[21], container.Atoms[26], Single);
            container.AddBond(container.Atoms[23], container.Atoms[27], Single);
            container.AddBond(container.Atoms[23], container.Atoms[28], Single);
            container.AddBond(container.Atoms[24], container.Atoms[29], Single);

            string[] expected = {"SI", "CL", "CL", "OC=C", "OC=C", "CB", "CB", "CB", "CB", "CB", "CB", "HC", "HC", "HC",
                "HC", "CB", "CB", "CB", "OC=C", "OC=C", "CB", "CB", "HC", "SI", "CB", "HC", "HC", "CL", "CL", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SEGLAR
        /// </summary>
        // @cdk.inchi InChI=1S/C6H8N2O2S/c7-8-11(9,10)6-4-2-1-3-5-6/h1-5,8H,7H2
        [TestMethod()]
        public void TestSEGLAR()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[18], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);

            string[] expected = {"SO2N", "O2S", "O2S", "NSO2", "NR", "CB", "CB", "CB", "CB", "CB", "CB", "HNSO", "HNR",
                "HC", "HC", "HC", "HC", "HC", "HNR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SEGNEX
        /// </summary>
        // @cdk.inchi InChI=1S/C4H5N3O4S/c5-4(12)7-6-1(2(8)9)3(10)11/h(H,8,9)(H,10,11)(H3,5,7,12)/p-1
        [TestMethod()]
        public void TestSEGNEX()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[8], Double);
            container.AddBond(container.Atoms[1], container.Atoms[10], Double);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);

            string[] expected = {"S=C", "O2CM", "O2CM", "OC=O", "O=CO", "NC=S", "N=C", "NC=S", "C=SN", "C=N", "CO2M",
                "COO", "HNCS", "HNCS", "HNCS", "HOCO"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SEGWEG
        /// </summary>
        // @cdk.inchi InChI=1S/C6H6Cl3I/c7-6(8,9)4-1-5(10,2-4)3-4/h1-3H2/t4-,5+
        [TestMethod()]
        public void TestSEGWEG()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("I", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[14], Single);
            container.AddBond(container.Atoms[11], container.Atoms[15], Single);

            string[] expected = {"I", "CL", "CL", "CR4R", "CR4R", "CR4R", "CR4R", "CR", "HC", "HC", "HC", "CR4R", "HC",
                "CL", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SEHBEM
        /// </summary>
        // @cdk.inchi InChI=1S/C11H17NO2/c1-8-5-9(2)11(13)10(6-8)7-12(3,4)14/h5-6,13H,7H2,1-4H3
        [TestMethod()]
        public void TestSEHBEM()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[14], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[11], container.Atoms[24], Single);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[12], container.Atoms[26], Single);
            container.AddBond(container.Atoms[12], container.Atoms[27], Single);
            container.AddBond(container.Atoms[13], container.Atoms[28], Single);
            container.AddBond(container.Atoms[13], container.Atoms[29], Single);
            container.AddBond(container.Atoms[13], container.Atoms[30], Single);

            string[] expected = {"OC=C", "OXN", "N3OX", "CB", "CB", "CB", "CB", "CB", "CB", "CR", "CR", "CR", "CR", "CR",
                "HOCC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SEJDAM
        /// </summary>
        // @cdk.inchi InChI=1S/C12H12O3/c13-9-7(1-6-15-9)8-11(2-3-11)10(14)12(8)4-5-12/h1-6H2
        [TestMethod()]
        public void TestSEJDAM()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[8], Double);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[6], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[22], Single);
            container.AddBond(container.Atoms[7], container.Atoms[21], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Double);
            container.AddBond(container.Atoms[10], container.Atoms[25], Single);
            container.AddBond(container.Atoms[10], container.Atoms[24], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[26], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[11], container.Atoms[14], Single);

            string[] expected = {"CE4R", "CR3R", "C=OR", "CR3R", "CR3R", "CR3R", "CR3R", "CR3R", "C=C", "COO", "CR", "CR",
                "O=CR", "O=CO", "OC=O", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SEKKIC
        /// </summary>
        // @cdk.inchi InChI=1S/C11H17NO/c1-3-4-8-11(2)9-6-5-7-10(11)12-13/h3,8,13H,5-7,9H2,1-2H3/b12-10+/t4-,11+/m1/s1
        [TestMethod()]
        public void TestSEKKIC()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[13], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[7], container.Atoms[21], Single);
            container.AddBond(container.Atoms[8], container.Atoms[22], Single);
            container.AddBond(container.Atoms[8], container.Atoms[23], Single);
            container.AddBond(container.Atoms[8], container.Atoms[24], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[25], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[26], Single);
            container.AddBond(container.Atoms[12], container.Atoms[27], Single);
            container.AddBond(container.Atoms[12], container.Atoms[28], Single);
            container.AddBond(container.Atoms[12], container.Atoms[29], Single);

            string[] expected = {"-O-", "N=C", "C=N", "CR", "CR", "CR", "CR", "CR", "CR", "C=C", "=C=", "C=C", "CR", "HO",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SEKPED
        /// </summary>
        // @cdk.inchi InChI=1S/C6H6N4/c7-10-8-5-3-1-2-4-6(5)9-10/h1-4H,7H2
        [TestMethod()]
        public void TestSEKPED()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[8], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[9], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);

            string[] expected = {"N5A", "NPYL", "N5A", "C5B", "CB", "CB", "CB", "CB", "C5B", "NR", "HC", "HC", "HC", "HC",
                "HNR", "HNR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SEKPIH
        /// </summary>
        // @cdk.inchi InChI=1S/C7H7N3/c8-10-5-9-6-3-1-2-4-7(6)10/h1-5H,8H2
        [TestMethod()]
        public void TestSEKPIH()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);

            string[] expected = {"NPYL", "C5A", "N5B", "C5B", "CB", "CB", "CB", "CB", "C5A", "NR", "HC", "HC", "HC", "HC",
                "HC", "HNR", "HNR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SELFIY
        /// </summary>
        // @cdk.inchi InChI=1S/C18H16OSi/c19-20(16-10-4-1-5-11-16,17-12-6-2-7-13-17)18-14-8-3-9-15-18/h1-15,19H
        [TestMethod()]
        public void TestSELFIY()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Si", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[14], Single);
            container.AddBond(container.Atoms[1], container.Atoms[35], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[20], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[21], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[22], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[23], Single);
            container.AddBond(container.Atoms[7], container.Atoms[24], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[25], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[26], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[27], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[28], Single);
            container.AddBond(container.Atoms[13], container.Atoms[29], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[14], container.Atoms[19], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[30], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Double);
            container.AddBond(container.Atoms[16], container.Atoms[31], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Single);
            container.AddBond(container.Atoms[17], container.Atoms[32], Single);
            container.AddBond(container.Atoms[18], container.Atoms[19], Double);
            container.AddBond(container.Atoms[18], container.Atoms[33], Single);
            container.AddBond(container.Atoms[19], container.Atoms[34], Single);

            string[] expected = {"SI", "-O-", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB",
                "CB", "CB", "CB", "CB", "CB", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HO"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SEMDIX
        /// </summary>
        // @cdk.inchi InChI=1S/C7H16FNO2S/c1-4-9(5-2,6-3)7(8)12(10)11/h7H,4-6H2,1-3H3/q+1/t7-/m0/s1
        [TestMethod()]
        public void TestSEMDIX()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[24], Single);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[27], Single);
            container.AddBond(container.Atoms[11], container.Atoms[26], Single);
            container.AddBond(container.Atoms[11], container.Atoms[25], Single);

            string[] expected = {"SO2M", "F", "O2S", "O2S", "NR+", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SEMXOX
        /// </summary>
        // @cdk.inchi InChI=1S/C11H9N5O2/c1-18-11(17)9(7-12)10-13-14-15-16(10)8-5-3-2-4-6-8/h2-6H,1H3,(H,13,15)/b10-9+
        [TestMethod()]
        public void TestSEMXOX()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[15], Single);
            container.AddBond(container.Atoms[0], container.Atoms[16], Single);
            container.AddBond(container.Atoms[1], container.Atoms[15], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[23], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Triple);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[17], Single);
            container.AddBond(container.Atoms[16], container.Atoms[24], Single);
            container.AddBond(container.Atoms[16], container.Atoms[25], Single);
            container.AddBond(container.Atoms[16], container.Atoms[26], Single);

            string[] expected = {"OC=O", "O=CO", "NC=C", "N=N", "N=N", "NC=C", "NSP", "CB", "CB", "CB", "CB", "CB", "CB",
                "C=C", "C=C", "COO", "CR", "CSP", "HC", "HC", "HC", "HC", "HC", "HNCC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SETHAA
        /// </summary>
        // @cdk.inchi InChI=1S/C10H10O4S2/c11-15(12)6-7-16(13,14)10(8-15)9-4-2-1-3-5-9/h1-5,8H,6-7H2
        [TestMethod()]
        public void TestSETHAA()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Double);
            container.AddBond(container.Atoms[1], container.Atoms[4], Double);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[15], container.Atoms[25], Single);

            string[] expected = {"SO2", "SO2", "O2S", "O2S", "O2S", "O2S", "CR", "CR", "C=C", "C=C", "CB", "CB", "CB",
                "CB", "CB", "CB", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SETLIM
        /// </summary>
        // @cdk.inchi InChI=1S/C10H6F6N2S2/c11-9(12,13)8(10(14,15)16)18-7(19-20-8)17-6-4-2-1-3-5-6/h1-5H,(H,17,18)
        [TestMethod()]
        public void TestSETLIM()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[20], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[14], container.Atoms[19], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[21], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Double);
            container.AddBond(container.Atoms[16], container.Atoms[22], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Single);
            container.AddBond(container.Atoms[17], container.Atoms[23], Single);
            container.AddBond(container.Atoms[18], container.Atoms[19], Double);
            container.AddBond(container.Atoms[18], container.Atoms[24], Single);
            container.AddBond(container.Atoms[19], container.Atoms[25], Single);

            string[] expected = {"S", "S", "C=N", "NC=N", "N=C", "CR", "CR", "F", "F", "F", "CR", "F", "F", "F", "CB",
                "CB", "CB", "CB", "CB", "CB", "HNCN", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SEYVUN
        /// </summary>
        // @cdk.inchi InChI=1S/C6H5N3/c1-2-7-4-6-5(1)3-8-9-6/h1-4H,(H,8,9)/p+1
        [TestMethod()]
        public void TestSEYVUN()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);

            string[] expected = {"NPYL", "N5A", "C5B", "C5B", "CB", "CB", "NPD+", "CB", "C5A", "HPYL", "HC", "HC", "HC",
                "HPD+", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SEYWUO
        /// </summary>
        // @cdk.inchi InChI=1S/C9H16N4O2S/c1-9(2)6(12(3)4)13(7(14)10-9)11-8(16)15-5/h1-5H3,(H,10,14)
        [TestMethod()]
        public void TestSEYWUO()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", -1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[8], Double);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Double);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[16], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Double);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[24], Single);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[14], container.Atoms[28], Single);
            container.AddBond(container.Atoms[14], container.Atoms[27], Single);
            container.AddBond(container.Atoms[14], container.Atoms[26], Single);
            container.AddBond(container.Atoms[15], container.Atoms[31], Single);
            container.AddBond(container.Atoms[15], container.Atoms[30], Single);
            container.AddBond(container.Atoms[15], container.Atoms[29], Single);

            string[] expected = {"S=C", "NM", "NCN+", "NC=O", "NCN+", "O=CN", "OC=S", "CR", "C=S", "CONN", "CR", "CNN+",
                "CR", "CR", "CR", "CR", "HNCO", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SEZMEP
        /// </summary>
        // @cdk.inchi InChI=1S/C7H3Cl7O2/c8-2(9)1-5(4(10)16-5)7(13,14)3(15)6(1,11)12/h3-4,15H/t3-,4-,5+/m0/s1
        [TestMethod()]
        public void TestSEZMEP()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[12], container.Atoms[18], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);

            string[] expected = {"CL", "CL", "CL", "CL", "CL", "CL", "CL", "OR", "OR", "CR3R", "CR", "CR", "CR3R", "CR",
                "C=C", "C=C", "HOR", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SICNUN
        /// </summary>
        // @cdk.inchi InChI=1S/C8H6N4O8/c13-8(14)4-9(12(19)20)6-2-1-5(10(15)16)3-7(6)11(17)18/h1-3H,4H2,(H,13,14)
        [TestMethod()]
        public void TestSICNUN()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[20], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[21], Single);
            container.AddBond(container.Atoms[5], container.Atoms[22], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Double);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Double);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Double);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[16], container.Atoms[23], Single);
            container.AddBond(container.Atoms[16], container.Atoms[24], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Single);
            container.AddBond(container.Atoms[17], container.Atoms[19], Double);
            container.AddBond(container.Atoms[18], container.Atoms[25], Single);

            string[] expected = {"CB", "CB", "CB", "CB", "CB", "CB", "NC=C", "NO2", "O2N", "O2N", "NO2", "O2N", "O2N",
                "NO2", "O2N", "O2N", "CR", "COO", "OC=O", "O=CO", "HC", "HC", "HC", "HC", "HC", "HOCO"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SICPEZ
        /// </summary>
        // @cdk.inchi InChI=1S/C12H11NOS/c1-9(12-7-4-8-15-12)13-10-5-2-3-6-11(10)14/h2-8,14H,1H3/b13-9+
        [TestMethod()]
        public void TestSICPEZ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[14], Single);
            container.AddBond(container.Atoms[1], container.Atoms[15], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Double);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Double);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);

            string[] expected = {"STHI", "OC=C", "N=C", "C5A", "C5B", "C5B", "C5A", "C=N", "CR", "CB", "CB", "CB", "CB",
                "CB", "CB", "HOCC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SICSEC
        /// </summary>
        // @cdk.inchi InChI=1S/C10H7N5/c1-2-4-8(5-3-1)15-13-9-10(14-15)12-7-6-11-9/h1-7H
        [TestMethod()]
        public void TestSICSEC()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[12], container.Atoms[19], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[14], container.Atoms[21], Single);

            string[] expected = {"N5A", "NPYL", "N5A", "C5B", "C5B", "NPYD", "CB", "CB", "NPYD", "CB", "CB", "CB", "CB",
                "CB", "CB", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SIDFIU
        /// </summary>
        // @cdk.inchi InChI=1S/C12H2I2N4/c13-11-1-9(7(3-15)4-16)12(14)2-10(11)8(5-17)6-18/h1-2H
        [TestMethod()]
        public void TestSIDFIU()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("I", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("I", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Triple);
            container.AddBond(container.Atoms[2], container.Atoms[8], Triple);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Double);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Double);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[14], Double);
            container.AddBond(container.Atoms[12], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[16], Single);
            container.AddBond(container.Atoms[14], container.Atoms[17], Single);
            container.AddBond(container.Atoms[16], container.Atoms[18], Triple);
            container.AddBond(container.Atoms[17], container.Atoms[19], Triple);

            string[] expected = {"I", "NSP", "NSP", "C=C", "C=C", "C=C", "C=C", "CSP", "CSP", "HC", "C=C", "C=C", "C=C",
                "HC", "C=C", "I", "CSP", "CSP", "NSP", "NSP"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SIDRUS
        /// </summary>
        // @cdk.inchi InChI=1S/C9H19N7O2S/c1-9(2,3)7(10-11-14-19(6,17)18)8-15(4)12-13-16(8)5/h7H,1-6H3/t7-/m1/s1
        [TestMethod()]
        public void TestSIDRUS()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[14], Single);
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Double);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[21], Single);
            container.AddBond(container.Atoms[13], container.Atoms[20], Single);
            container.AddBond(container.Atoms[14], container.Atoms[25], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[23], Single);
            container.AddBond(container.Atoms[15], container.Atoms[28], Single);
            container.AddBond(container.Atoms[15], container.Atoms[27], Single);
            container.AddBond(container.Atoms[15], container.Atoms[26], Single);
            container.AddBond(container.Atoms[16], container.Atoms[31], Single);
            container.AddBond(container.Atoms[16], container.Atoms[30], Single);
            container.AddBond(container.Atoms[16], container.Atoms[29], Single);
            container.AddBond(container.Atoms[17], container.Atoms[34], Single);
            container.AddBond(container.Atoms[17], container.Atoms[33], Single);
            container.AddBond(container.Atoms[17], container.Atoms[32], Single);
            container.AddBond(container.Atoms[18], container.Atoms[37], Single);
            container.AddBond(container.Atoms[18], container.Atoms[36], Single);
            container.AddBond(container.Atoms[18], container.Atoms[35], Single);

            string[] expected = {"SO2N", "O2S", "NIM+", "O2S", "N5", "N5", "NIM+", "CIM+", "CR", "CR", "N=N", "N=N", "NM",
                "CR", "CR", "CR", "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SINMIL
        /// </summary>
        // @cdk.inchi InChI=1S/C10H24N2P2/c1-7-13-9(11(3)4)14(8-2)10(13)12(5)6/h9-10H,7-8H2,1-6H3/p+2/t9-,10+,13-,14+
        [TestMethod()]
        public void TestSINMIL()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[25], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[26], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[24], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[24], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[8], container.Atoms[22], Single);
            container.AddBond(container.Atoms[8], container.Atoms[23], Single);
            container.AddBond(container.Atoms[24], container.Atoms[27], Single);
            container.AddBond(container.Atoms[25], container.Atoms[28], Single);
            container.AddBond(container.Atoms[25], container.Atoms[29], Single);
            container.AddBond(container.Atoms[25], container.Atoms[30], Single);
            container.AddBond(container.Atoms[26], container.Atoms[31], Single);
            container.AddBond(container.Atoms[26], container.Atoms[32], Single);
            container.AddBond(container.Atoms[26], container.Atoms[33], Single);
            container.AddBond(container.Atoms[27], container.Atoms[34], Single);
            container.AddBond(container.Atoms[27], container.Atoms[35], Single);
            container.AddBond(container.Atoms[27], container.Atoms[36], Single);
            container.AddBond(container.Atoms[34], container.Atoms[37], Single);
            container.AddBond(container.Atoms[34], container.Atoms[38], Single);
            container.AddBond(container.Atoms[34], container.Atoms[39], Single);

            string[] expected = {"P", "NR+", "NR+", "CR4R", "CR4R", "CR", "CR", "CR", "CR", "HNR+", "HNR+", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "P", "CR", "CR", "CR", "HC", "HC",
                "HC", "HC", "HC", "HC", "CR", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SIYLOB
        /// </summary>
        // @cdk.inchi InChI=1S/C10H22NO3PS/c1-7(2)8-11-9(10(3,4)16-8)15(12,13-5)14-6/h7-9,11H,1-6H3/t8-,9-/m0/s1
        [TestMethod()]
        public void TestSIYLOB()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[11], container.Atoms[24], Single);
            container.AddBond(container.Atoms[11], container.Atoms[25], Single);
            container.AddBond(container.Atoms[12], container.Atoms[26], Single);
            container.AddBond(container.Atoms[12], container.Atoms[27], Single);
            container.AddBond(container.Atoms[12], container.Atoms[28], Single);
            container.AddBond(container.Atoms[13], container.Atoms[29], Single);
            container.AddBond(container.Atoms[13], container.Atoms[30], Single);
            container.AddBond(container.Atoms[13], container.Atoms[31], Single);
            container.AddBond(container.Atoms[14], container.Atoms[32], Single);
            container.AddBond(container.Atoms[14], container.Atoms[33], Single);
            container.AddBond(container.Atoms[14], container.Atoms[34], Single);
            container.AddBond(container.Atoms[15], container.Atoms[35], Single);
            container.AddBond(container.Atoms[15], container.Atoms[36], Single);
            container.AddBond(container.Atoms[15], container.Atoms[37], Single);

            string[] expected = {"S", "PO3", "OP", "OPO2", "OPO2", "NR", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "CR",
                "CR", "CR", "HNR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SIZJIU
        /// </summary>
        // @cdk.inchi InChI=1S/C12H17NO8/c13-3-12(1-4(15)9-10(12)20-9)21-11-8(18)7(17)6(16)5(2-14)19-11/h4-11,14-18H,1-2H2/t4-,5-,6-,7+,8-,9-,10-,11+,12-/m1/s1
        [TestMethod()]
        public void TestSIZJIU()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[21], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[16], Single);
            container.AddBond(container.Atoms[3], container.Atoms[22], Single);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[23], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[24], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[7], container.Atoms[25], Single);
            container.AddBond(container.Atoms[8], container.Atoms[14], Triple);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[26], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[27], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[28], Single);
            container.AddBond(container.Atoms[13], container.Atoms[29], Single);
            container.AddBond(container.Atoms[13], container.Atoms[30], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[31], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[16], container.Atoms[32], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Single);
            container.AddBond(container.Atoms[17], container.Atoms[33], Single);
            container.AddBond(container.Atoms[18], container.Atoms[19], Single);
            container.AddBond(container.Atoms[18], container.Atoms[34], Single);
            container.AddBond(container.Atoms[19], container.Atoms[20], Single);
            container.AddBond(container.Atoms[19], container.Atoms[35], Single);
            container.AddBond(container.Atoms[20], container.Atoms[36], Single);
            container.AddBond(container.Atoms[20], container.Atoms[37], Single);

            string[] expected = {"OR", "OR", "OR", "OR", "OR", "OR", "OR", "OR", "NSP", "CR", "CR3R", "CR3R", "CR", "CR",
                "CSP", "CR", "CR", "CR", "CR", "CR", "CR", "HOR", "HOR", "HOR", "HOR", "HOR", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SIZWUT
        /// </summary>
        // @cdk.inchi InChI=1S/C9H10N2O3S/c10-8(13)6-4-15-9(11-6)7-2-1-5(3-12)14-7/h1-2,4-5,7,12H,3H2,(H2,10,13)/t5-,7+/m0/s1
        [TestMethod()]
        public void TestSIZWUT()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);

            string[] expected = {"STHI", "C5A", "N5B", "C5B", "C5A", "C=ON", "NC=O", "O=CN", "CR", "C=C", "C=C", "CR",
                "CR", "OR", "OR", "HC", "HNCO", "HNCO", "HC", "HC", "HC", "HC", "HC", "HC", "HOR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SLFNMB04
        /// </summary>
        // @cdk.inchi InChI=1S/C10H11N3O3S/c1-7-6-10(12-16-7)13-17(14,15)9-4-2-8(11)3-5-9/h2-6H,11H2,1H3,(H,12,13)
        [TestMethod()]
        public void TestSLFNMB04()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[17], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[18], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[20], Single);
            container.AddBond(container.Atoms[6], container.Atoms[21], Single);
            container.AddBond(container.Atoms[6], container.Atoms[22], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[9], Double);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[15], Double);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[16], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[16], container.Atoms[25], Single);
            container.AddBond(container.Atoms[16], container.Atoms[26], Single);
            container.AddBond(container.Atoms[16], container.Atoms[27], Single);

            string[] expected = {"CB", "CB", "CB", "CB", "CB", "CB", "NC=C", "SO2N", "O2S", "O2S", "NSO2", "C5B", "C5B",
                "C5A", "OFUR", "N5A", "CR", "HC", "HC", "HC", "HC", "HNCC", "HNCC", "HNSO", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SOGVOZ
        /// </summary>
        // @cdk.inchi InChI=1S/C8H11N5O3/c1-8(2)10-11(3)7(14)5-6(13(15)16)9-4-12(5)8/h4,10H,1-3H3
        [TestMethod()]
        public void TestSOGVOZ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[8], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Double);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[18], Single);
            container.AddBond(container.Atoms[13], container.Atoms[19], Single);
            container.AddBond(container.Atoms[13], container.Atoms[20], Single);
            container.AddBond(container.Atoms[14], container.Atoms[21], Single);
            container.AddBond(container.Atoms[14], container.Atoms[22], Single);
            container.AddBond(container.Atoms[14], container.Atoms[23], Single);
            container.AddBond(container.Atoms[15], container.Atoms[24], Single);
            container.AddBond(container.Atoms[15], container.Atoms[25], Single);
            container.AddBond(container.Atoms[15], container.Atoms[26], Single);

            string[] expected = {"O=CN", "O2N", "O2N", "NO2", "N5B", "NPYL", "NR", "NC=O", "C=ON", "C5A", "C5B", "C5A",
                "CR", "CR", "CR", "CR", "HNR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SOHXOC
        /// </summary>
        // @cdk.inchi InChI=1S/C8H14N8/c1-4(14-15-7(9)10)6-3-13-16(5(6)2)8(11)12/h3H,1-2H3,(H7,9,10,11,12,15)/p+2/b14-4+
        [TestMethod()]
        public void TestSOHXOC()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[10], Double);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[24], Single);
            container.AddBond(container.Atoms[2], container.Atoms[23], Single);
            container.AddBond(container.Atoms[2], container.Atoms[22], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[27], Single);
            container.AddBond(container.Atoms[5], container.Atoms[26], Single);
            container.AddBond(container.Atoms[5], container.Atoms[25], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Double);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Double);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[14], container.Atoms[29], Single);
            container.AddBond(container.Atoms[14], container.Atoms[28], Single);
            container.AddBond(container.Atoms[15], container.Atoms[31], Single);
            container.AddBond(container.Atoms[15], container.Atoms[30], Single);

            string[] expected = {"CGD+", "C=N", "CR", "C=C", "C=C", "CR", "C=N", "CGD+", "NGD+", "NGD+", "NGD+", "N=C",
                "N=C", "NGD+", "NGD+", "NGD+", "HGD+", "HC", "HGD+", "HGD+", "HGD+", "HGD+", "HC", "HC", "HC", "HC",
                "HC", "HC", "HGD+", "HGD+", "HGD+", "HGD+"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SOJNEK
        /// </summary>
        // @cdk.inchi InChI=1S/C5H8N4O3S2/c1-3(10)7-4-9(2)8-5(13-4)14(6,11)12/h1-2H3,(H2,6,11,12)/b7-4-
        [TestMethod()]
        public void TestSOJNEK()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[16], Single);
            container.AddBond(container.Atoms[13], container.Atoms[17], Single);
            container.AddBond(container.Atoms[13], container.Atoms[18], Single);

            string[] expected = {"S", "C=N", "N=C", "NC=N", "C=N", "SO2N", "O2S", "NSO2", "O2S", "CR", "N=C", "C=ON",
                "O=CN", "CR", "HNSO", "HNSO", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SOMKIO
        /// </summary>
        // @cdk.inchi InChI=1S/C8H8Br2N2O2S/c1-7(2)4(3-11)12-5(13)8(9,10)6(12)15(7)14/h4,6H,1-2H3/t4-,6+,15-/m0/s1
        [TestMethod()]
        public void TestSOMKIO()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("Br", 0));
            container.Atoms.Add(NewAtm("Br", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Triple);
            container.AddBond(container.Atoms[6], container.Atoms[11], Double);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[13], container.Atoms[19], Single);
            container.AddBond(container.Atoms[13], container.Atoms[18], Single);
            container.AddBond(container.Atoms[13], container.Atoms[17], Single);
            container.AddBond(container.Atoms[14], container.Atoms[22], Single);
            container.AddBond(container.Atoms[14], container.Atoms[21], Single);
            container.AddBond(container.Atoms[14], container.Atoms[20], Single);

            string[] expected = {"S=O", "BR", "BR", "NC=O", "NSP", "O=S", "O=CN", "CR", "CR", "CR4R", "CR4R", "C=ON",
                "CSP", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SONZIE
        /// </summary>
        // @cdk.inchi InChI=1S/C13H19N3S/c1-2-7-16-8-3-4-9-10(16)5-6-11-12(9)15-13(14)17-11/h4,10H,2-3,5-8H2,1H3,(H2,14,15)/t10-/m1/s1
        [TestMethod()]
        public void TestSONZIE()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Double);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[19], Single);
            container.AddBond(container.Atoms[2], container.Atoms[20], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[21], Single);
            container.AddBond(container.Atoms[7], container.Atoms[22], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[23], Single);
            container.AddBond(container.Atoms[8], container.Atoms[24], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[12], container.Atoms[26], Single);
            container.AddBond(container.Atoms[13], container.Atoms[27], Single);
            container.AddBond(container.Atoms[13], container.Atoms[28], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[29], Single);
            container.AddBond(container.Atoms[14], container.Atoms[30], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[31], Single);
            container.AddBond(container.Atoms[15], container.Atoms[32], Single);
            container.AddBond(container.Atoms[16], container.Atoms[33], Single);
            container.AddBond(container.Atoms[16], container.Atoms[34], Single);
            container.AddBond(container.Atoms[16], container.Atoms[35], Single);

            string[] expected = {"STHI", "N5B", "NC=N", "NR", "C5A", "C5B", "C5A", "CR", "CR", "CR", "C=C", "C=C", "CR",
                "CR", "CR", "CR", "CR", "HC", "HC", "HNCN", "HNCN", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SOPZEC
        /// </summary>
        // @cdk.inchi InChI=1S/C8H4N2OS2/c1-5(11)2-7-12-8(13-7)6(3-9)4-10/h2H,1H3
        [TestMethod()]
        public void TestSOPZEC()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Double);
            container.AddBond(container.Atoms[3], container.Atoms[8], Triple);
            container.AddBond(container.Atoms[4], container.Atoms[9], Triple);
            container.AddBond(container.Atoms[5], container.Atoms[10], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[12], container.Atoms[15], Single);
            container.AddBond(container.Atoms[12], container.Atoms[16], Single);

            string[] expected = {"S", "S", "O=CR", "NSP", "NSP", "CE4R", "CE4R", "C=C", "CSP", "CSP", "C=C", "C=OR", "CR",
                "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SORBIK
        /// </summary>
        // @cdk.inchi InChI=1S/C8H4Cl2N4O2/c9-7-11-8(10)13(12-7)5-1-3-6(4-2-5)14(15)16/h1-4H
        [TestMethod()]
        public void TestSORBIK()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[14], Single);
            container.AddBond(container.Atoms[1], container.Atoms[15], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Double);
            container.AddBond(container.Atoms[7], container.Atoms[14], Double);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[18], Single);
            container.AddBond(container.Atoms[13], container.Atoms[19], Single);

            string[] expected = {"CL", "CL", "O2N", "O2N", "NO2", "NPYL", "N5A", "N5B", "CB", "CB", "CB", "CB", "CB", "CB",
                "C5A", "C5B", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SURDOX02
        /// </summary>
        // @cdk.inchi InChI=1S/CH4N2O2S/c2-1(3)6(4)5/h2-3H2
        [TestMethod()]
        public void TestSURDOX02()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Double);
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);

            string[] expected = { "=SO2", "CSO2", "NC=S", "O2S", "HNCS", "HNCS", "O2S", "NC=S", "HNCS", "HNCS" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for TACGIN
        /// </summary>
        // @cdk.inchi InChI=1S/C7H6N6O4/c14-12(15)6-1-8-10(3-6)5-11-4-7(2-9-11)13(16)17/h1-4H,5H2
        [TestMethod()]
        public void TestTACGIN()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[16], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[17], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Double);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Double);
            container.AddBond(container.Atoms[16], container.Atoms[21], Single);
            container.AddBond(container.Atoms[16], container.Atoms[22], Single);

            string[] expected = {"NPYL", "N5A", "C5B", "C5B", "C5A", "NO2", "O2N", "O2N", "NPYL", "N5A", "C5B", "C5B",
                "C5A", "NO2", "O2N", "O2N", "CR", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for TACLEO
        /// </summary>
        // @cdk.inchi InChI=1S/C10H12N2O3/c13-8(7-1-4-11-5-2-7)10(9(14)15)3-6-12-10/h1-2,4-5,8,12-13H,3,6H2,(H,14,15)/t8-,10-/m1/s1
        [TestMethod()]
        public void TestTACLEO()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Double);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[16], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[19], Single);
            container.AddBond(container.Atoms[2], container.Atoms[20], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[21], Single);
            container.AddBond(container.Atoms[3], container.Atoms[22], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Double);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[23], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[24], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[25], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Double);
            container.AddBond(container.Atoms[9], container.Atoms[26], Single);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);

            string[] expected = {"CR4R", "CB", "CR4R", "CR4R", "CO2M", "CR", "CB", "CB", "CB", "CB", "NR+", "NPYD", "O2CM",
                "O2CM", "OR", "HOR", "HC", "HNR+", "HNR+", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for TAFKIU
        /// </summary>
        // @cdk.inchi InChI=1S/C4H4N6O3/c11-7-9-1-2-10(8-12)4-3(9)5-13-6-4/h1-2H2
        [TestMethod()]
        public void TestTAFKIU()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Double);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Double);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[14], Single);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[16], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Double);
            container.AddBond(container.Atoms[9], container.Atoms[12], Double);

            string[] expected = {"C5B", "C5B", "CR", "CR", "NC=N", "NC=N", "N5A", "N5A", "N=O", "N=O", "OFUR", "O=N",
                "O=N", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for TAFXIH
        /// </summary>
        // @cdk.inchi InChI=1S/C12H9Br5/c13-9-7-5-3-1-2-4-6(5)8(10(9)14)12(16,17)11(7)15/h1-4,7-11H/t7-,8+,9+,10-,11+/m1/s1
        [TestMethod()]
        public void TestTAFXIH()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("Br", 0));
            container.Atoms.Add(NewAtm("Br", 0));
            container.Atoms.Add(NewAtm("Br", 0));
            container.Atoms.Add(NewAtm("Br", 0));
            container.Atoms.Add(NewAtm("Br", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[0], container.Atoms[15], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[17], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[16], Single);
            container.AddBond(container.Atoms[2], container.Atoms[18], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[19], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[20], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[21], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[22], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);
            container.AddBond(container.Atoms[9], container.Atoms[23], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[24], Single);
            container.AddBond(container.Atoms[11], container.Atoms[25], Single);

            string[] expected = {"CR", "CR", "CR", "CR", "CR", "CR", "CB", "CB", "CB", "CB", "CB", "CB", "BR", "BR", "BR",
                "BR", "BR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for TAFZIJ
        /// </summary>
        // @cdk.inchi InChI=1S/C6H4ClNO2S/c7-11-6-4-2-1-3-5(6)8(9)10/h1-4H
        [TestMethod()]
        public void TestTAFZIJ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);
            container.AddBond(container.Atoms[10], container.Atoms[14], Single);

            string[] expected = { "CL", "S", "O2N", "O2N", "NO2", "CB", "CB", "CB", "CB", "CB", "CB", "HC", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for TAGVIG
        /// </summary>
        // @cdk.inchi InChI=1S/C5H4N2O4/c8-3-2(4(9)10)1-6-5(11)7-3/h1H,(H,9,10)(H2,6,7,8,11)/p-1
        [TestMethod()]
        public void TestTAGVIG()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Double);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);

            string[] expected = {"NC=O", "CONN", "NC=O", "C=ON", "C=C", "C=C", "CO2M", "O=CN", "O=CN", "O2CM", "O2CM",
                "HNCO", "HNCO", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for TAHMOE
        /// </summary>
        // @cdk.inchi InChI=1S/C5H8N4O/c1-5(2,3-6)9-8-4(7)10/h1-2H3,(H2,7,10)/b9-8+
        [TestMethod()]
        public void TestTAHMOE()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Triple);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);

            string[] expected = {"CONN", "CR", "CSP", "CR", "CR", "N=N", "N=N", "NSP", "NC=O", "O=CN", "HNCO", "HNCO",
                "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for TAJPUP
        /// </summary>
        // @cdk.inchi InChI=1S/C10H8N4O3/c11-8-3-5-13(6-4-8)17-10-2-1-9(7-12-10)14(15)16/h1-7,11H/p+1
        [TestMethod()]
        public void TestTAJPUP()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Double);
            container.AddBond(container.Atoms[3], container.Atoms[11], Double);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Double);
            container.AddBond(container.Atoms[5], container.Atoms[25], Single);
            container.AddBond(container.Atoms[5], container.Atoms[24], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[21], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[14], container.Atoms[22], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Double);
            container.AddBond(container.Atoms[16], container.Atoms[23], Single);

            string[] expected = {"OC=N", "O2N", "O2N", "NPD+", "NPYD", "NC=C", "NO2", "CB", "CB", "CB", "CB", "CB", "CB",
                "CB", "CB", "CB", "CB", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HNCC", "HNCC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for TAJSUS
        /// </summary>
        // @cdk.inchi InChI=1S/C12H12N4O3/c17-11(6-10-4-2-1-3-5-10)14-16-8-13-15(9-16)7-12(18)19/h1-5,8-9H,6-7H2,(H-,14,17,18,19)/p-1
        [TestMethod()]
        public void TestTAJSUS()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[17], Single);
            container.AddBond(container.Atoms[0], container.Atoms[16], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[20], Single);
            container.AddBond(container.Atoms[1], container.Atoms[19], Single);
            container.AddBond(container.Atoms[1], container.Atoms[12], Single);
            container.AddBond(container.Atoms[2], container.Atoms[21], Single);
            container.AddBond(container.Atoms[2], container.Atoms[14], Single);
            container.AddBond(container.Atoms[2], container.Atoms[13], Double);
            container.AddBond(container.Atoms[3], container.Atoms[22], Single);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Double);
            container.AddBond(container.Atoms[4], container.Atoms[18], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[24], Single);
            container.AddBond(container.Atoms[5], container.Atoms[23], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[25], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[26], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[27], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[28], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[29], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);

            string[] expected = {"CO2M", "CR", "C5", "CIM+", "C=N", "CR", "CB", "CB", "CB", "CB", "CB", "CB", "NIM+", "N5",
                "NIM+", "N=C", "O2CM", "O2CM", "OM2", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for TAJVUV
        /// </summary>
        // @cdk.inchi InChI=1S/CHN3S2/c5-1-2-3-4-6-1/h(H,2,4,5)/p-1
        [TestMethod()]
        public void TestTAJVUV()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", -1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);

            string[] expected = { "STHI", "SM", "N5A", "N5B", "N5B", "C5A" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for TAJWAC
        /// </summary>
        // @cdk.inchi InChI=1S/C8H5N3OS2/c12-7(6-4-2-1-3-5-6)13-8-9-10-11-14-8/h1-5H
        [TestMethod()]
        public void TestTAJWAC()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);
            container.AddBond(container.Atoms[13], container.Atoms[18], Single);

            string[] expected = {"STHI", "S", "O=C", "N5A", "N5B", "N5B", "C5A", "C=OS", "CB", "CB", "CB", "CB", "CB",
                "CB", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for TAKHES
        /// </summary>
        // @cdk.inchi InChI=1S/C6Cl8/c7-3(8)1-2(4(9)10)6(13,14)5(1,11)12
        [TestMethod()]
        public void TestTAKHES()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);
            container.AddBond(container.Atoms[9], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[13], Single);

            string[] expected = {"CL", "CL", "CL", "CL", "C=C", "CE4R", "CR4R", "CE4R", "CR4R", "C=C", "CL", "CL", "CL",
                "CL"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for TAMMAV
        /// </summary>
        // @cdk.inchi InChI=1S/C7H5NO2S2/c9-12(10)6-4-2-1-3-5(6)7(11)8-12/h1-4H,(H,8,11)/p-1
        [TestMethod()]
        public void TestTAMMAV()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[11], Double);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);

            string[] expected = {"SO2N", "S=C", "O2S", "O2S", "NM", "CB", "CB", "CB", "CB", "CB", "CB", "C=S", "HC", "HC",
                "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for TANHAR
        /// </summary>
        // @cdk.inchi InChI=1S/C10H6N2O2/c11-7-10(12(13)14)6-9(10)8-4-2-1-3-5-8/h1-6H/t10-/m0/s1
        [TestMethod()]
        public void TestTANHAR()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Triple);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Double);

            string[] expected = {"CR3R", "C=C", "C=C", "CSP", "CB", "CB", "CB", "CB", "CB", "CB", "NSP", "NO2", "O2N",
                "O2N", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for TAPJUP
        /// </summary>
        // @cdk.inchi InChI=1S/C10H8N2O3/c1-10(14)6-4-2-3-5-7(6)12-8(10)9(13)15-11-12/h2-5,14H,1H3/t10-/m1/s1
        [TestMethod()]
        public void TestTAPJUP()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[15], Single);
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[16], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[17], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[18], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);
            container.AddBond(container.Atoms[14], container.Atoms[21], Single);
            container.AddBond(container.Atoms[14], container.Atoms[20], Single);
            container.AddBond(container.Atoms[14], container.Atoms[19], Single);

            string[] expected = {"CB", "CB", "CB", "CB", "CB", "CR", "C5B", "C5A", "OM2", "OFUR", "N5A", "N5B+", "CB",
                "OR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HOR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for TAPSAE
        /// </summary>
        // @cdk.inchi InChI=1S/C9H7N3/c10-5-8(6-11)7-1-3-9(12)4-2-7/h1-4,8H,12H2
        [TestMethod()]
        public void TestTAPSAE()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Triple);
            container.AddBond(container.Atoms[1], container.Atoms[5], Triple);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[17], Single);
            container.AddBond(container.Atoms[2], container.Atoms[18], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);

            string[] expected = {"NSP", "NSP", "NC=C", "CSP", "CR", "CSP", "CB", "CB", "CB", "CB", "CB", "CB", "HC", "HC",
                "HC", "HC", "HC", "HNCC", "HNCC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for TCYMPH02
        /// </summary>
        // @cdk.inchi InChI=1S/C6H6N3P/c7-1-4-10(5-2-8)6-3-9/h4-6H2
        [TestMethod()]
        public void TestTCYMPH02()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Triple);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[14], Triple);
            container.AddBond(container.Atoms[11], container.Atoms[15], Triple);

            string[] expected = {"P", "CR", "CSP", "NSP", "HC", "HC", "CR", "CR", "CSP", "HC", "HC", "CSP", "HC", "HC",
                "NSP", "NSP"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for TMTCHD01
        /// </summary>
        // @cdk.inchi InChI=1S/C10H12O2/c1-7-5(11)6(12)8(2)9(7,3)10(7,8)4/h1-4H3/t7-,8+,9-,10+
        [TestMethod()]
        public void TestTMTCHD01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[12], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[12], container.Atoms[15], Double);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[16], Single);
            container.AddBond(container.Atoms[14], container.Atoms[17], Single);
            container.AddBond(container.Atoms[16], container.Atoms[18], Single);
            container.AddBond(container.Atoms[16], container.Atoms[19], Single);
            container.AddBond(container.Atoms[16], container.Atoms[20], Single);
            container.AddBond(container.Atoms[17], container.Atoms[21], Single);
            container.AddBond(container.Atoms[17], container.Atoms[22], Single);
            container.AddBond(container.Atoms[17], container.Atoms[23], Single);

            string[] expected = {"O=CR", "C=OR", "CR3R", "CR3R", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "C=OR",
                "CR3R", "CR3R", "O=CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VABLIT
        /// </summary>
        // @cdk.inchi InChI=1S/C8H9N5/c1-9-13-8-6-3-2-4-10-7(6)11-5-12-8/h2-5,9H,1H3,(H,10,11,12,13)
        [TestMethod()]
        public void TestVABLIT()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[13], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[14], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[19], Single);

            string[] expected = {"NPYD", "CB", "CB", "CB", "CB", "CB", "NPYD", "CB", "NPYD", "CB", "NC=N", "NR", "CR",
                "HC", "HC", "HC", "HC", "HNCN", "HNR", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VABROF
        /// </summary>
        // @cdk.inchi InChI=1S/C9H14O5/c1-9(2)13-6-5(4-10)12-8(11-3)7(6)14-9/h4-8H,1-3H3/t5-,6-,7-,8-/m1/s1
        [TestMethod()]
        public void TestVABROF()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[0], container.Atoms[14], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[15], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[16], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Double);
            container.AddBond(container.Atoms[4], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[20], Single);
            container.AddBond(container.Atoms[5], container.Atoms[21], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[22], Single);
            container.AddBond(container.Atoms[7], container.Atoms[23], Single);
            container.AddBond(container.Atoms[7], container.Atoms[24], Single);
            container.AddBond(container.Atoms[8], container.Atoms[25], Single);
            container.AddBond(container.Atoms[8], container.Atoms[26], Single);
            container.AddBond(container.Atoms[8], container.Atoms[27], Single);

            string[] expected = {"CR", "CR", "CR", "CR", "C=OR", "CR", "CR", "CR", "CR", "OR", "OR", "OR", "OR", "O=CR",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VACRUM
        /// </summary>
        // @cdk.inchi InChI=1S/C8H11N5O3/c1-6(14)2-3-12-8(11-4-5-11)9-7(10-12)13(15)16/h2-5H2,1H3
        [TestMethod()]
        public void TestVACRUM()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[26], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[15], container.Atoms[25], Single);
            container.AddBond(container.Atoms[15], container.Atoms[24], Single);
            container.AddBond(container.Atoms[15], container.Atoms[23], Single);

            string[] expected = {"NPYL", "N5A", "C5B", "N5B", "C5A", "NO2", "O2N", "O2N", "NC=N", "CR3R", "CR3R", "CR",
                "CR", "C=OR", "O=CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VAJFAN
        /// </summary>
        // @cdk.inchi InChI=1S/C11H7N3O2S3/c1-8-2-4-9(5-3-8)19(15,16)14-17-10(6-12)11(7-13)18-14/h2-5H,1H3
        [TestMethod()]
        public void TestVAJFAN()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[12], Triple);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[14], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Triple);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[10], container.Atoms[24], Single);
            container.AddBond(container.Atoms[10], container.Atoms[25], Single);
            container.AddBond(container.Atoms[11], container.Atoms[14], Single);
            container.AddBond(container.Atoms[11], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Double);
            container.AddBond(container.Atoms[16], container.Atoms[18], Double);

            string[] expected = {"CSP", "C=C", "C=C", "CSP", "CB", "CB", "CB", "CB", "CB", "CB", "CR", "NSO2", "NSP",
                "NSP", "S", "S", "SO2N", "O2S", "O2S", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VALTEH
        /// </summary>
        // @cdk.inchi InChI=1S/C2H4OS2/c1-3-2(4)5/h1H3,(H,4,5)/p-1
        [TestMethod()]
        public void TestVALTEH()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);

            string[] expected = { "S2CM", "S2CM", "CS2M", "OC=S", "CR", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VALWOU
        /// </summary>
        // @cdk.inchi InChI=1S/C9H13F4NO2S2/c10-8(11,17-9(12,13)18(15)16)14-4-1-7(2-5-14)3-6-14/h7H,1-6H2/q+1/t7-,14-
        [TestMethod()]
        public void TestVALWOU()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[25], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[17], Single);
            container.AddBond(container.Atoms[15], container.Atoms[27], Single);
            container.AddBond(container.Atoms[15], container.Atoms[26], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[16], container.Atoms[29], Single);
            container.AddBond(container.Atoms[16], container.Atoms[28], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[17], container.Atoms[30], Single);

            string[] expected = {"S", "SO2M", "O2S", "O2S", "CR", "F", "F", "CR", "F", "F", "NR+", "CR", "CR", "CR", "CR",
                "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VAPZOB10
        /// </summary>
        // @cdk.inchi InChI=1S/C10H13N5O4/c11-4-1-2-12-15-9(4)13-14-10(15)8-7(18)6(17)5(3-16)19-8/h1-2,5-8,16-18H,3,11H2/t5-,6-,7-,8-/m1/s1
        [TestMethod()]
        public void TestVAPZOB10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[24], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[17], Single);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);
            container.AddBond(container.Atoms[14], container.Atoms[18], Single);
            container.AddBond(container.Atoms[14], container.Atoms[27], Single);
            container.AddBond(container.Atoms[14], container.Atoms[28], Single);
            container.AddBond(container.Atoms[15], container.Atoms[29], Single);
            container.AddBond(container.Atoms[16], container.Atoms[30], Single);
            container.AddBond(container.Atoms[18], container.Atoms[31], Single);

            string[] expected = {"N5B", "N5B", "C5A", "NPYL", "N=C", "C=N", "C=C", "C=C", "C5A", "NC=C", "CR", "CR", "CR",
                "CR", "CR", "OR", "OR", "OR", "OR", "HC", "HC", "HNCC", "HNCC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HOR", "HOR", "HOR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VASDOI
        /// </summary>
        // @cdk.inchi InChI=1S/C9H8O3/c1-5-3-7-8(12-9(5)10)4-6(2)11-7/h3-4H,1-2H3
        [TestMethod()]
        public void TestVASDOI()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);

            string[] expected = {"C=C", "C=C", "COO", "OC=O", "C5B", "C5B", "C5A", "OFUR", "C5A", "CR", "O=CO", "CR", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VATKAC
        /// </summary>
        // @cdk.inchi InChI=1S/C12H11ClN2O2S/c1-15-9-6-5(12(15)18-2)3-4-14-8(6)7(13)10(16)11(9)17/h14H,3-4H2,1-2H3
        [TestMethod()]
        public void TestVATKAC()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[17], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Double);
            container.AddBond(container.Atoms[3], container.Atoms[10], Double);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Double);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[19], Single);
            container.AddBond(container.Atoms[14], container.Atoms[20], Single);
            container.AddBond(container.Atoms[15], container.Atoms[21], Single);
            container.AddBond(container.Atoms[15], container.Atoms[22], Single);
            container.AddBond(container.Atoms[16], container.Atoms[23], Single);
            container.AddBond(container.Atoms[16], container.Atoms[24], Single);
            container.AddBond(container.Atoms[16], container.Atoms[25], Single);
            container.AddBond(container.Atoms[17], container.Atoms[26], Single);
            container.AddBond(container.Atoms[17], container.Atoms[27], Single);
            container.AddBond(container.Atoms[17], container.Atoms[28], Single);

            string[] expected = {"CL", "S", "O=CR", "O=CR", "NPYL", "NC=C", "C5B", "C=C", "C=C", "C=OR", "C=OR", "C5A",
                "C5A", "C5B", "CR", "CR", "CR", "CR", "HNCC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VAWDUS
        /// </summary>
        // @cdk.inchi InChI=1S/C6H9N2O5P/c1-4-5(8(10)11)3-14(12,13-2)6(4)7-9/h7H,3H2,1-2H3/b7-6-/t14-/m0/s1
        [TestMethod()]
        public void TestVAWDUS()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[22], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[12], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[12], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[15], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[21], Single);
            container.AddBond(container.Atoms[13], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[19], Single);

            string[] expected = {"PO2", "OPO", "OP", "OXN", "O2N", "O2N", "N2OX", "NO2", "C=N", "C=C", "C=C", "CR", "CR",
                "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HNOX"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VAWMOV
        /// </summary>
        // @cdk.inchi InChI=1S/C7H12N4O6S/c8-18(15,16)7-9-2-11(10-7)6-5(14)4(13)3(1-12)17-6/h2-6,12-14H,1H2,(H2,8,15,16)/t3-,4-,5-,6-/m1/s1
        [TestMethod()]
        public void TestVAWMOV()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[13], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Double);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Double);
            container.AddBond(container.Atoms[2], container.Atoms[18], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Double);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[19], Single);
            container.AddBond(container.Atoms[4], container.Atoms[20], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[22], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[24], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[8], container.Atoms[28], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[13], container.Atoms[21], Single);
            container.AddBond(container.Atoms[14], container.Atoms[23], Single);
            container.AddBond(container.Atoms[15], container.Atoms[17], Single);
            container.AddBond(container.Atoms[15], container.Atoms[25], Single);
            container.AddBond(container.Atoms[15], container.Atoms[26], Single);
            container.AddBond(container.Atoms[16], container.Atoms[27], Single);
            container.AddBond(container.Atoms[17], container.Atoms[29], Single);

            string[] expected = {"NPYL", "C5B", "C5A", "O2S", "NSO2", "CR", "CR", "OR", "OR", "N5A", "N5B", "SO2N", "O2S",
                "CR", "CR", "CR", "OR", "OR", "HC", "HNSO", "HNSO", "HC", "HC", "HC", "HC", "HC", "HC", "HOR", "HOR",
                "HOR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VAWWAR
        /// </summary>
        // @cdk.inchi InChI=1S/C9H16BrN3O4/c1-6(7(12(14)15)13(16)17)11-9(4,5)8(2,3)10/h11H,1-5H3
        [TestMethod()]
        public void TestVAWWAR()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Br", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Double);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[32], Single);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[11], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[21], Single);
            container.AddBond(container.Atoms[13], container.Atoms[20], Single);
            container.AddBond(container.Atoms[14], container.Atoms[25], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[23], Single);
            container.AddBond(container.Atoms[15], container.Atoms[28], Single);
            container.AddBond(container.Atoms[15], container.Atoms[27], Single);
            container.AddBond(container.Atoms[15], container.Atoms[26], Single);
            container.AddBond(container.Atoms[16], container.Atoms[31], Single);
            container.AddBond(container.Atoms[16], container.Atoms[30], Single);
            container.AddBond(container.Atoms[16], container.Atoms[29], Single);

            string[] expected = {"BR", "O2N", "O2N", "O2N", "O2N", "NO2", "NO2", "NC=C", "C=C", "C=C", "CR", "CR", "CR",
                "CR", "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HNCC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VAYKUB
        /// </summary>
        // @cdk.inchi InChI=1S/C8H13N3O/c1-3-12-5-7-4-10-6(2)11-8(7)9/h4H,3,5H2,1-2H3,(H2,9,10,11)/p+1
        [TestMethod()]
        public void TestVAYKUB()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[25], Single);
            container.AddBond(container.Atoms[11], container.Atoms[24], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);

            string[] expected = {"NPD+", "CB", "NPYD", "CB", "CB", "CB", "CR", "NC=C", "CR", "OR", "CR", "CR", "HPD+",
                "HNCC", "HNCC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VAZHUZ
        /// </summary>
        // @cdk.inchi InChI=1S/C11H10N2O3/c1-16-9-6-7(2-3-8(9)14)10(15)11-12-4-5-13-11/h2-6,14H,1H3,(H,12,13)
        [TestMethod()]
        public void TestVAZHUZ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[16], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Double);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[7], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[14], Single);
            container.AddBond(container.Atoms[11], container.Atoms[15], Double);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Single);
            container.AddBond(container.Atoms[13], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[25], Single);

            string[] expected = {"CB", "CB", "CB", "CB", "CB", "CB", "C=OR", "CR", "O=CR", "OC=C", "OC=C", "C5A", "C5A",
                "C5B", "NPYL", "N5B", "HC", "HC", "HC", "HC", "HC", "HC", "HOCC", "HC", "HC", "HPYL"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VECSAX
        /// </summary>
        // @cdk.inchi InChI=1S/C8H12S6/c1-10-6(9)5-7(11-2)14-8(5,12-3)13-4/h1-4H3
        [TestMethod()]
        public void TestVECSAX()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[13], Double);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[22], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);
            container.AddBond(container.Atoms[9], container.Atoms[12], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[16], Single);
            container.AddBond(container.Atoms[14], container.Atoms[17], Single);
            container.AddBond(container.Atoms[18], container.Atoms[19], Single);
            container.AddBond(container.Atoms[18], container.Atoms[20], Single);
            container.AddBond(container.Atoms[18], container.Atoms[21], Single);
            container.AddBond(container.Atoms[22], container.Atoms[23], Single);
            container.AddBond(container.Atoms[22], container.Atoms[24], Single);
            container.AddBond(container.Atoms[22], container.Atoms[25], Single);

            string[] expected = {"S", "S", "S=C", "S", "S", "S", "CE4R", "CE4R", "CR4R", "CR", "HC", "HC", "HC", "CSS",
                "CR", "HC", "HC", "HC", "CR", "HC", "HC", "HC", "CR", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VEDTED
        /// </summary>
        // @cdk.inchi InChI=1S/C6H9N5O2S/c1-10-3-8-6-4(10)5(7)9-14(12,13)11(6)2/h3H,1-2H3,(H2,7,9)
        [TestMethod()]
        public void TestVEDTED()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Double);
            container.AddBond(container.Atoms[0], container.Atoms[10], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[11], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[16], Single);
            container.AddBond(container.Atoms[12], container.Atoms[17], Single);
            container.AddBond(container.Atoms[12], container.Atoms[18], Single);
            container.AddBond(container.Atoms[12], container.Atoms[19], Single);
            container.AddBond(container.Atoms[13], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[21], Single);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);

            string[] expected = {"SO2N", "N=C", "C=N", "NPYL", "C5A", "N5B", "NSO2", "C5B", "C5A", "O2S", "O2S", "NC=N",
                "CR", "CR", "HC", "HNCN", "HNCN", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VEHCOA
        /// </summary>
        // @cdk.inchi InChI=1S/C6H11N3O2Si/c1-12(2,3)6-5(9(10)11)4-7-8-6/h4H,1-3H3,(H,7,8)
        [TestMethod()]
        public void TestVEHCOA()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("Si", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);

            string[] expected = {"NPYL", "N5A", "C5B", "C5B", "NO2", "O2N", "O2N", "C5A", "SI", "CR", "CR", "CR", "HPYL",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VEHZOX
        /// </summary>
        // @cdk.inchi InChI=1S/C8H11ClN2O4S/c9-5-7-6-16(12,13)10-8(15-7)11-1-3-14-4-2-11/h6H,1-5H2
        [TestMethod()]
        public void TestVEHZOX()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Double);
            container.AddBond(container.Atoms[1], container.Atoms[5], Double);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[19], Single);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[21], Single);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[14], container.Atoms[23], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);
            container.AddBond(container.Atoms[15], container.Atoms[25], Single);
            container.AddBond(container.Atoms[15], container.Atoms[26], Single);

            string[] expected = {"CL", "SO2N", "OC=C", "OR", "O2S", "O2S", "N=C", "NC=N", "C=N", "C=C", "C=C", "CR", "CR",
                "CR", "CR", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VEJWOW
        /// </summary>
        // @cdk.inchi InChI=1S/C9H6Cl4O4S/c1-16-7(14)9(13,8(15)17-2)5-3(10)4(11)6(12)18-5/h1-2H3
        [TestMethod()]
        public void TestVEJWOW()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[15], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[16], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Double);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);

            string[] expected = {"STHI", "C5A", "C5B", "C5B", "C5A", "CR", "COO", "OC=O", "CR", "O=CO", "COO", "OC=O",
                "CR", "O=CO", "CL", "CL", "CL", "CL", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VEKMON
        /// </summary>
        // @cdk.inchi InChI=1S/C9H13N2O/c1-8(12)11-6-4-9(5-7-11)10(2)3/h4-7H,1-3H3/q+1
        [TestMethod()]
        public void TestVEKMON()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[13], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Double);
            container.AddBond(container.Atoms[5], container.Atoms[11], Double);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[21], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[24], Single);
            container.AddBond(container.Atoms[8], container.Atoms[23], Single);
            container.AddBond(container.Atoms[8], container.Atoms[22], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);

            string[] expected = {"CB", "CB", "CB", "CB", "CB", "C=ON", "CR", "CR", "CR", "NPD+", "NC=C", "O=CN", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VENYUI
        /// </summary>
        // @cdk.inchi InChI=1S/C12H12/c1-4-7-9-5(2)10-8(4)12(10)6(3)11(7)9/h7-12H,1-3H2/t7-,8+,9+,10-,11-,12+
        [TestMethod()]
        public void TestVENYUI()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[13], container.Atoms[17], Single);
            container.AddBond(container.Atoms[13], container.Atoms[18], Double);
            container.AddBond(container.Atoms[14], container.Atoms[16], Single);
            container.AddBond(container.Atoms[14], container.Atoms[17], Single);
            container.AddBond(container.Atoms[14], container.Atoms[19], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[16], container.Atoms[20], Single);
            container.AddBond(container.Atoms[17], container.Atoms[21], Single);
            container.AddBond(container.Atoms[18], container.Atoms[22], Single);
            container.AddBond(container.Atoms[18], container.Atoms[23], Single);

            string[] expected = {"CR3R", "CR3R", "CR3R", "C=C", "C=C", "C=C", "C=C", "HC", "HC", "HC", "HC", "HC", "HC",
                "C=C", "CR3R", "HC", "CR3R", "CR3R", "C=C", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VETWAS
        /// </summary>
        // @cdk.inchi InChI=1S/C6H2N8O8/c15-11(16)3-4(12(17)18)8-1(7-3)2-9-5(13(19)20)6(10-2)14(21)22/h(H,7,8)(H,9,10)
        [TestMethod()]
        public void TestVETWAS()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Double);
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Double);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Double);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Double);
            container.AddBond(container.Atoms[13], container.Atoms[15], Single);
            container.AddBond(container.Atoms[13], container.Atoms[16], Single);
            container.AddBond(container.Atoms[14], container.Atoms[17], Single);
            container.AddBond(container.Atoms[15], container.Atoms[17], Double);
            container.AddBond(container.Atoms[15], container.Atoms[18], Single);
            container.AddBond(container.Atoms[17], container.Atoms[19], Single);
            container.AddBond(container.Atoms[18], container.Atoms[20], Single);
            container.AddBond(container.Atoms[18], container.Atoms[21], Double);
            container.AddBond(container.Atoms[19], container.Atoms[22], Single);
            container.AddBond(container.Atoms[19], container.Atoms[23], Double);

            string[] expected = {"C5A", "C5A", "C5B", "NPYL", "N5B", "NO2", "NO2", "O2N", "O2N", "O2N", "O2N", "HPYL",
                "C5A", "NPYL", "N5B", "C5A", "HPYL", "C5B", "NO2", "NO2", "O2N", "O2N", "O2N", "O2N"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VEVDIJ
        /// </summary>
        // @cdk.inchi InChI=1S/C12H13Cl2OP/c1-11-8-16(15,7-10(11)12(11,13)14)9-5-3-2-4-6-9/h2-6,10H,7-8H2,1H3/t10-,11+,16-/m1/s1
        [TestMethod()]
        public void TestVEVDIJ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[9], container.Atoms[23], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[24], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[14], container.Atoms[27], Single);
            container.AddBond(container.Atoms[15], container.Atoms[28], Single);

            string[] expected = {"CL", "CL", "OP", "CR3R", "CR", "PO", "CR", "CR3R", "CR3R", "CR", "CB", "CB", "CB", "CB",
                "CB", "CB", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VEWZOM
        /// </summary>
        // @cdk.inchi InChI=1S/C12H12FN5/c1-7(2)15-11-12-17-14-6-18(12)10-5-8(13)3-4-9(10)16-11/h3-7H,1-2H3,(H,15,16)/p+1
        [TestMethod()]
        public void TestVEWZOM()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[18], Single);
            container.AddBond(container.Atoms[0], container.Atoms[17], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[17], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[23], Single);
            container.AddBond(container.Atoms[7], container.Atoms[22], Single);
            container.AddBond(container.Atoms[7], container.Atoms[21], Single);
            container.AddBond(container.Atoms[8], container.Atoms[26], Single);
            container.AddBond(container.Atoms[8], container.Atoms[25], Single);
            container.AddBond(container.Atoms[8], container.Atoms[24], Single);
            container.AddBond(container.Atoms[9], container.Atoms[27], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[28], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[29], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[13], container.Atoms[15], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[15], container.Atoms[30], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Double);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);

            string[] expected = {"C5A", "N5B", "N5B", "C5A", "CNN+", "NCN+", "CR", "CR", "CR", "NCN+", "CB", "CB", "CB",
                "CB", "F", "CB", "CB", "NPYL", "HC", "HNN+", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HNN+", "HC",
                "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VEXKOY
        /// </summary>
        // @cdk.inchi InChI=1S/C12H6N2O/c13-7-8-5-6-11-12(14-8)9-3-1-2-4-10(9)15-11/h1-6H
        [TestMethod()]
        public void TestVEXKOY()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Triple);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[10], container.Atoms[17], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[12], container.Atoms[19], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);

            string[] expected = {"NPYD", "C5B", "C5A", "CB", "CB", "CB", "CSP", "NSP", "OFUR", "C5B", "CB", "CB", "CB",
                "CB", "C5A", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VEXMOA
        /// </summary>

        [TestMethod()]
        public void TestVEXMOA()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[14], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);

            string[] expected = {"N=C", "C=N", "CB", "CB", "CB", "CB", "CB", "NPYD", "CB", "CB", "CB", "CB", "CB", "CB",
                "-O-", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HO"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VEYBIK
        /// </summary>
        // @cdk.inchi InChI=1S/C5H14O3Si2/c1-9(6)4-3-5-10(2,7)8-9/h6-7H,3-5H2,1-2H3/t9-,10-/m0/s1
        [TestMethod()]
        public void TestVEYBIK()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Si", 0));
            container.Atoms.Add(NewAtm("Si", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[9], container.Atoms[21], Single);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[9], container.Atoms[23], Single);

            string[] expected = {"SI", "SI", "-O-", "-O-", "-O-", "CR", "CR", "CR", "CR", "CR", "HO", "HO", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VEYWAX
        /// </summary>
        // @cdk.inchi InChI=1S/C2H3ClN2O2/c3-2(5-7)1-4-6/h1,6-7H/b4-1+,5-2+
        [TestMethod()]
        public void TestVEYWAX()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);

            string[] expected = { "CL", "-O-", "-O-", "N=C", "N=C", "C=N", "C=N", "HO", "HO", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VEZBUX
        /// </summary>
        // @cdk.inchi InChI=1S/C8H8ClO2P/c9-5-12(10)6-11-7-3-1-2-4-8(7)12/h1-4H,5-6H2/t12-/m0/s1
        [TestMethod()]
        public void TestVEZBUX()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Double);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);

            string[] expected = {"CL", "PO", "OC=C", "OP", "CR", "CR", "CB", "CB", "CB", "CB", "CB", "CB", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VICGAP
        /// </summary>
        // @cdk.inchi InChI=1S/C8H14N4O5/c1-11-8(16)10-7(9)12(11)6-5(15)4(14)3(2-13)17-6/h3-6,13-15H,2H2,1H3,(H2,9,10,16)/t3-,4-,5-,6-/m1/s1
        [TestMethod()]
        public void TestVICGAP()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[16], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Double);
            container.AddBond(container.Atoms[1], container.Atoms[16], Single);
            container.AddBond(container.Atoms[1], container.Atoms[17], Single);
            container.AddBond(container.Atoms[2], container.Atoms[17], Double);
            container.AddBond(container.Atoms[2], container.Atoms[19], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[20], Single);
            container.AddBond(container.Atoms[4], container.Atoms[23], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[20], Single);
            container.AddBond(container.Atoms[5], container.Atoms[21], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[21], Single);
            container.AddBond(container.Atoms[6], container.Atoms[29], Single);
            container.AddBond(container.Atoms[7], container.Atoms[30], Single);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[14], container.Atoms[22], Single);
            container.AddBond(container.Atoms[16], container.Atoms[18], Single);
            container.AddBond(container.Atoms[18], container.Atoms[24], Single);
            container.AddBond(container.Atoms[18], container.Atoms[25], Single);
            container.AddBond(container.Atoms[19], container.Atoms[26], Single);
            container.AddBond(container.Atoms[20], container.Atoms[22], Single);
            container.AddBond(container.Atoms[20], container.Atoms[27], Single);
            container.AddBond(container.Atoms[21], container.Atoms[23], Single);
            container.AddBond(container.Atoms[21], container.Atoms[28], Single);

            string[] expected = {"NC=N", "CONN", "CGD", "O=CN", "CR", "CR", "CR", "OR", "OR", "HC", "HNCN", "HC", "HC",
                "HC", "HOR", "HOR", "NC=O", "N=C", "CR", "NC=N", "CR", "CR", "OR", "OR", "HC", "HC", "HNCN", "HC",
                "HC", "HC", "HOR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VICGET
        /// </summary>
        // @cdk.inchi InChI=1S/C10H14N6O4S/c11-10-14-8-7(9(15-10)21(12)19)13-3-16(8)6-1-4(18)5(2-17)20-6/h3-6,17-18H,1-2,12H2,(H2,11,14,15)/t4-,5+,6-,21-/m0/s1
        [TestMethod()]
        public void TestVICGET()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[21], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[23], Single);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[10], container.Atoms[12], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[12], container.Atoms[24], Single);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);
            container.AddBond(container.Atoms[13], container.Atoms[19], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[28], Single);
            container.AddBond(container.Atoms[14], container.Atoms[27], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[15], container.Atoms[29], Single);
            container.AddBond(container.Atoms[15], container.Atoms[18], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[16], container.Atoms[30], Single);
            container.AddBond(container.Atoms[16], container.Atoms[19], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Single);
            container.AddBond(container.Atoms[17], container.Atoms[34], Single);
            container.AddBond(container.Atoms[17], container.Atoms[31], Single);
            container.AddBond(container.Atoms[17], container.Atoms[20], Single);
            container.AddBond(container.Atoms[18], container.Atoms[32], Single);
            container.AddBond(container.Atoms[20], container.Atoms[33], Single);

            string[] expected = {"NPYD", "CB", "NPYD", "C5A", "C5B", "CB", "N5B", "C5A", "NPYL", "NC=N", "S=O", "O=S",
                "NR", "CR", "CR", "CR", "CR", "CR", "OR", "OR", "OR", "HC", "HNCN", "HNCN", "HNR", "HNR", "HC", "HC",
                "HC", "HC", "HC", "HC", "HOR", "HOR", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VICKIB
        /// </summary>
        // @cdk.inchi InChI=1S/C10H13ClO2S/c1-9(2)6-3-4-10(9,7(12)5-6)8(11)14-13/h6H,3-5H2,1-2H3/t6-,10+/m1/s1
        [TestMethod()]
        public void TestVICKIB()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[6], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);
            container.AddBond(container.Atoms[8], container.Atoms[16], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);
            container.AddBond(container.Atoms[13], container.Atoms[24], Single);
            container.AddBond(container.Atoms[13], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);

            string[] expected = {"CL", "=S=O", "O=S=", "O=CR", "CS=O", "CR", "C=OR", "CR", "CR", "CR", "CR", "CR", "CR",
                "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VICPOM
        /// </summary>
        // @cdk.inchi InChI=1S/C10H9N5O/c1-2-7(16-3-1)4-11-9-8-10(13-5-12-8)15-6-14-9/h1-3,5-6H,4H2,(H2,11,12,13,14,15)/p+1
        [TestMethod()]
        public void TestVICPOM()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[15], Single);
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Double);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[16], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Double);
            container.AddBond(container.Atoms[3], container.Atoms[17], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[18], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Double);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[15], container.Atoms[25], Single);

            string[] expected = {"OFUR", "NPYD", "NPD+", "NC=N", "NPYL", "N5B", "CB", "C5B", "C5A", "CB", "C5A", "CR",
                "C5A", "C5B", "C5B", "C5A", "HPD+", "HNCN", "HPYL", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VIDKUO
        /// </summary>
        // @cdk.inchi InChI=1S/C6H12N2/c1-5-4-6(2,3)8-7-5/h8H,4H2,1-3H3/p+1
        [TestMethod()]
        public void TestVIDKUO()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);

            string[] expected = {"NR+", "N=C", "C=N", "CR", "CR", "CR", "CR", "CR", "HNR+", "HNR+", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VIFFEV
        /// </summary>

        [TestMethod()]
        public void TestVIFFEV()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[15], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[16], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[20], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[13], container.Atoms[23], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);

            string[] expected = {"STHI", "NPYL", "C5", "C5B", "CB", "CB", "CB", "CB", "C5A", "C5", "C5B", "CB", "CB", "CB",
                "CB", "C5A", "HPYL", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VIGPEG
        /// </summary>
        // @cdk.inchi InChI=1S/C11H16N4O2/c1-10(2,11(3,4)17)15-5-7-8(14-15)12-6-13-9(7)16/h5-6,17H,1-4H3,(H,12,13,14,16)
        [TestMethod()]
        public void TestVIGPEG()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Double);
            container.AddBond(container.Atoms[2], container.Atoms[17], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[11], Single);
            container.AddBond(container.Atoms[9], container.Atoms[12], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[23], Single);
            container.AddBond(container.Atoms[11], container.Atoms[24], Single);
            container.AddBond(container.Atoms[11], container.Atoms[25], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[12], container.Atoms[16], Single);
            container.AddBond(container.Atoms[13], container.Atoms[26], Single);
            container.AddBond(container.Atoms[13], container.Atoms[27], Single);
            container.AddBond(container.Atoms[13], container.Atoms[28], Single);
            container.AddBond(container.Atoms[14], container.Atoms[29], Single);
            container.AddBond(container.Atoms[14], container.Atoms[30], Single);
            container.AddBond(container.Atoms[14], container.Atoms[31], Single);
            container.AddBond(container.Atoms[16], container.Atoms[32], Single);

            string[] expected = {"N5A", "NPYL", "C5A", "C=ON", "NC=O", "C=N", "N=C", "C5B", "C5B", "CR", "CR", "CR", "CR",
                "CR", "CR", "O=CN", "OR", "HC", "HNCO", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HOR"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VIGTUA
        /// </summary>
        // @cdk.inchi InChI=1S/C12H8N2/c1-2-4-6-5(3-1)13-11-9-7-8(9)10(7)12(11)14-6/h1-4,7-10H/t7-,8+,9-,10+
        [TestMethod()]
        public void TestVIGTUA()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[1], container.Atoms[12], Double);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[14], Single);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[13], container.Atoms[21], Single);

            string[] expected = {"NPYD", "NPYD", "CR3R", "CR3R", "CR3R", "CB", "CB", "CB", "CB", "CB", "CB", "CB", "CB",
                "CR3R", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VIHHID
        /// </summary>
        // @cdk.inchi InChI=1S/C11H11NOS2/c1-11(2)10(15-13)14-9(12-11)8-6-4-3-5-7-8/h3-7H,1-2H3
        [TestMethod()]
        public void TestVIHHID()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[22], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[13], container.Atoms[15], Single);
            container.AddBond(container.Atoms[13], container.Atoms[16], Single);
            container.AddBond(container.Atoms[22], container.Atoms[23], Single);
            container.AddBond(container.Atoms[22], container.Atoms[24], Single);
            container.AddBond(container.Atoms[22], container.Atoms[25], Single);

            string[] expected = {"S", "=S=O", "O=S=", "N=C", "CS=O", "CR", "C=N", "CB", "CB", "CB", "CB", "CB", "CB", "CR",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "CR", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VIKVIU
        /// </summary>
        // @cdk.inchi InChI=1S/C6H9NO4/c1-3-4(2)6(3,5(8)9)7(10)11/h3-4H,1-2H3,(H,8,9)/t3-,4+,6+
        [TestMethod()]
        public void TestVIKVIU()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Double);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Double);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);

            string[] expected = {"CR3R", "CR3R", "CR3R", "CR", "CR", "COO", "NO2", "O=CO", "OC=O", "O2N", "O2N", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HOCO"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VIKYAP
        /// </summary>
        // @cdk.inchi InChI=1S/C11H10BrNO3/c12-11(13(15)16)8-3-1-2-4-5(3)9(11)7(4)10(14)6(2)8/h2-9H,1H2/t2-,3+,4-,5+,6+,7-,8-,9+,11+/m1/s1
        [TestMethod()]
        public void TestVIKYAP()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("Br", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[16], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[17], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[21], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[22], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[23], Single);
            container.AddBond(container.Atoms[10], container.Atoms[24], Single);
            container.AddBond(container.Atoms[10], container.Atoms[25], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Double);

            string[] expected = {"CR", "CR4R", "CR4R", "C=OR", "CR", "CR", "CR", "CR4R", "CR4R", "CR", "CR", "BR", "NO2",
                "O2N", "O2N", "O=CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VIMHII
        /// </summary>
        // @cdk.inchi InChI=1S/ClO4/c2-1(3,4)5/q-4
        [TestMethod()]
        public void TestVIMHII()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("O", -1));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);

            string[] expected = { "CLO4", "O4CL", "O4CL", "O4CL", "O4CL" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VIPXAT
        /// </summary>
        // @cdk.inchi InChI=1S/C9H9N3O2/c1-5-3-10-9-11-7(13)6(2)4-12(9)8(5)14/h3-4H,1-2H3,(H,10,11,13)/p+1
        [TestMethod()]
        public void TestVIPXAT()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[13], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[9], container.Atoms[11], Double);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);

            string[] expected = {"N=C", "C=N", "OC=N", "C=C", "CR", "C=C", "NCN+", "C=ON", "O=CN", "C=C", "CR", "C=C",
                "NCN+", "CNN+", "HOCN", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HNN+"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VIRBON
        /// </summary>
        // @cdk.inchi InChI=1S/C11H14N2O2/c1-11(9(14)6-13-12)8-5-3-2-4-7(8)10(11)15/h6-8H,2-5H2,1H3/t7-,8+,11+/m1/s1
        [TestMethod()]
        public void TestVIRBON()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Double);
            container.AddBond(container.Atoms[1], container.Atoms[13], Double);
            container.AddBond(container.Atoms[2], container.Atoms[14], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[19], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[21], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[23], Single);
            container.AddBond(container.Atoms[9], container.Atoms[22], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[24], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[27], Single);
            container.AddBond(container.Atoms[12], container.Atoms[26], Single);
            container.AddBond(container.Atoms[12], container.Atoms[25], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Single);
            container.AddBond(container.Atoms[14], container.Atoms[28], Single);

            string[] expected = {"O=CR", "O=CR", "=N=", "NAZT", "C=OR", "CR4R", "CR", "CR", "CR", "CR", "CR4R", "CR4R",
                "CR", "C=OR", "C=N", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VIWCOT
        /// </summary>
        // @cdk.inchi InChI=1S/C10H8O2/c11-10-9(7-12-10)6-8-4-2-1-3-5-8/h1-6H,7H2/b9-6+
        [TestMethod()]
        public void TestVIWCOT()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[0], container.Atoms[11], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[2], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[19], Single);

            string[] expected = {"COO", "CE4R", "CR4R", "C=C", "CB", "CB", "CB", "CB", "CB", "CB", "OC=O", "O=CO", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VIXRID
        /// </summary>
        // @cdk.inchi InChI=1S/C6H5N3OS/c1-9-3-7-6-5(9)4(10)2-8-11-6/h2-3H,1H3
        [TestMethod()]
        public void TestVIXRID()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Double);
            container.AddBond(container.Atoms[2], container.Atoms[6], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Double);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[10], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[13], Single);

            string[] expected = {"NPYL", "N5B", "N=C", "S", "O=CR", "C5A", "C=N", "C=OR", "C5B", "C5A", "CR", "HC", "HC",
                "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VIXXOP
        /// </summary>
        // @cdk.inchi InChI=1S/C2H3F2NO2S2/c1-5-8(6)2(3,4)9(5)7/h1H3/t8-,9+
        [TestMethod()]
        public void TestVIXXOP()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Double);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Double);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);

            string[] expected = { "S=O", "S=O", "F", "F", "CR4R", "NR", "O=S", "O=S", "CR", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VIYPAU
        /// </summary>
        // @cdk.inchi InChI=1S/C10H13BrO6/c1-9(2)15-5-4-6(14-7(5)17-9)10(11,16-4)8(12)13-3/h4-7H,1-3H3/t4-,5-,6+,7-,10+/m1/s1


        public void TestVIYPAU()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Br", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[14], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Double);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[7], container.Atoms[28], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[29], Single);
            container.AddBond(container.Atoms[8], container.Atoms[20], Single);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[11], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);
            container.AddBond(container.Atoms[12], container.Atoms[14], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[13], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Single);
            container.AddBond(container.Atoms[16], container.Atoms[27], Single);
            container.AddBond(container.Atoms[16], container.Atoms[26], Single);
            container.AddBond(container.Atoms[16], container.Atoms[25], Single);

            string[] expected = {"BR", "OR", "OR", "OR", "OR", "O=CO", "OC=O", "CR", "CR", "CR", "CR", "CR", "CR4R",
                "CR4R", "CR4R", "COO", "CR", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VOBLAZ
        /// </summary>
        // @cdk.inchi InChI=1S/C12H13N3O/c1-12(2)7-10(16)15-9-6-4-3-5-8(9)13-11(15)14-12/h3-6H,7H2,1-2H3,(H,13,14)
        [TestMethod()]
        public void TestVOBLAZ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[0], container.Atoms[13], Single);
            container.AddBond(container.Atoms[0], container.Atoms[14], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[1], container.Atoms[12], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[17], Single);
            container.AddBond(container.Atoms[2], container.Atoms[18], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);
            container.AddBond(container.Atoms[3], container.Atoms[15], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[19], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[20], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[21], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[22], Single);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[23], Single);
            container.AddBond(container.Atoms[10], container.Atoms[24], Single);
            container.AddBond(container.Atoms[10], container.Atoms[25], Single);
            container.AddBond(container.Atoms[11], container.Atoms[26], Single);
            container.AddBond(container.Atoms[11], container.Atoms[27], Single);
            container.AddBond(container.Atoms[11], container.Atoms[28], Single);
            container.AddBond(container.Atoms[12], container.Atoms[16], Single);

            string[] expected = {"C5A", "CR", "CR", "C=ON", "C5A", "CB", "CB", "CB", "CB", "C5B", "CR", "CR", "NC=N",
                "NPYL", "N5B", "O=CN", "HNCN", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VOBWOY
        /// </summary>
        // @cdk.inchi InChI=1S/C8H9NO2S/c10-12(11)6-8-4-2-1-3-7(8)5-9-12/h1-4,9H,5-6H2
        [TestMethod()]
        public void TestVOBWOY()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[0], container.Atoms[12], Single);
            container.AddBond(container.Atoms[0], container.Atoms[13], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[3], Double);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[19], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);

            string[] expected = {"CR", "SO2N", "O2S", "O2S", "NSO2", "CR", "CB", "CB", "CB", "CB", "CB", "CB", "HC", "HC",
                "HNSO", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VOFBOH
        /// </summary>
        // @cdk.inchi InChI=1S/C11H10Br2O2/c12-11(13)7-10(11,6-9(14)15)8-4-2-1-3-5-8/h1-5H,6-7H2,(H,14,15)/t10-/m0/s1
        [TestMethod()]
        public void TestVOFBOH()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Br", 0));
            container.Atoms.Add(NewAtm("Br", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[24], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[18], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[14], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[13], container.Atoms[14], Double);
            container.AddBond(container.Atoms[13], container.Atoms[22], Single);
            container.AddBond(container.Atoms[14], container.Atoms[23], Single);

            string[] expected = {"BR", "BR", "OC=O", "O=CO", "CR3R", "CR3R", "CR3R", "CR", "COO", "CB", "CB", "CB", "CB",
                "CB", "CB", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HOCO"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VOFCAU
        /// </summary>
        // @cdk.inchi InChI=1S/C10H9BrCl2/c11-7-9(6-10(9,12)13)8-4-2-1-3-5-8/h1-5H,6-7H2/t9-/m0/s1
        [TestMethod()]
        public void TestVOFCAU()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Br", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[5], container.Atoms[13], Single);
            container.AddBond(container.Atoms[5], container.Atoms[14], Single);
            container.AddBond(container.Atoms[6], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Double);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Single);
            container.AddBond(container.Atoms[8], container.Atoms[17], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Double);
            container.AddBond(container.Atoms[9], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Double);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);

            string[] expected = {"BR", "CL", "CL", "CR3R", "CR3R", "CR3R", "CR", "CB", "CB", "CB", "CB", "CB", "CB", "HC",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VOJGEG
        /// </summary>
        // @cdk.inchi InChI=1S/C2H4O2/c1-2(3)4/h1H3,(H,3,4)/p+1
        [TestMethod()]
        public void TestVOJGEG()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Double);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);

            string[] expected = { "OC=O", "O=+", "CR", "C=O", "HOCO", "HO=+", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VOJJIN
        /// </summary>
        // @cdk.inchi InChI=1S/C6H9N2O2P/c7-6-3-1-2-4-8(6)5-11(9)10/h1-4,7,11H,5H2,(H,9,10)
        [TestMethod()]
        public void TestVOJJIN()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[10], Single);
            container.AddBond(container.Atoms[0], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Double);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[4], container.Atoms[16], Single);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[12], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[13], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[14], Single);
            container.AddBond(container.Atoms[9], container.Atoms[15], Single);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[10], container.Atoms[19], Single);

            string[] expected = {"PO2", "O2P", "NPD+", "O2P", "NC=N", "CB", "CB", "CB", "CB", "CB", "CR", "HP", "HC", "HC",
                "HC", "HC", "HNCN", "HNCN", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VUWXUG
        /// </summary>
        // @cdk.inchi InChI=1S/C2H2N2O4/c5-1(3-7)2(6)4-8/h(H2-2,3,4,5,6,7,8)/q-2
        [TestMethod()]
        public void TestVUWXUG()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);

            string[] expected = { "OM", "C=ON", "NC=O", "O=CN", "HNCO", "C=ON", "NC=O", "O=CN", "OM", "HNCO" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VUXGOK
        /// </summary>
        // @cdk.inchi InChI=1S/C10H9NO2/c1-6(12)10-9(11)7-4-2-3-5-8(7)13-10/h2-5H,11H2,1H3
        [TestMethod()]
        public void TestVUXGOK()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Double);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Double);
            container.AddBond(container.Atoms[7], container.Atoms[14], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[15], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[9], container.Atoms[16], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);

            string[] expected = {"OFUR", "O=CR", "C5A", "C5B", "C5B", "C5A", "CB", "CB", "CB", "CB", "C=OR", "CR", "NC=C",
                "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HNCC", "HNCC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VUXPUZ
        /// </summary>
        // @cdk.inchi InChI=1S/C8H8N2O3S/c9-14(11,12)5-7-6-3-1-2-4-8(6)13-10-7/h1-4H,5H2,(H2,9,11,12)
        [TestMethod()]
        public void TestVUXPUZ()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[16], Single);
            container.AddBond(container.Atoms[6], container.Atoms[17], Single);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[18], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[13], container.Atoms[21], Single);

            string[] expected = {"SO2N", "O2S", "O2S", "OFUR", "NSO2", "N5A", "CR", "C5B", "C5B", "C5A", "CB", "CB", "CB",
                "CB", "HNSO", "HNSO", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for VUXREL
        /// </summary>
        // @cdk.inchi InChI=1S/C9H9NO3/c1-2-12-9(11)7-5-8-6(10-7)3-4-13-8/h3-5,10H,2H2,1H3
        [TestMethod()]
        public void TestVUXREL()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[1], container.Atoms[13], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[14], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Double);
            container.AddBond(container.Atoms[5], container.Atoms[15], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[16], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[10], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[17], Single);
            container.AddBond(container.Atoms[11], container.Atoms[18], Single);
            container.AddBond(container.Atoms[12], container.Atoms[19], Single);
            container.AddBond(container.Atoms[12], container.Atoms[20], Single);
            container.AddBond(container.Atoms[12], container.Atoms[21], Single);

            string[] expected = {"OFUR", "C5A", "C5B", "C5", "C5", "C5B", "C5A", "NPYL", "COO", "O=CO", "OC=O", "CR", "CR",
                "HC", "HC", "HC", "HPYL", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for ZZZIZA01
        /// </summary>
        // @cdk.inchi InChI=1S/C8H4N2/c1-9-7-3-5-8(10-2)6-4-7/h3-6H/q+2
        [TestMethod()]
        public void TestZZZIZA01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Triple);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Double);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Double);
            container.AddBond(container.Atoms[7], container.Atoms[11], Single);
            container.AddBond(container.Atoms[7], container.Atoms[9], Single);
            container.AddBond(container.Atoms[9], container.Atoms[12], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Triple);

            string[] expected = { "CB", "CB", "NR%", "C%", "HC", "CB", "CB", "CB", "HC", "CB", "HC", "HC", "NR%", "C%" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for ZZZMVU10
        /// </summary>
        // @cdk.inchi InChI=1S/C12H10O4S4/c13-19(14,11-7-3-1-4-8-11)17-18-20(15,16)12-9-5-2-6-10-12/h1-10H
        [TestMethod()]
        public void TestZZZMVU10()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Double);
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Double);
            container.AddBond(container.Atoms[3], container.Atoms[7], Double);
            container.AddBond(container.Atoms[3], container.Atoms[14], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[13], Single);
            container.AddBond(container.Atoms[9], container.Atoms[10], Single);
            container.AddBond(container.Atoms[9], container.Atoms[20], Single);
            container.AddBond(container.Atoms[10], container.Atoms[11], Double);
            container.AddBond(container.Atoms[10], container.Atoms[21], Single);
            container.AddBond(container.Atoms[11], container.Atoms[12], Single);
            container.AddBond(container.Atoms[11], container.Atoms[22], Single);
            container.AddBond(container.Atoms[12], container.Atoms[13], Double);
            container.AddBond(container.Atoms[12], container.Atoms[23], Single);
            container.AddBond(container.Atoms[13], container.Atoms[24], Single);
            container.AddBond(container.Atoms[14], container.Atoms[15], Double);
            container.AddBond(container.Atoms[14], container.Atoms[19], Single);
            container.AddBond(container.Atoms[15], container.Atoms[16], Single);
            container.AddBond(container.Atoms[15], container.Atoms[25], Single);
            container.AddBond(container.Atoms[16], container.Atoms[17], Double);
            container.AddBond(container.Atoms[16], container.Atoms[26], Single);
            container.AddBond(container.Atoms[17], container.Atoms[18], Single);
            container.AddBond(container.Atoms[17], container.Atoms[27], Single);
            container.AddBond(container.Atoms[18], container.Atoms[19], Double);
            container.AddBond(container.Atoms[18], container.Atoms[28], Single);
            container.AddBond(container.Atoms[19], container.Atoms[29], Single);

            string[] expected = {"SO2", "S", "S", "SO2", "O2S", "O2S", "O2S", "O2S", "CB", "CB", "CB", "CB", "CB", "CB",
                "CB", "CB", "CB", "CB", "CB", "CB", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for ZZZVCQ01
        /// </summary>
        // @cdk.inchi InChI=1S/C4H4INO2/c5-6-3(7)1-2-4(6)8/h1-2H2
        [TestMethod()]
        public void TestZZZVCQ01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("I", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Double);
            container.AddBond(container.Atoms[2], container.Atoms[7], Double);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);

            string[] expected = { "I", "O=CN", "O=CN", "NC=O", "C=ON", "CR", "CR", "C=ON", "HC", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for AR14A
        /// </summary>
        // @cdk.inchi InChI=1S/C3H3NO/c1-2-5-3-4-1/h1-3H
        [TestMethod()]
        public void TestAR14A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);

            string[] expected = { "OFUR", "C5A", "N5B", "C5B", "C5A", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CA04A
        /// </summary>
        // @cdk.inchi InChI=1S/C2H2O3/c3-1-2(4)5/h1H,(H,4,5)
        [TestMethod()]
        public void TestCA04A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);

            string[] expected = { "O=CR", "C=OR", "COO", "O=CO", "OC=O", "HOCO", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CE05A
        /// </summary>
        // @cdk.inchi InChI=1S/C3H4O2/c1-2-5-3-4/h2-3H,1H2
        [TestMethod()]
        public void TestCE05A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);

            string[] expected = { "C=C", "C=C", "OC=O", "COO", "O=CO", "HC", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CO01A
        /// </summary>
        // @cdk.inchi InChI=1S/CH2O/c1-2/h1H2
        [TestMethod()]
        public void TestCO01A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);

            string[] expected = { "C=OR", "O=CR", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CO08A
        /// </summary>
        // @cdk.inchi InChI=1S/C4H6O/c1-2-3-4-5/h2,4H,1,3H2
        [TestMethod()]
        public void TestCO08A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Double);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);

            string[] expected = { "C=C", "CR", "C=OR", "O=CR", "HC", "C=C", "HC", "HC", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for HL08A
        /// </summary>
        // @cdk.inchi InChI=1S/C4H7Cl/c5-4-2-1-3-4/h4H,1-3H2
        [TestMethod()]
        public void TestHL08A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[2], container.Atoms[1], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[11], Single);

            string[] expected = { "CL", "CR4R", "CR4R", "CR4R", "CR4R", "HC", "HC", "HC", "HC", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for IM02A
        /// </summary>
        // @cdk.inchi InChI=1S/C2H5N/c1-3-2/h1H2,2H3
        [TestMethod()]
        public void TestIM02A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);

            string[] expected = { "C=N", "N=C", "CR", "HC", "HC", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for NC10A
        /// </summary>
        // @cdk.inchi InChI=1S/C2H5N/c1-3-2/h1H2,2H3/p+1
        [TestMethod()]
        public void TestNC10A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);

            string[] expected = { "C=N", "N+=C", "CR", "HC", "HC", "HNC+", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for NC13A
        /// </summary>
        // @cdk.inchi InChI=1S/CH3N/c1-2/h2H,1H2/p+1
        [TestMethod()]
        public void TestNC13A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);

            string[] expected = { "N+=C", "C=N", "HNC+", "HC", "HC", "HNC+" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for NH10A
        /// </summary>
        // @cdk.inchi InChI=1S/H3N/h1H3
        [TestMethod()]
        public void TestNH10A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);

            string[] expected = { "NR", "HNR", "HNR", "HNR" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for NH20A
        /// </summary>
        // @cdk.inchi InChI=1S/C3H9NO/c1-3-4(2)5/h4H,3H2,1-2H3
        [TestMethod()]
        public void TestNH20A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);

            string[] expected = { "CR", "N3OX", "CR", "CR", "OXN", "HNOX", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for NH22A
        /// </summary>
        // @cdk.inchi InChI=1S/C2H7NO/c1-2-3-4/h2-3H2,1H3
        [TestMethod()]
        public void TestNH22A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);

            string[] expected = { "HNOX", "N3OX", "CR", "CR", "OXN", "HNOX", "HC", "HC", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for NH23A
        /// </summary>
        // @cdk.inchi InChI=1S/C2H7NO/c1-2-3-4/h3-4H,2H2,1H3
        [TestMethod()]
        public void TestNH23A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);

            string[] expected = { "HNR", "NR", "CR", "CR", "-O-", "HC", "HC", "HC", "HC", "HC", "HO" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for OH10A
        /// </summary>
        // @cdk.inchi InChI=1S/C2H4O/c1-2-3/h2-3H,1H2
        [TestMethod()]
        public void TestOH10A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);

            string[] expected = { "C=C", "C=C", "OC=C", "HC", "HC", "HC", "HOCC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SR01A
        /// </summary>
        // @cdk.inchi InChI=1S/H2S/h1H2
        [TestMethod()]
        public void TestSR01A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);

            string[] expected = { "S", "HS", "HS" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SR05A
        /// </summary>
        // @cdk.inchi InChI=1S/CH4S2/c1-3-2/h2H,1H3
        [TestMethod()]
        public void TestSR05A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);

            string[] expected = { "S", "S", "CR", "HS", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SR07A
        /// </summary>
        // @cdk.inchi InChI=1S/C6H6S/c7-6-4-2-1-3-5-6/h1-5,7H
        [TestMethod()]
        public void TestSR07A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Double);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Double);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[6], container.Atoms[9], Double);
            container.AddBond(container.Atoms[6], container.Atoms[11], Single);
            container.AddBond(container.Atoms[9], container.Atoms[12], Single);

            string[] expected = { "CB", "CB", "CB", "S", "CB", "HC", "CB", "HC", "HS", "CB", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for AN05A
        /// </summary>
        // @cdk.inchi InChI=1S/CH3O/c1-2/h1H3/q-1
        [TestMethod()]
        public void TestAN05A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);

            string[] expected = { "CR", "OM", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for AN06A
        /// </summary>
        // @cdk.inchi InChI=1S/CH4S/c1-2/h2H,1H3/p-1
        [TestMethod()]
        public void TestAN06A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", -1));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);

            string[] expected = { "CR", "SM", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for AN08A
        /// </summary>
        // @cdk.inchi InChI=1S/C2H4S/c1-2-3/h2-3H,1H2/p-1
        [TestMethod()]
        public void TestAN08A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);

            string[] expected = { "SM", "C=C", "C=C", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for AN11A
        /// </summary>
        // @cdk.inchi InChI=1S/CHN4/c1-2-4-5-3-1/h1H/q-1
        [TestMethod()]
        public void TestAN11A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", -1));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Double);

            string[] expected = { "N5M", "N5M", "C5", "N5M", "N5M", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for AN12A
        /// </summary>
        // @cdk.inchi InChI=1S/C2H4N/c1-2-3/h2-3H,1H2/q-1
        [TestMethod()]
        public void TestAN12A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", -1));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);

            string[] expected = { "C=C", "C=C", "NM", "HNM", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for HL11A
        /// </summary>
        // @cdk.inchi InChI=1S/C3H5F/c4-3-1-2-3/h3H,1-2H2
        [TestMethod()]
        public void TestHL11A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[7], Single);

            string[] expected = { "F", "CR3R", "CR3R", "CR3R", "HC", "HC", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for HL13A
        /// </summary>
        // @cdk.inchi InChI=1S/C2H3F/c1-2-3/h2H,1H2
        [TestMethod()]
        public void TestHL13A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);

            string[] expected = { "F", "C=C", "C=C", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for NO03A
        /// </summary>
        // @cdk.inchi InChI=1S/CH3NO/c1-2-3/h1H3
        [TestMethod()]
        public void TestNO03A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);

            string[] expected = { "CR", "N=O", "O=N", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for NX02A
        /// </summary>
        // @cdk.inchi InChI=1S/C3H6N2/c1-3(2)5-4/h1-2H3
        [TestMethod()]
        public void TestNX02A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 1));
            container.Atoms.Add(NewAtm("N", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);

            string[] expected = { "CR", "C=N", "=N=", "NAZT", "CR", "HC", "HC", "HC", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for OC02A
        /// </summary>
        // @cdk.inchi InChI=1S/C3H6O/c1-3(2)4/h1-2H3/p+1
        [TestMethod()]
        public void TestOC02A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);

            string[] expected = { "CR", "C=OR", "O=+", "CR", "HO=+", "HC", "HC", "HC", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for PO02A
        /// </summary>
        // @cdk.inchi InChI=1S/H3OP/c1-2/h2H3
        [TestMethod()]
        public void TestPO02A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);

            string[] expected = { "PO", "OP", "HP", "HP", "HP" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for PO05A
        /// </summary>
        // @cdk.inchi InChI=1S/C2H8NO2P/c1-3-6(2,4)5/h1-2H3,(H2,3,4,5)/p-1
        [TestMethod()]
        public void TestPO05A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);

            string[] expected = { "CR", "NPO2", "PO2", "O2P", "O2P", "CR", "HNPO", "HC", "HC", "HC", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for PR01A
        /// </summary>
        // @cdk.inchi InChI=1S/H3P/h1H3
        [TestMethod()]
        public void TestPR01A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);

            string[] expected = { "P", "HP", "HP", "HP" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for PR02A
        /// </summary>
        // @cdk.inchi InChI=1S/CH5P/c1-2/h2H2,1H3
        [TestMethod()]
        public void TestPR02A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);

            string[] expected = { "CR", "P", "HP", "HP", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for PR03A
        /// </summary>
        // @cdk.inchi InChI=1S/CH4ClP/c1-3-2/h3H,1H3/t3-/m1/s1
        [TestMethod()]
        public void TestPR03A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);

            string[] expected = { "CR", "P", "CL", "HP", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for PR04A
        /// </summary>
        // @cdk.inchi InChI=1S/C3H7P/c1-3(2)4/h4H,1-2H3
        [TestMethod()]
        public void TestPR04A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[8], Single);

            string[] expected = { "CR", "C=P", "-P=C", "CR", "HP", "HC", "HC", "HC", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SI02A
        /// </summary>
        // @cdk.inchi InChI=1S/CH6Si/c1-2/h1-2H3
        [TestMethod()]
        public void TestSI02A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Si", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);

            string[] expected = { "SI", "CR", "HSI", "HSI", "HSI", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SI03A
        /// </summary>
        // @cdk.inchi InChI=1S/CH6OSi/c1-3-2/h2H,3H2,1H3
        [TestMethod()]
        public void TestSI03A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Si", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);

            string[] expected = { "SI", "CR", "-O-", "HSI", "HSI", "HC", "HC", "HC", "HO" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SO07A
        /// </summary>
        // @cdk.inchi InChI=1S/C8H9NO3S/c1-13(11,12)9-8(10)7-5-3-2-4-6-7/h2-6H,1H3,(H,9,10)
        [TestMethod()]
        public void TestSO07A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Double);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[14], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[15], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[16], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Double);
            container.AddBond(container.Atoms[4], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[13], Double);
            container.AddBond(container.Atoms[7], container.Atoms[8], Single);
            container.AddBond(container.Atoms[7], container.Atoms[12], Single);
            container.AddBond(container.Atoms[8], container.Atoms[9], Double);
            container.AddBond(container.Atoms[8], container.Atoms[10], Double);
            container.AddBond(container.Atoms[8], container.Atoms[11], Single);
            container.AddBond(container.Atoms[11], container.Atoms[19], Single);
            container.AddBond(container.Atoms[11], container.Atoms[20], Single);
            container.AddBond(container.Atoms[11], container.Atoms[21], Single);

            string[] expected = {"CB", "CB", "CB", "CB", "CB", "CB", "C=ON", "NSO2", "SO2N", "O2S", "O2S", "CR", "HNSO",
                "O=CN", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SO12A
        /// </summary>
        // @cdk.inchi InChI=1S/H2O4S/c1-5(2,3)4/h(H2,1,2,3,4)
        [TestMethod()]
        public void TestSO12A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[4], Double);
            container.AddBond(container.Atoms[0], container.Atoms[3], Double);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[2], container.Atoms[6], Single);

            string[] expected = { "SO4", "OSO3", "OSO3", "O2S", "O2S", "HOS", "HOS" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SO15A
        /// </summary>
        // @cdk.inchi InChI=1S/C2H6NO2S/c1-3-6(2,4)5/h1-2H3/q-1
        [TestMethod()]
        public void TestSO15A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("N", -1));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Double);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);

            string[] expected = { "CR", "SO2N", "O2S", "O2S", "NM", "CR", "HC", "HC", "HC", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SO16A
        /// </summary>
        // @cdk.inchi InChI=1S/C3H6OS/c1-3(2)5-4/h1-2H3
        [TestMethod()]
        public void TestSO16A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[5], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Double);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[4], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);

            string[] expected = { "CR", "CS=O", "=S=O", "O=S=", "CR", "HC", "HC", "HC", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for SO18A
        /// </summary>
        // @cdk.inchi InChI=1S/CH3OS2/c1-4(2)3/h1H3
        [TestMethod()]
        public void TestSO18A()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Double);
            container.AddBond(container.Atoms[2], container.Atoms[5], Double);

            string[] expected = { "HC", "CR", "SSOM", "OSMS", "HC", "SSMO", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for BRMW1
        /// </summary>
        // @cdk.inchi InChI=1S/Br.H2O/h;1H2
        [TestMethod()]
        public void TestBRMW1()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("Br", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);

            string[] expected = { "OH2", "HOH", "HOH", "BR-" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CA2PW3
        /// </summary>
        // @cdk.inchi InChI=1S/Ca.3H2O/h;3*1H2
        [TestMethod()]
        public void TestCA2PW3()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("Ca", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);

            string[] expected = { "OH2", "HOH", "HOH", "OH2", "HOH", "HOH", "OH2", "HOH", "HOH", "CA+2" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CLMW1
        /// </summary>
        // @cdk.inchi InChI=1S/Cl.H2O/h;1H2
        [TestMethod()]
        public void TestCLMW1()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("Cl", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);

            string[] expected = { "OH2", "HOH", "HOH", "CL-" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CU1PW1
        /// </summary>
        // @cdk.inchi InChI=1S/Cu.H2O/h;1H2
        [TestMethod()]
        public void TestCU1PW1()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("Cu", +1));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);

            string[] expected = { "OH2", "HOH", "HOH", "CU+1" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for CU2PW3
        /// </summary>
        // @cdk.inchi InChI=1S/Cu.3H2O/h;3*1H2
        [TestMethod()]
        public void TestCU2PW3()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("Cu", +2));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);

            string[] expected = { "OH2", "HOH", "HOH", "OH2", "HOH", "HOH", "OH2", "HOH", "HOH", "CU+2" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FE2PW3
        /// </summary>
        // @cdk.inchi InChI=1S/Fe.3H2O/h;3*1H2
        [TestMethod()]
        public void TestFE2PW3()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("Fe", +2));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);

            string[] expected = { "OH2", "HOH", "HOH", "OH2", "HOH", "HOH", "OH2", "HOH", "HOH", "FE+2" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FE3PW3
        /// </summary>
        // @cdk.inchi InChI=1S/Fe.3H2O/h;3*1H2
        [TestMethod()]
        public void TestFE3PW3()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("Fe", +3));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);

            string[] expected = { "OH2", "HOH", "HOH", "OH2", "HOH", "HOH", "OH2", "HOH", "HOH", "FE+3" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for FMW1
        /// </summary>
        // @cdk.inchi InChI=1S/F.H2O/h;1H2
        [TestMethod()]
        public void TestFMW1()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);

            string[] expected = { "OH2", "HOH", "HOH", "F-" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for H3OPW1
        /// </summary>
        // @cdk.inchi InChI=1S/2H2O/h2*1H2/p+1
        [TestMethod()]
        public void TestH3OPW1()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("O", 1));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);

            string[] expected = { "OH2", "HOH", "HOH", "O+", "HO+", "HO+", "HO+" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for KPW1
        /// </summary>
        // @cdk.inchi InChI=1S/K.H2O/h;1H2
        [TestMethod()]
        public void TestKPW1()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("K", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);

            string[] expected = { "OH2", "HOH", "HOH", "K+" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for LIPW1
        /// </summary>
        // @cdk.inchi InChI=1S/Li.H2O/h;1H2
        [TestMethod()]
        public void TestLIPW1()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("Li", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);

            string[] expected = { "OH2", "HOH", "HOH", "LI+" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for MG2PW3
        /// </summary>
        // @cdk.inchi InChI=1S/Mg.3H2O/h;3*1H2
        [TestMethod()]
        public void TestMG2PW3()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("Mg", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);

            string[] expected = { "OH2", "HOH", "HOH", "OH2", "HOH", "HOH", "OH2", "HOH", "HOH", "MG+2" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for NAPW
        /// </summary>
        // @cdk.inchi InChI=1S/Na.H2O/h;1H2
        [TestMethod()]
        public void TestNAPW()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("Na", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);

            string[] expected = { "OH2", "HOH", "HOH", "NA+" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for OHMW1
        /// </summary>
        // @cdk.inchi InChI=1S/2H2O/h2*1H2/p-1
        [TestMethod()]
        public void TestOHMW1()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("O", -1));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);

            string[] expected = { "OH2", "HOH", "HOH", "OM", "HOM" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for ZN2PW3
        /// </summary>
        // @cdk.inchi InChI=1S/3H2O.Zn/h3*1H2;
        [TestMethod()]
        public void TestZN2PW3()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("O", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("Zn", +2));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[5], Single);
            container.AddBond(container.Atoms[6], container.Atoms[7], Single);
            container.AddBond(container.Atoms[6], container.Atoms[8], Single);

            string[] expected = { "OH2", "HOH", "HOH", "OH2", "HOH", "HOH", "OH2", "HOH", "HOH", "ZN+2" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for ERULE01
        /// </summary>
        // @cdk.inchi InChI=1S/C3H8N2S/c1-3-4-2-5-6-3/h3-5H,2H2,1H3/t3-/m1/s1
        [TestMethod()]
        public void TestERULE01()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[4], container.Atoms[0], Single);
            container.AddBond(container.Atoms[5], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[4], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[1], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[5], container.Atoms[10], Single);
            container.AddBond(container.Atoms[5], container.Atoms[11], Single);
            container.AddBond(container.Atoms[5], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);

            string[] expected = { "S", "NR", "NR", "CR", "CR", "CR", "HC", "HC", "HNR", "HNR", "HC", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for ERULE02
        /// </summary>
        // @cdk.inchi InChI=1S/C2H6N2S/c1-2-5-4-3-1/h3-4H,1-2H2
        [TestMethod()]
        public void TestERULE02()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[2], container.Atoms[1], Single);
            container.AddBond(container.Atoms[3], container.Atoms[2], Single);
            container.AddBond(container.Atoms[4], container.Atoms[0], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);
            container.AddBond(container.Atoms[3], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[1], container.Atoms[9], Single);
            container.AddBond(container.Atoms[1], container.Atoms[10], Single);

            string[] expected = { "CR", "CR", "NR", "NR", "S", "HNR", "HNR", "HC", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for ERULE03
        /// </summary>
        // @cdk.inchi InChI=1S/C4H13PSi/c1-5-6(2,3)4/h5H,1-4H3/t5-/m1/s1
        [TestMethod()]
        public void TestERULE03()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("Si", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[3], container.Atoms[1], Single);
            container.AddBond(container.Atoms[4], container.Atoms[1], Single);
            container.AddBond(container.Atoms[5], container.Atoms[0], Single);
            container.AddBond(container.Atoms[0], container.Atoms[6], Single);
            container.AddBond(container.Atoms[2], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[3], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);
            container.AddBond(container.Atoms[4], container.Atoms[13], Single);
            container.AddBond(container.Atoms[4], container.Atoms[14], Single);
            container.AddBond(container.Atoms[4], container.Atoms[15], Single);
            container.AddBond(container.Atoms[5], container.Atoms[16], Single);
            container.AddBond(container.Atoms[5], container.Atoms[17], Single);
            container.AddBond(container.Atoms[5], container.Atoms[18], Single);

            string[] expected = {"P", "SI", "CR", "CR", "CR", "CR", "HP", "HC", "HC", "HC", "HC", "HC", "HC", "HC", "HC",
                "HC", "HC", "HC", "HC"};
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for ERULE04
        /// </summary>
        // @cdk.inchi InChI=1S/C2H4ClNS2/c3-2-1-5-6-4-2/h2,4H,1H2/t2-/m1/s1
        [TestMethod()]
        public void TestERULE04()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("Cl", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("S", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[5], container.Atoms[9], Single);

            string[] expected = { "CL", "CR", "NR", "S", "S", "CR", "HC", "HC", "HNR", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for ERULE05
        /// </summary>
        // @cdk.inchi InChI=1S/H3P3/c1-2-3-1/h1-3H/t1-,2-,3-
        [TestMethod()]
        public void TestERULE05()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("P", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[0], Single);
            container.AddBond(container.Atoms[0], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[2], container.Atoms[5], Single);

            string[] expected = { "P", "P", "P", "HP", "HP", "HP" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for ERULE06
        /// </summary>
        // @cdk.inchi InChI=1S/C2H6FN/c1-4(2)3/h1-2H3
        [TestMethod()]
        public void TestERULE06()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("F", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[0], Single);
            container.AddBond(container.Atoms[1], container.Atoms[3], Single);
            container.AddBond(container.Atoms[1], container.Atoms[4], Single);
            container.AddBond(container.Atoms[1], container.Atoms[5], Single);
            container.AddBond(container.Atoms[1], container.Atoms[6], Single);
            container.AddBond(container.Atoms[0], container.Atoms[7], Single);
            container.AddBond(container.Atoms[0], container.Atoms[8], Single);
            container.AddBond(container.Atoms[0], container.Atoms[9], Single);

            string[] expected = { "CR", "CR", "F", "NR", "HC", "HC", "HC", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for ERULE07
        /// </summary>
        // @cdk.inchi InChI=1S/C4H8N2/c1-4-2-6(4)3-5-1/h4-5H,1-3H2/t4-,6-/m1/s1
        [TestMethod()]
        public void TestERULE07()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[2], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[3], container.Atoms[1], Single);
            container.AddBond(container.Atoms[4], container.Atoms[0], Single);
            container.AddBond(container.Atoms[5], container.Atoms[0], Single);
            container.AddBond(container.Atoms[3], container.Atoms[4], Single);
            container.AddBond(container.Atoms[4], container.Atoms[5], Single);
            container.AddBond(container.Atoms[5], container.Atoms[6], Single);
            container.AddBond(container.Atoms[5], container.Atoms[7], Single);
            container.AddBond(container.Atoms[2], container.Atoms[8], Single);
            container.AddBond(container.Atoms[3], container.Atoms[9], Single);
            container.AddBond(container.Atoms[4], container.Atoms[10], Single);
            container.AddBond(container.Atoms[1], container.Atoms[11], Single);
            container.AddBond(container.Atoms[2], container.Atoms[12], Single);
            container.AddBond(container.Atoms[3], container.Atoms[13], Single);

            string[] expected = { "NR", "NR", "CR", "CR", "CR3R", "CR3R", "HC", "HC", "HC", "HC", "HC", "HNR", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        /// <summary>
        /// Generated test for ERULE08
        /// </summary>
        // @cdk.inchi InChI=1S/C3H8N2/c1-5-3-2-4-5/h4H,2-3H2,1H3
        [TestMethod()]
        public void TestERULE08()
        {
            var container = Silent.ChemObjectBuilder.Instance.NewAtomContainer();
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("N", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("C", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.Atoms.Add(NewAtm("H", 0));
            container.AddBond(container.Atoms[0], container.Atoms[1], Single);
            container.AddBond(container.Atoms[1], container.Atoms[2], Single);
            container.AddBond(container.Atoms[2], container.Atoms[3], Single);
            container.AddBond(container.Atoms[3], container.Atoms[0], Single);
            container.AddBond(container.Atoms[4], container.Atoms[0], Single);
            container.AddBond(container.Atoms[5], container.Atoms[1], Single);
            container.AddBond(container.Atoms[4], container.Atoms[6], Single);
            container.AddBond(container.Atoms[4], container.Atoms[7], Single);
            container.AddBond(container.Atoms[4], container.Atoms[8], Single);
            container.AddBond(container.Atoms[2], container.Atoms[9], Single);
            container.AddBond(container.Atoms[2], container.Atoms[10], Single);
            container.AddBond(container.Atoms[3], container.Atoms[11], Single);
            container.AddBond(container.Atoms[3], container.Atoms[12], Single);

            string[] expected = { "NR", "NR", "CR4R", "CR4R", "CR", "HNR", "HC", "HC", "HC", "HC", "HC", "HC", "HC" };
            AssertMatchingTypes(container, Assign(container), expected);
        }

        // helper method for creating atoms
        static IAtom NewAtm(string symbol, int charge)
        {
            IAtom atom = Silent.ChemObjectBuilder.Instance.NewAtom(symbol);
            atom.ImplicitHydrogenCount = 0;
            atom.FormalCharge = charge;
            return atom;
        }

        public abstract string[] Assign(IAtomContainer container);

        public abstract void AssertMatchingTypes(IAtomContainer container, string[] actual, string[] expected);
    }
}
