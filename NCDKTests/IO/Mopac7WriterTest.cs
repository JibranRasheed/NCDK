/* Copyright (C) 2012  Egon Willighagen <egon.willighagen@gmail.com>
 *
 * Contact: cdk-devel@slists.sourceforge.net
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1
 * of the License, or (at your option) any later version.
 * All we ask is that proper credit is given for our work, which includes
 * - but is not limited to - adding the above copyright notice to the beginning
 * of your source code files, and to any copyright notice that you may distribute
 * with programs based on this work.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT Any WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 */
using Microsoft.VisualStudio.TestTools.UnitTesting;
using NCDK.Default;
using NCDK.IO.Listener;
using System;
using System.Collections.Specialized;
using System.IO;

namespace NCDK.IO
{
    // @cdk.module test-io
    [TestClass()]
    public class Mopac7WriterTest : ChemObjectWriterTest
    {
        protected override Type ChemObjectIOToTestType => typeof(Mopac7Writer);

        private static IChemObject[] allChemObjectsTypes = {
            new ChemFile(), new ChemModel(), new Reaction(),
            new ChemObjectSet<IAtomContainer>(), new AtomContainer(), };
        [TestMethod()]
        public void TestAccepts()
        {
            Mopac7Writer reader = new Mopac7Writer(new StringWriter());
            Assert.IsTrue(reader.Accepts(typeof(AtomContainer)));
        }

        [TestMethod()]
        public void TestWrite()
        {
            StringWriter strWriter = new StringWriter();
            Mopac7Writer writer = new Mopac7Writer(strWriter);

            IAtomContainer mol = new AtomContainer();
            mol.Atoms.Add(new Atom("Cr"));
            writer.Write(mol);
            writer.Close();

            Assert.IsTrue(strWriter.ToString().Contains("PM3"));
            Assert.IsTrue(strWriter.ToString().Contains("Cr "));
            Assert.IsTrue(strWriter.ToString().Contains("Generated by"));
        }

        [TestMethod()]
        public void TestWriteWithOptimizationTrue()
        {
            IAtomContainer mol = new AtomContainer();
            mol.Atoms.Add(new Atom("Cr"));

            StringWriter strWriter = new StringWriter();
            Mopac7Writer writer = new Mopac7Writer(strWriter);
            var customizations = new NameValueCollection();
            customizations["optimize"] = "true";
            writer.Listeners.Add(new PropertiesListener(customizations));
            writer.Write(mol);
            writer.Close();
            Assert.IsTrue(strWriter.ToString().Contains("PRECISE"));
        }

        [TestMethod()]
        public void TestWriteWithOptimizationFalse()
        {
            IAtomContainer mol = new AtomContainer();
            mol.Atoms.Add(new Atom("Cr"));

            StringWriter strWriter = new StringWriter();
            Mopac7Writer writer = new Mopac7Writer(strWriter);
            var customizations = new NameValueCollection();
            customizations["optimize"] = "false";
            writer.Listeners.Add(new PropertiesListener(customizations));
            writer.Write(mol);
            writer.Close();
            Assert.IsFalse(strWriter.ToString().Contains("PRECISE"));
        }

        [TestMethod()]
        public void TestWriteWithCustomCommands()
        {
            IAtomContainer mol = new AtomContainer();
            mol.Atoms.Add(new Atom("Cr"));

            StringWriter strWriter = new StringWriter();
            Mopac7Writer writer = new Mopac7Writer(strWriter);
            var customizations = new NameValueCollection();
            customizations["Commands"] = "THIS IS NOT GOING TO WORK";
            writer.Listeners.Add(new PropertiesListener(customizations));
            writer.Write(mol);
            writer.Close();
            Assert.IsTrue(strWriter.ToString().Contains("THIS IS NOT GOING TO WORK"));
        }

        [TestMethod()]
        public void TestChargedCompounds()
        {
            IAtomContainer mol = new AtomContainer();
            IAtom aluminum = new Atom("Al");
            aluminum.FormalCharge = +3;
            mol.Atoms.Add(aluminum);

            StringWriter strWriter = new StringWriter();
            Mopac7Writer writer = new Mopac7Writer(strWriter);
            writer.Write(mol);
            writer.Close();
            Assert.IsTrue(strWriter.ToString().Contains("CHARGE=3"));
        }
    }
}
