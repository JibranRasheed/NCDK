<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".tt.cs" #>

namespace NCDK.Graphs
{
    public class Cycles_Example
    {
        public void Main()
        {
<#
    foreach (var nc in ncs)
    {
#>
            {
                IChemObjectSet<IAtomContainer> containers = null;
                #region <#= nc.Name #>
                ICycleFinder cf = Cycles.AllFinder;
                foreach (var container in containers) 
                {
                    try
                    {
                        Cycles cycles = cf.Find(container);
                        IRingSet rings  = cycles.ToRingSet();
                    } 
                    catch (IntractableException) 
                    {
                        // <#= nc.Comment #>
                    }
                }
                #endregion
            }
<#
    }
#>

            {
                #region Or6
                // all cycles or all cycles size <= 6
                ICycleFinder cf = Cycles.Or(Cycles.AllFinder, Cycles.GetAllFinder(6));
                #endregion
            }
            {
                #region OrARE
                // all cycles or relevant or essential
                ICycleFinder cf = Cycles.Or(Cycles.AllFinder, Cycles.Or(Cycles.RelevantFinder, Cycles.EssentialFinder));
                #endregion
            }

<#
    foreach (var nc in finds)
    {
#>
            {
                IChemObjectSet<IAtomContainer> containers = null;
<#
        if (nc.Comment == null)
        {
#>
                IAtomContainer container = null;
<#
        }
#>
                #region <#= nc.Name #>
<#
        if (nc.Comment != null)
        {
#>
                foreach (var container in containers)
                {
                    try
                    {
<#
        }
#>
                        Cycles cycles = Cycles.<#= nc.Name #>(container);
                        IRingSet rings = cycles.ToRingSet();
<#
        if (nc.Comment != null)
        {
#>
                    }
                    catch (IntractableException)
                    {
                        // <#= nc.Comment #>
                    }
                }
<#
        }
#>
                #endregion
            }
<#
    }
#>
        }
    }
}

<#+
    class NameComment 
    {
        public string Name;
        public string Comment;

        public NameComment(string name, string comment)
        {
            Name = name;
            Comment = comment;
        }
    }
#>
<#+
    static IList<NameComment> ncs = new List<NameComment>()
    {
        new NameComment("AllFinder", "handle error - note it is common that finding all simple cycles in chemical graphs is intractable"),
        new NameComment("MCB", "ignore error - MCB should never be intractable"),
        new NameComment("Relevant", "ignore error - there may be an exponential number of cycles but this is not currently checked"),
        new NameComment("Essential", "ignore error - essential cycles do not check tractability"),
        new NameComment("TripletShort", "ignore error - triple short cycles do not check tractability"),
        new NameComment("VertexShort", "ignore error - vertex short cycles do not check tractability"),
        new NameComment("EdgeShort", "ignore error - edge short cycles do not check tractability"),
        new NameComment("CDKAromaticSetFinder", "ignore error - edge short cycles do not check tractability"),
        new NameComment("AllOrVertexShortFinder", "ignore error - edge short cycles do not check tractability"),
    };
    static IList<NameComment> finds = new List<NameComment>()
    {
        new NameComment("FindAll", "handle error - note it is common that finding all simple cycles in chemical graphs is intractable"),
        new NameComment("FindMCB", null),
        new NameComment("FindSSSR", null),
        new NameComment("FindRelevant", null),
        new NameComment("FindEssential", null),
        new NameComment("FindTripletShort", null),
        new NameComment("FindVertexShort", null),
        new NameComment("FindEdgeShort", null),
    };
#>




