<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>

<#+
/*
 * Copyright (C) 2017  Kazuya Ujihara <ujihara.kazuya@gmail.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1
 * of the License, or (at your option) any later version.
 * All we ask is that proper credit is given for our work, which includes
 * - but is not limited to - adding the above copyright notice to the beginning
 * of your source code files, and to any copyright notice that you may distribute
 * with programs based on this work.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT Any WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 */
#>

<#+
	static readonly HashSet<string> primitiveTypeNames = new HashSet<string>()
		{ "void", "bool", "short", "int", "long", "float", "double", "string", };
	static bool IsPrimitive(string typeName) => primitiveTypeNames.Contains(typeName);

	const string G_Name = @"(?<name>\w+)";
	const string G_Return = @"(?<return>[A-Za-z_][A-Za-z0-9_]*)";
	const string G_TP = @"(?<typeandparam>\w+[\w\<\>]* \w+)";
	const string RE_TPs = "(" + G_TP + @"(\,\s*" + G_TP + @")*)?";
	const string RE_GetOrSet = @"\{\s*(?<get>get\;)?\s*(?<set>set\;)?\s*\}";
	const string re2_pattern = "(?<membermethod>" + G_Return + @"\s+" + G_Name + @"\(" + RE_TPs + @"\)\;)";
	const string re_this_pattern = "(?<memberindexer>" + G_Return + @" this\[" + RE_TPs + @"\]\s*" + RE_GetOrSet + ")";
	const string re_property_pattern = "(?<memberproperty>" + G_Return + @"\s+" + G_Name + @"\s*" + RE_GetOrSet + ")";
	static readonly Regex re2 = new Regex("^" + re2_pattern +"$", RegexOptions.Compiled);
	static readonly Regex re_this = new Regex("^" + re_this_pattern + "$", RegexOptions.Compiled);
	static readonly Regex re_property = new Regex("^" + re_property_pattern + "$", RegexOptions.Compiled);
	static readonly Regex re_members = new Regex(@"(\s*" + re2_pattern + @"\s*" + "|" + @"\s*" + re_this_pattern + @"\s*" + "|" + @"\s*" + re_property_pattern + @"\s*)");

	static readonly Regex re_long = new Regex(@"\blong\b", RegexOptions.Compiled);

	const string C_Guid_Interface = "Guid_interface";
	const string C_Guid_class = "Guid_class";
	const string C_class_name = "class_name";
	const string C_implement_interfaces = "implement_interfaces";
	const string C_members = "members";

	public void MakeWrappers(string filename)
	{
		using (var reader = new StreamReader(filename))
		{
			string[] titleRow = null;
			string m_Guid_Interface = null;
			string m_Guid_class = null;
			string m_class_name = null;
			string m_implement_interfaces = null;
			string m_members = null;
			bool isFirst = true;
			string line;
			while ((line = reader.ReadLine()) != null)
			{
				if (isFirst)
				{
					isFirst = false;
					titleRow = line.Split('\t').Select(n => n.Trim()).ToArray();
					continue;
				}
				string[] cells = new string[5];
				string[] line_split = line.Split('\t').Select(n => n.Trim()).Select(n => (string.IsNullOrEmpty(n) ? null : n)).ToArray();
				for (int i = 0; i < titleRow.Length; i++)
				{
					switch (titleRow[i])
					{
						case C_Guid_Interface:
							m_Guid_Interface = line_split[i];
							break;
						case C_Guid_class:
							m_Guid_class = line_split[i];
							break;
						case C_class_name:
							m_class_name = line_split[i];
							break;
						case C_implement_interfaces:
							m_implement_interfaces = line_split[i];
							break;
						case C_members:
							m_members = line_split[i];
							break;
						default:
							break;
					}
				}
				string[] interfaces = null;
				string[] methods = null;	
				if (m_implement_interfaces != null)
				{
					interfaces = m_implement_interfaces.Split(',').Select(n => n.Trim()).Where(n => !string.IsNullOrEmpty(n)).ToArray();
				}
				if (m_members != null)
				{
					methods =re_members.Matches(m_members).Cast<Capture>().Select(n => n.Value.Trim()).ToArray();
				}
				CC(m_Guid_Interface, m_Guid_class, m_class_name, interfaces, methods);
			}
		}
	}
#>
<#+
	public void CC(string guid, string guidClass, string fullName, string[] interfaces, string[] methods)
	{
		if (methods == null)
			methods = Array.Empty<string>();
		if (interfaces == null)
			interfaces = Array.Empty<string>();

		bool isClass = (guidClass != null);
		string ns;
		string className;
		string interfaceName;
		string wrapperClassName;
		{
			int lastP = fullName.LastIndexOf('.');
			ns = fullName.Substring(0, lastP);
			className = fullName.Substring(lastP + 1);
			interfaceName = (isClass ? "I" : "") + className;
			wrapperClassName = (isClass ? "" : "W_") + className;
		}
#>
namespace ACDK
{
    [Guid("<#=guid#>")]
    [InterfaceType(ComInterfaceType.InterfaceIsDual)]
    public partial interface <#=interfaceName#>
    {
<#+
		int startInex = 0x1001;
		int dispIdIndex;
		dispIdIndex = startInex;
		foreach (var method in methods)
		{
			if (!string.IsNullOrEmpty(method))
			{
#>
		[DispId(0x<#=dispIdIndex.ToString("X4")#>)]
		<#=re_long.Replace(method, "int")#>
<#+
			}
			dispIdIndex++;
		}
#>
    }

<#+
		if (isClass)
		{
#>
	[Guid("<#=guidClass#>")]
	[ComDefaultInterface(typeof(<#=interfaceName#>))]
<#+
		}
		else
		{
#>
	[ComVisible(false)]
<#+
		}
#>
    public sealed partial class <#=wrapperClassName#>
        : <#=interfaceName#>
<#+
		foreach (var interfac in interfaces)
		{
#>
			, <#=interfac#>
<#+
		}
#>
    {
        <#=fullName#> obj;
        public <#=fullName#> Object => obj;
<#+
		if (guidClass != null)
		{
#>
        public <#=wrapperClassName#>()
			 : this(new <#=fullName#>())
		{
		}
<#+
		}
#>
        public <#=wrapperClassName#>(<#=fullName#> obj)
        {
            this.obj = obj;
        }
<#+
		dispIdIndex = startInex;
		foreach (var method in methods)
		{
			if (!string.IsNullOrEmpty(method))
			{
				if (guidClass != null)
				{
#>
		[DispId(0x<#=dispIdIndex.ToString("X4")#>)]
<#+
				}
#>
		<#=MakeMemberWrapper(method)#>
<#+
			}
			dispIdIndex++;
		}
#>
    }
}
<#+
	}

		class TypeAndParamerterName
		{
			public string TypeName { get; set; }
			public string ParameterName { get; set; }

			public TypeAndParamerterName(string typeName, string parameterName)
			{
				this.TypeName = typeName;
				this.ParameterName = parameterName;
			}

			public override string ToString()
			{
				return TypeName + " " + ParameterName;
			}
		}
	
		List<TypeAndParamerterName> MakeTypeAndParameters(Match match)
		{
			List<TypeAndParamerterName> typeAndParameters = new List<TypeAndParamerterName>();
			foreach (Capture tp in match.Groups["typeandparam"].Captures)
			{
				var tpa = tp.Value.Split(' ');
				typeAndParameters.Add(new TypeAndParamerterName(tpa[0], tpa[1]));
			}
			return typeAndParameters;
		}

		string MakeMemberWrapper(string method)
		{
			var sb = new StringBuilder();
			sb.Append("public ");

			string methodName = null;
			string returnTypeName = null;
			List<TypeAndParamerterName> typeAndParameters = new List<TypeAndParamerterName>();
			string str = method;
			Match match;
			if ((match = re2.Match(str)).Success)
			{
				methodName = match.Groups["name"].Value;
				returnTypeName = match.Groups["return"].Value;
				typeAndParameters = MakeTypeAndParameters(match);

				var methoddef = returnTypeName + " " + methodName + "(" + string.Join(", ", typeAndParameters) + ")";
				methoddef = re_long.Replace(methoddef, "int");
				sb.Append(methoddef);
				sb.Append(" => ");
				sb.Append(MakeMethodWrapper(methodName, returnTypeName, typeAndParameters));
				sb.Append(';');
			}
			else if ((match = re_this.Match(str)).Success)
			{
				bool hasGet = match.Groups["get"].Captures.Count > 0;
				bool hasSet = match.Groups["set"].Captures.Count > 0;

				methodName = "this";
				returnTypeName = match.Groups["return"].Value;
				typeAndParameters = MakeTypeAndParameters(match);

				var methoddef =returnTypeName + " " + methodName + "[" + string.Join(", ", typeAndParameters) + "]";
				methoddef = re_long.Replace(methoddef, "int");
				sb.Append(methoddef);
				sb.Append(" {");
				sb.Append(MakeThisWrapper(returnTypeName, typeAndParameters, hasGet, hasSet));
				sb.Append(" }");
			}		
			else if ((match = re_property.Match(str)).Success)
			{
				bool hasGet = match.Groups["get"].Captures.Count > 0;
				bool hasSet = match.Groups["set"].Captures.Count > 0;

				methodName = match.Groups["name"].Value;
				returnTypeName = match.Groups["return"].Value;

				var methoddef =returnTypeName + " " + methodName;
				methoddef = re_long.Replace(methoddef, "int");

				sb.Append(methoddef);
				sb.Append(" {");
				sb.Append(MakePropertyWrapper(methodName, returnTypeName, hasGet, hasSet));
				sb.Append("}");
			}
			else
			{
#>
		ERROR: "<#=method#>"
<#+
			}
			return sb.ToString();
		}

		static string MakeUnwrapTypeCode(TypeAndParamerterName tp)
		{
			var type = tp.TypeName;
			var name = tp.ParameterName;
			if (type == "long")
				return "(long)" + name;
			if (IsPrimitive(type))
				return name;
			return "((W_" + type + ")" + name + ").Object";
		}

		string MakeMethodWrappersParameters(IEnumerable<TypeAndParamerterName> parameters)
		{
			var ss = new List<string>();
			foreach (var tp in parameters)
			{
				ss.Add(MakeUnwrapTypeCode(tp));
			}
			return string.Join(", ", ss);
		}
		
		string MakePropertyWrapper(string methodName, string returnTypeName, bool hasGet, bool hasSet)
		{
			var sb = new StringBuilder();
			if (hasGet)
			{
				sb.Append(" get { return ");
				sb.Append(MakeMethodWrapper2(methodName, returnTypeName, null));
				sb.Append("; }");
			}
			if (hasSet)
			{
				sb.Append(" set { Object.");
				sb.Append(methodName);
				sb.Append(" = value; }");
			}
			return sb.ToString();		
		}

		string MakeThisWrapper(string returnTypeName, IEnumerable<TypeAndParamerterName> parameters, bool hasGet, bool hasSet)
		{
			var sb = new StringBuilder();
			if (hasGet)
			{
				sb.Append(" get { return ");
				sb.Append(MakeMethodWrapper2("this", returnTypeName, parameters));
				sb.Append("; }");
			}
			if (hasSet)
			{
				sb.Append(" set { Object[");
				sb.Append(string.Join(", ", parameters.Select(n => n.ParameterName)));
				sb.Append("] = value; }");
			}
			return sb.ToString();
		}

		string MakeMethodWrapper(string methodName, string returnTypeName, IEnumerable<TypeAndParamerterName> parameters)
		{
			return MakeMethodWrapper2(methodName, returnTypeName, parameters);
		}

		static string OpenP(bool isIndexer)
			=> isIndexer ? "[" : "(";

		static string CloseP(bool isIndexer)
			=> isIndexer ? "]" : ")";

		string MakeMethodWrapper2(string methodName, string returnTypeName, IEnumerable<TypeAndParamerterName> parameters)
		{
			bool isIndexer = methodName == "this";

			var sb = new StringBuilder();

			if (!IsPrimitive(returnTypeName))
			{
				sb.Append("new ");
				sb.Append("W_" + returnTypeName).Append("(");
			}
			else if (returnTypeName == "long")
			{
				sb.Append("(int)");
			}
			
			sb.Append("Object");
			if (!isIndexer)
			{
				sb.Append('.').Append(methodName);
			}
			if (parameters != null)
			{
				sb.Append(OpenP(isIndexer));
				sb.Append(MakeMethodWrappersParameters(parameters));
				sb.Append(CloseP(isIndexer));
			}
			if (!IsPrimitive(returnTypeName))
			{
				sb.Append(")");
			}
			return sb.ToString();
		}
#>
